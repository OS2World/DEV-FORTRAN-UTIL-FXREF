%!
% Copyright (C) 1987 MARC Software International
%
/WM7DICT 200 dict def
WM7DICT begin
/WMDICTEND {} def
/reencsmalldict 16 dict def
reencsmalldict begin
 /SuperScale 0.75 def
 /SuperOffset 0.5 def
 /SubOffset -0.3 def
 /SuperMatrix [SuperScale 0.0 0.0 SuperScale 0.0 SuperOffset] def
 /SubMatrix  [SuperScale 0.0 0.0 SuperScale 0.0 SubOffset ] def
 /Itemdict 5 dict def
 Itemdict begin
   /FID {pop pop} bind def
   /FontName {exch pop newfont exch newfontname put} bind def
   /Encoding {exch pop newencodingvector newfont 3 1 roll put} bind def
   /FontMatrix {exch cvlit transmat matrix concatmatrix
          newfont 3 1 roll put} bind def
   /FontBBox {exch cvlit aload pop
     transmat transform 4 2 roll
     transmat transform 4 2 roll
     4 array astore
     newfont 3 1 roll put} bind def
 end
end

/MakeMARCFont
 {reencsmalldict begin
 /newencodingvector exch def
 /basefontname exch def
 /newfontname exch def
 FontDirectory newfontname known not
 {/basefontdict basefontname findfont def
  /newfont basefontdict maxlength dict def
  basefontdict
  {exch dup /FID ne
   {dup /Encoding eq
    {exch pop newencodingvector}
    {exch}
   ifelse
   newfont 3 1 roll put
   }
   {pop pop}
  ifelse
  } forall
  newfont /FontName newfontname put
  newfontname newfont definefont pop
 }
 if
 end
}bind def
/MakeSuperFont
 {reencsmalldict begin
 dup type /nametype eq {load} if
   /transmat exch def
 exch
 /basefontname exch def
 exch
 /newfontname exch def
 FontDirectory newfontname known
  {pop}
  {/basefontdict basefontname findfont def
  /newfont basefontdict maxlength dict def
  dup /Encoding eq
   {pop basefontdict /Encoding get}
  if
  /newencodingvector exch def
  basefontdict
   {exch dup Itemdict exch known
    {dup Itemdict exch get exec}
    {exch newfont 3 1 roll put}
   ifelse
   } forall
   newfontname newfont definefont pop
  }
 ifelse
 end
}bind def
/NewStdChar
 {dup /Courier findfont /CharStrings get exch known
  {put}
  {pop pop pop}
  ifelse
 } bind def
/DefaultVector {exch dup where not {exch def}{pop pop pop} ifelse} bind def
/MARC-EURO-MINI StandardEncoding DefaultVector
/MARC-EURO-PC  StandardEncoding DefaultVector
/MakeDecTech {
  FontDirectory /DecTech known not
   {/DecTech /Symbol /Symbol findfont /Encoding get MakeMARCFont
    /MARC-Greek-MathEncoding 256 array
    0 1 255 {exch dup 3 -1 roll /.notdef put} for def}
  if
} bind def
/MakeChemMath {
  FontDirectory /MARC-Chem-Math known not
   {/MARC-Chem-Math /Symbol /Symbol findfont /Encoding get MakeMARCFont}
  if
} bind def
/MARC-ISOEncoding
systemdict /ISOLatin1Encoding known
  {ISOLatin1Encoding dup length array copy
   dup 8#327 /OE put
   dup 8#367 /oe put
   dup 8#236 /Ydieresis put
  }
  {StandardEncoding}
ifelse
def

/TableDict 16 dict def
TableDict begin
 /TableWeight 0.1 def
 /TableScale 7.2 def
 /Top 0 def
end
/SetTableWeight {
  WMRESTORE
  TableDict begin
   /TableWeight exch TableScale mul def
  end
  WMSAVE
} bind def

/table
  { TableDict begin
   /VERT exch def
   /HORIZ exch def
   /Offset exch def
   currentpoint newpath moveto
   TableWeight TableScale div
   setlinewidth
   gsave
   0 setlinejoin 2 setlinecap
   TableScale dup scale
   /Width 0 HORIZ {add} forall def
   /Height 0 VERT {add} forall def
   Offset 0 rmoveto

   gsave
   Width 0 rlineto
   VERT {Width neg exch neg rmoveto
      Width 0 rlineto} forall
   stroke
   grestore

   0 Height neg rlineto
   HORIZ {Height rmoveto
      0 Height neg rlineto} forall
   stroke
   grestore
   end
  } bind def


 /TableBegin {
   aload length
   currentpoint exch pop
   WMRESTORE
   TableDict begin
   /Top exch def
   array astore
   /Widths exch def
   /Offset exch TableScale mul def
   /DX 0 Widths {add} forall TableScale mul def
   end
   WMSAVE
   0 setlinejoin 2 setlinecap
   TableDict begin
   TableWeight setlinewidth
   Offset Top moveto
   DX 0 rlineto
   end
   stroke
 } bind def

/TableBar {
   TableDict begin
   TableWeight setlinewidth
   0 setlinejoin 2 setlinecap
   Offset 0 rmoveto
   DX 0 rlineto stroke
   end
} bind def

/TableEnd {
   TableDict begin
   TableWeight setlinewidth
   0 setlinejoin 2 setlinecap

   Offset 0 rmoveto
   currentpoint newpath moveto
   gsave
   DX 0 rlineto stroke grestore
   /Height Top currentpoint exch pop sub def
   0 Height rlineto
   Widths {TableScale mul Height neg rmoveto
       0 Height rlineto} forall
   stroke
   end
   WMRESTORE
   TableDict /Top 0 put
   WMSAVE
} bind def
/TablePreserve {
  TableDict begin
   Top 0 ne
     {Offset TableScale div
     Widths aload length
     CBTop
     end WMSAVE
     0 CBBot moveto
     TableEnd
     WMRESTORE
     }
     {end 0}
   ifelse
} bind def
/TableRestart {
   dup 0 ne
    {0 exch moveto
    WMSAVE
    array astore
    TableBegin
    WMRESTORE
    }
    {pop}
   ifelse
} bind def
/TableCancel {TableDict /Top 0 put} bind def
/TABLE /table load def
/Table /table load def

/TABLEBEGIN /TableBegin load def
/tablebegin /TableBegin load def

/SETTABLEWEIGHT /SetTableWeight load def
/settableweight /SetTableWeight load def

/TABLEBAR /TableBar load def
/tablebar /TableBar load def
/TABLEEND /TableEnd load def
/tableend /TableEnd load def
/Tenths {7.2 mul} bind def
/CBS 0 def
/CBBot 10 Tenths def
/CBLeft 7.5 Tenths def
/CBWeight 0.2 Tenths def
/CBInit {
  /CBTop PageTop 10 Tenths sub def
} def
/ChangeBarR false def
/SetChangeBarR {
  WMexitserver
  /ChangeBarR true def
  WMreenter
} bind def
/DoChangeBarR {
  currentpoint exch pop dup CBTop lt exch CBBot gt and CBS 0 gt and
    {gsave ATRTAB 1 get setfont
    CBLeft currentpoint exch pop moveto (R) show
    grestore}
    if
} bind def

/ChangeBar {
  WMexitserver
  6 2 roll
  Tenths /CBWeight exch def
  Tenths /CBBot exch def
  Tenths WMPSIZEY exch sub /CBTop exch def
  Tenths /CBLeft exch def
  /CBS 0 def
  WMreenter
} bind def
/ChangeBarOn {
  WMRESTORE
  /CBS currentpoint exch pop def
  WMSAVE
}bind def
/ChangeBarOff {
  ChangeBarR not {
    CBLeft currentpoint exch pop
    gsave newpath moveto
    CBLeft CBS lineto
    CBWeight setlinewidth stroke
    grestore
  } if
  WMRESTORE
    /CBS 0 def
  WMSAVE
} bind def
/CBPreserve {
 CBS 0 ne
  {ChangeBarR not {
   gsave newpath
   CBLeft CBS moveto
   CBLeft CBBot lineto
   CBWeight setlinewidth stroke
   grestore
   }
  if
  CBTop
  }
  {0}
 ifelse
} bind def
/CBRestart {
  /CBS exch def
} bind def
/CBCancel {/CBS 0 def} bind def
/CHANGEBARON /ChangeBarOn load def
/changebaron /ChangeBarOn load def

/CHANGEBAROFF /ChangeBarOff load def
/changebaroff /ChangeBarOff load def

/changebar /ChangeBar load def
/CHANGEBAR /ChangeBar load def
/LM 0 def
/CR  {currentpoint exch pop LM exch moveto} bind def
/S {show} bind def
/adj {transform round exch round exch itransform} bind def
/ATRTAB 8 array def
/AtrSet {dup /CurAtrb exch def ATRTAB exch get setfont} bind def
/AtrOn {  CurAtrb or dup /CurAtrb exch def ATRTAB exch get setfont} bind def
/AtrOff {not CurAtrb and dup /CurAtrb exch def ATRTAB exch get setfont} bind def
/SU {currentfont dup /FontInfo known
    { begin FontInfo begin
      0 UnderlinePosition FontMatrix dtransform
       dup mul exch dup mul add sqrt neg
      0 UnderlineThickness FontMatrix dtransform
      dup mul exch dup mul add sqrt
     end end
     /UTHK exch def
     /UOFS exch def
    }
    { pop
     /UTHK 0.25 def
     /UOFS 1 def
   }
   ifelse
} bind def
/Uon {
  currentpoint UOFS add adj
} bind def
/Uoff {
  gsave
   currentpoint UOFS add adj moveto
   lineto UTHK setlinewidth stroke
   grestore
} bind def
/WMSAVE {/WMDASAVE save def} bind def
/WMRESTORE {WMDASAVE restore} bind def
/WMPsRev 62 def

/?? {
  /?font /Helvetica findfont 6 scalefont def
  /?buf 16 string def
  /VLFD {
   WMYSCALE mul currentpoint exch
   gsave ?font setfont (| ) show ?buf cvs show grestore
   LM exch 3 -1 roll sub moveto} bind def
} bind def
/VLFD {WMYSCALE mul LM currentpoint exch pop 3 -1 roll sub moveto
    ChangeBarR {DoChangeBarR} if} bind def
/W {WMXSCALE mul 0.0 32 4 -1 roll widthshow} bind def
/MF {findfont exch scalefont} bind def
/SF {ATRTAB astore 0 get setfont SU}bind def
/FillOn {
  currentpoint pop
} bind def
/FillOff {
  currentpoint pop exch sub
  FillString stringwidth pop dup
  3 1 roll
  div cvi
  dup 3 1 roll
  mul
  neg 0 rmoveto
  {FillString show} repeat
} bind def
/PageInit {
  currentdict /PageOverlay known
   {gsave
   PageOverlay
   grestore
   }
  if
  /savetoken save def
  LM PageTop moveto
} bind def
/LandScp {
  -90 rotate
  WM_SIZEY neg 0.0 translate
  /WMPSIZEX {WM_SIZEY} def
  /WMPSIZEY {WM_SIZEX} def
  /PageTop {WMPSIZEY} def
  CBInit
  PageInit
} bind def
/Portrait {
  /WMPSIZEX {WM_SIZEX} def
  /WMPSIZEY {WM_SIZEY} def
  /PageTop {WMPSIZEY} def
   CBInit
  PageInit
} bind def
/DrafQ {
  /TopBin {} def
  /BottomBin {} def
  LegalBin
  /WM_SIZEY 1008.0 def
  currentdict /LegalPageOverlay known
  {/PageOverlay /LegalPageOverlay load def} if
}bind def
/LetterQ {
  currentdict /LetterPageOverlay known
   {/PageOverlay /LetterPageOverlay load def}
  if
}bind def
/FormFeed {
  CBS 0 eq
  TableDict /Top get 0 eq and
   {showpage savetoken restore
    TableCancel
    CBCancel}
   {CBPreserve
    TablePreserve
    showpage savetoken restore
    TableRestart
    CBRestart
   } ifelse
  /FirstFFFlag true def
  PageInit
} bind def
/FirstFFFlag false def
/FirstFormFeed {
  FirstFFFlag
   /FormFeed load
   {/FirstFFFlag true def}
 ifelse
} bind def
/LastFF {
  showpage
  savetoken restore
  /FirstFFFlag false def
  /CBS 0 def
  /TOP 0 def
  PageInit
} bind def
/WMexitserver {WMDASAVE restore currentpoint savetoken restore} bind def
/WMreenter {/savetoken save def moveto /WMDASAVE save def} bind def
/DocInit {
} bind def
/Reset {
} bind def
/WM_SIZEX 612.0 def
/WM_SIZEY 792.0 def
/WMXSCALE 0.001 def
/WMYSCALE 0.1 def
/WMGSCALE 0.1 def
/LM 0 def
/CurAtrb 0 def
%
%  This array gives the difference between the StandardEncoding vector and
%  the MARC Euoropean character set for the IBM-PC.
/MARC-EURO-PC
 StandardEncoding dup length array copy
   dup 8#001 /grave put
   dup 8#002 /acute put
   dup 8#003 /circumflex put
   dup 8#004 /tilde put
   dup 8#005 /macron put
   dup 8#006 /breve put
   dup 8#007 /dotaccent put
   dup 8#010 /dieresis put
   dup 8#011 /cedilla put
   dup 8#012 /hungarumlaut put
   dup 8#013 /ogonek put
   dup 8#014 /caron put
   dup 8#015 /dotlessi put
   dup 8#016 /ring put
   dup 128 /Ccedilla put
   dup 129 /udieresis put
   dup 130 /eacute put
   dup 131 /acircumflex put
   dup 132 /adieresis put
   dup 133 /agrave put
   dup 134 /aring put
   dup 135 /ccedilla put
   dup 136 /ecircumflex put
   dup 137 /edieresis put
   dup 138 /egrave put
   dup 139 /idieresis put
   dup 140 /icircumflex put
   dup 141 /igrave put
   dup 142 /Adieresis put
   dup 143 /Aring put
   dup 144 /Eacute put
   dup 145 /ae put
   dup 146 /AE put
   dup 147 /ocircumflex put
   dup 148 /odieresis put
   dup 149 /ograve put
   dup 150 /ucircumflex put
   dup 151 /ugrave put
   dup 152 /ydieresis put
   dup 153 /Odieresis put
   dup 154 /Udieresis put
   dup 155 /cent put
   dup 156 /sterling put
   dup 157 /yen put
   dup 158 /Idieresis put
   dup 159 /Eth NewStdChar
   dup 160 /aacute put
   dup 161 /iacute put
   dup 162 /oacute put
   dup 163 /uacute put
   dup 164 /ntilde put
   dup 165 /Ntilde put
   dup 166 /ordfeminine put
   dup 167 /ordmasculine put
   dup 168 /questiondown put
   dup 169 /Icircumflex put
   dup 170 /logicalnot NewStdChar
   dup 171 /onehalf NewStdChar
   dup 172 /onequarter NewStdChar
   dup 173 /exclamdown put
   dup 174 /guillemotleft put
   dup 175 /guillemotright put
   dup 176 /Ograve put
   dup 177 /Oacute put
   dup 178 /Ocircumflex put
   dup 179 /Otilde put
   dup 180 /OE put
   dup 181 /Oslash put
   dup 182 /Ugrave put
   dup 183 /Uacute put
   dup 184 /Ucircumflex put
   dup 185 /Yacute put
   dup 186 /Thorn NewStdChar
   dup 187 /atilde put
   dup 188 /eth NewStdChar
   dup 189 /otilde put
   dup 190 /yacute put
   dup 191 /thorn NewStdChar
   dup 192 /.notdef put
   dup 193 /.notdef put
   dup 194 /.notdef put
   dup 195 /.notdef put
   dup 196 /.notdef put
   dup 197 /.notdef put
   dup 198 /.notdef put
   dup 199 /.notdef put
   dup 200 /.notdef put
   dup 201 /.notdef put
   dup 202 /.notdef put
   dup 203 /.notdef put
   dup 204 /.notdef put
   dup 205 /.notdef put
   dup 206 /.notdef put
   dup 207 /.notdef put
   dup 208 /dagger put
   dup 209 /daggerdbl put
   dup 210 /Lslash put
   dup 211 /lslash put
   dup 212 /Scaron put
   dup 213 /scaron put
   dup 214 /Zcaron put
   dup 215 /zcaron put
   dup 216 /guilsinglleft put
   dup 217 /guilsinglright put
   dup 218 /florin put
   dup 219 /quotesinglbase put
   dup 220 /quotedblbase put
   dup 221 /quotedblleft put
   dup 222 /quotedblright put
   dup 223 /trademark put

   dup 224 /space put
   dup 225 /germandbls put
   dup 226 /currency put
   dup 227 /bar put
   dup 227 /brokenbar NewStdChar
   dup 228 /section put
   dup 229 /dieresis put
   dup 230 /mu put
   dup 231 /copyright put
   dup 232 /minus put
   dup 233 /registered NewStdChar
   dup 234 /macron put
   dup 235 /threesuperior NewStdChar
   dup 236 /acute put
   dup 237 /oslash put
   dup 238 /paragraph put
   dup 239 /cedilla put
   dup 240 /onesuperior NewStdChar
   dup 241 /plusminus NewStdChar
   dup 242 /threequarters NewStdChar
   dup 243 /Agrave put
   dup 244 /Aacute put
   dup 245 /Acircumflex put
   dup 246 /oe put
   dup 247 /Atilde put
   dup 248 /ring put
   dup 248 /degree NewStdChar
   dup 249 /Egrave put
   dup 250 /bullet put
   dup 251 /Ecircumflex put
   dup 252 /Edieresis put
   dup 253 /twosuperior NewStdChar
   dup 254 /Igrave put
   dup 255 /Iacute put
       def

%
%  Define printer-dependent commands for all supported printers.
%  commands for bin-selection for all supported printers
%
%
/SetTray {gsave statusdict begin setpapertray end grestore} bind def
%
%  PrinterDict contains printer dependent code which is executed if the
%  printer returns the appropriate name from the statusdict "product"
%  operator.  Note that the keys to this dictionary are not names, but
%  rather are product strings
%
/PrinterDict 5 dict def
PrinterDict begin
%
 (Silentwriter) {
   /TopBin    {2 SetTray} def
   /BottomBin {1 SetTray} def
   /LegalBin  {2 SetTray} def
 } bind def
 %
(Dataproducts LZR 2665) {
   /TopBin    {0 SetTray} def
   /BottomBin {1 SetTray} def
   /LegalBin {} def
 } bind def
%
(Texas Instruments OmniLaser 2115) {
  /TopBin     {0 SetTray} def
  /BottomBin  {1 SetTray} def
   /LegalBin {} def
 } bind def
%
(OmniLaser) {
  /TopBin     {0 SetTray} def
  /BottomBin  {1 SetTray} def
  /LegalBin {} def
} bind def
%
 (UNKNOWN) {
   /TopBin {} bind dup dup /BottomBin exch def /LegalBin exch def def
 } def
end

PrinterDict dup statusdict begin
   product dup 3 1 roll known not
      {pop (UNKNOWN)}
   if
   get end exec

/MARC-NewCenturySchlbk-Roman /NewCenturySchlbk-Roman MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Bold /NewCenturySchlbk-Bold MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Italic /NewCenturySchlbk-Italic MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-BoldItalic /NewCenturySchlbk-BoldItalic MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Roman /NewCenturySchlbk-Roman MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Bold /NewCenturySchlbk-Bold MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Italic /NewCenturySchlbk-Italic MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-BoldItalic /NewCenturySchlbk-BoldItalic MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Roman /NewCenturySchlbk-Roman MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Bold /NewCenturySchlbk-Bold MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Italic /NewCenturySchlbk-Italic MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Roman /NewCenturySchlbk-Roman MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Bold /NewCenturySchlbk-Bold MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Roman /NewCenturySchlbk-Roman MARC-EURO-PC MakeMARCFont
/MARC-NewCenturySchlbk-Bold /NewCenturySchlbk-Bold MARC-EURO-PC MakeMARCFont
/MARC-Courier /Courier MARC-EURO-PC MakeMARCFont
/MARC-Courier-Bold /Courier-Bold MARC-EURO-PC MakeMARCFont
 MakeDecTech 
 MakeDecTech 

10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
 DocInit 
 Portrait
 FirstFormFeed BottomBin

18 /MARC-NewCenturySchlbk-Roman MF
18 /MARC-NewCenturySchlbk-Bold MF
18 /MARC-NewCenturySchlbk-Roman MF
18 /MARC-NewCenturySchlbk-Bold MF
18 /MARC-NewCenturySchlbk-Roman MF
18 /MARC-NewCenturySchlbk-Bold MF
18 /MARC-NewCenturySchlbk-Roman MF
18 /MARC-NewCenturySchlbk-Bold MF SF

3208 VLFD ( ) 66996 W ( ) -4980 W (                             FXREF) 2760 W 
14 /MARC-NewCenturySchlbk-Roman MF
14 /MARC-NewCenturySchlbk-Bold MF
14 /MARC-NewCenturySchlbk-Roman MF
14 /MARC-NewCenturySchlbk-Bold MF
14 /MARC-NewCenturySchlbk-Roman MF
14 /MARC-NewCenturySchlbk-Bold MF
14 /MARC-NewCenturySchlbk-Roman MF
14 /MARC-NewCenturySchlbk-Bold MF SF

416 VLFD ( ) 68108 W ( ) -3896 W (                    A) -792 W ( PROGRAM TO CREATE CROSS REFERENCE LISTINGS) 0 W 
182 VLFD ( ) 68108 W ( ) -3867 W (                            OF) 1339 W ( FORTRAN 77 PROGRAMS) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF SF

444 VLFD ( ) 68664 W ( ) -3327 W (                                 TABLE) 1697 W ( OF CONTENTS) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

520 VLFD ( ) 66000 W (     PURPOSE.........................................................3) -240 W 
260 VLFD ( ) 66000 W (     REQUIREMENTS....................................................3) -240 W 
260 VLFD ( ) 66000 W (     PROGRAM) -240 W ( INSTALLATION & EXECUTION................................5) 0 W 
260 VLFD ( ) 66000 W (     STATEMENTS) -240 W ( PROCESSED...........................................11) 0 W 
260 VLFD ( ) 66000 W (     STATEMENT) -240 W ( EXTENSIONS PROCESSED.................................11) 0 W 
260 VLFD ( ) 66000 W (     STATEMENT) -240 W ( ADDITIONAL FEATURES PROCESSED........................14) 0 W 
260 VLFD ( ) 66000 W (     INTRINSIC) -240 W ( FUNCTIONS PROCESSED..................................17) 0 W 
260 VLFD ( ) 66000 W (     PROGRAM) -240 W ( CONSTRAINTS............................................26) 0 W 
260 VLFD ( ) 66000 W (     OUTPUT) -240 W ( TABLES..................................................29) 0 W 
260 VLFD ( ) 66000 W (     VIEWING) -240 W ( OUTPUT ON THE MONITOR..................................38) 0 W 
260 VLFD ( ) 66000 W (     FXREF) -240 W ( PROGRAM INFORMATION......................................38) 0 W 
260 VLFD ( ) 66000 W (     ERROR) -240 W ( MESSAGES.................................................44) 0 W 
260 VLFD ( ) 66000 W (     INPUT-OUTPUT) -240 W ( UNITS.............................................69) 0 W 
260 VLFD ( ) 66000 W (     POSTSCRIPT) -240 W ( INPUT-OUTPUT UNITS..................................75) 0 W 
260 VLFD ( ) 66000 W (     BIT) -240 W ( SWITCHES...................................................76) 0 W 
260 VLFD ( ) 66000 W (     PROGRAM) -240 W ( MODIFICATIONS FOR OTHER COMPILERS & SYSTEMS............77) 0 W 
260 VLFD ( ) 66000 W (     WARRANTY.......................................................78) -240 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

2580 VLFD ( ) 69220 W (                                                                 -2-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( PURPOSE:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       This) 1334 W ( program uses FORTRAN 77 source code as input to produce cross reference listings of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       variable) 1334 W ( names, statement numbers, input-output units, integer constants, floating point con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       stants,) 1334 W ( character constants, COMMON and EQUIVALENCE references, subprograms used,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       and) 1334 W ( a statistical count of these items.  In addition, diagnostic error messages are provided) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       when) 1334 W ( syntax errors occur that prevent correct analysis of statements.  Some syntax errors) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       generate) 1334 W ( multiple messages, and detection of errors is not as complete as that of a preproces-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       sor,) 1334 W ( compiler, or FORTRAN Lint analysis program.  FXREF will perform limited global) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       analysis) 1334 W ( of the analyzed code as an option.) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

240 VLFD ( REQUIREMENTS) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       At) 1334 W ( the time this program was developed, there are two FORTRAN 77 compilers available for) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       OS/2-ECS.) 1334 W (  They are from MICROWAY, Inc. of Kingston, Massachusetts and the WATCOM) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       compiler) 1334 W ( from the OPEN WATCOM Organization.  The Microway compiler is derived from) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBM) 1334 W ( mainframe and UNIX compiler standards.  While, the WATCOM compiler adheres to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBM) 1334 W ( PC standards.  FXREF was developed using the WATCOM FORTRAN 77 compiler, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       its) 1334 W ( syntax adheres to that standard.  MICROWAY has withdrawn its FORTRAN compiler) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       from) 1334 W ( the market; however, the compiler is still maintained by them.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( program source code will require modification to compile on the Microway FORTRAN 77) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       OS/2) 1334 W ( compiler because different language syntax and language extensions are used.  As of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       spring) 1334 W ( of 2003, an open source version of the WATCOM compiler was issued by the OPEN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       WATCOM) 1334 W ( Organization at WWW.OPENWATCOM.ORG and is available for the DOS,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       WINDOWS,) 1334 W ( and OS/2-ECS operating systems.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( is designed to be executed on an IBM type PC.  Although the source code, which is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       written) 1334 W ( in FORTRAN 77, should compile successfully on most computers having a FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       compiler) 1334 W ( that complies to the FORTRAN 77 standard syntax, the program is designed to ex-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ecute) 1334 W ( on a little endian, ASCII computer under OS/2-ECS.  If recompiled for DOS, the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       program) 1334 W ( should execute successfully using the DOS WATCOM, the program should execute) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       successfully,) 1334 W ( but modification of the source code may be necessary for other DOS FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       77) 1334 W ( compilers.  FXREF  has not been tested under DOS.  Modification of the source code is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       most) 1334 W ( likely required to compile the program under other compilers, operating systems, and a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       big) 1334 W ( endian computers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( presumes two characters terminate each input record of the FORTRAN source code) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       being) 1334 W ( processed.  These are the carriage return, HEX ) 0 W  2 AtrOn
(0D) 0 W  2 AtrOff
(, and the line feed, HEX ) 0 W  2 AtrOn
(0A) 0 W  2 AtrOff
(.  A) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       record) 1334 W ( in a file is terminated by the sequence of HEX ) 0 W  2 AtrOn
(0D0A) 0 W  2 AtrOff
(.  This is standard for DOS and) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       OS/2-ECS.) 1334 W (  Use of FXREF on other operating systems may require program modification to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       adjust) 1334 W ( the record termination characters for the particular operating system on which the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       program) 1334 W ( is to be compiled.  The variable names CCR and CLF defined in the BLOCK DATA) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       subroutine) 1334 W ( contain the definitions for these two codes, and they are stored in the block com-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       mon) 1334 W ( named /ASCII/.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Some) 1334 W ( editor programs allow the user to utilize the horizontal tab character, ASCII HEX ) 0 W  2 AtrOn
(09) 0 W  2 AtrOff
(, to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       position) 1334 W ( text automatically.  Since the locations where the tab character is inserted into a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       record) 1334 W ( is controlled by the user of such editor programs, FXREF makes the following assump-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       tions) 1334 W ( when this character occurs in a record of the source FORTRAN code being ranalyzed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       1.) 1334 W ( If a horizontal tab character occurs before column 7 of the input record, it will be replaced by) 0 W 
130 VLFD ( ) 69220 W (          a) 1212 W ( blank character, and all text following the tab character will start in column 7 and all) 0 W 
130 VLFD ( ) 69220 W (          subsequent) 1212 W ( characters will be shifted to the right for processing by FXREF.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

446 VLFD ( ) 69220 W (                                                                 -3-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       2.) 1334 W ( Any horizontal tab character occurring after column 6 will be replaced with a single blank) 0 W 
130 VLFD ( ) 69220 W (          character,) 1212 W ( and no shift of characters will occur.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( end of file condition is indicated by the character HEX ) 0 W  2 AtrOn
(1A) 0 W  2 AtrOff
(.  No processing of records will) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       continue) 1334 W ( beyond the occurrence of this character.  This is the standard for an IBM type PC.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       Other) 1334 W ( operating systems and EBCDIC computers may require this code to be changed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       No) 1334 W ( additional libraries or other programs are necessary to compile and execute FXREF other) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       than) 1334 W ( those generated and used by the WATCOM F77 compiler.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

6246 VLFD ( ) 69220 W (                                                                 -4-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( PROGRAM) 68664 W ( INSTALLATION AND EXECUTION) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       Installation) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Create) 1334 W ( a directory on one of your hard disk partitions.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       Use) 1334 W ( an UNZIP utility program to convert to normal format into the directory created.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       For) 1334 W ( OS/2-ECS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (    Copy the FXREF.EXE file into any directory desired.  All other files in the distribution are) 0 W 
130 VLFD ( ) 69220 W ( ) -2779 W (           either) 849 W ( documentation files or FORTRAN source code files for FXREF and may be copied) 0 W 
130 VLFD ( ) 69220 W ( ) -2779 W (           into) 849 W ( any other directory on any disk desired.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       For) 1334 W ( Other Operating systems) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (    Compile the FORTRAN source module FXREF.FOR using a FORTRAN compiler and linker) 0 W 
130 VLFD ( ) 69220 W ( ) -2779 W (           to) 849 W ( create an execution module for the chosen operating system.  The computer must use a) 0 W 
130 VLFD ( ) 69220 W ( ) -2779 W (           little) 849 W ( endian CPU.  See the section PROGRAM MODIFICATIONS FOR OTHER) 0 W 
130 VLFD ( ) 69220 W ( ) -2779 W (           COMPUTERS) 849 W ( & SYSYTEMS at the end of this document for a big endian CPU computer.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Execution) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       1.) 1334 W ( For OS/2-ECS, create a file and name it FXREF.CCD.  This file must be in the same direc-) 0 W 
130 VLFD ( ) 69220 W (          tory) 1212 W ( where FXREF.EXE is located unless CONFIG.SYS has a search path pointing to a) 0 W 
130 VLFD ( ) 69220 W (          directory) 1212 W ( where FXREF.CCD is placed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       2.) 1334 W ( Other operating systems' search path must allow location of the execution module and the) 0 W 
130 VLFD ( ) 69220 W (          control) 1212 W ( card file.  FXREF assumes the control cards file, FXREF.CCD, is in the same direc-) 0 W 
130 VLFD ( ) 69220 W (          tory) 1212 W ( as its execution module.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       3.) 1334 W ( Use an editor program to create up to 13 records for the file FXREF.CCD as described) 0 W 
130 VLFD ( ) 69220 W (          below.) 1212 W (  This file may exist on any input device on the computer except the keyboard.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   ) 0 W  1 AtrOn
(RECORD 1) 0 W  1 AtrOff

260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   In column 1 of this record, enter either a T or an F, as described below.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W (              T - The output listing file is to be 60 lines of print per page, and horizontal, i.e., landscape,) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  paper) 246 W ( orientation is desired.  This choice causes a ten point font size to be used for) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  printing) 246 W ( when the output file is to be a postscript file.  A text output file will use) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  the) 246 W ( standard font of the printer.  Paper size is assumed to be 11 x 14 inches.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W (              F - The output listing is to be 80 lines per page and is to be printed on vertical, i.e., portrait,) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  paper) 246 W ( orientation.  This choice causes an eight point font size to be used for print-) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  ing) 246 W ( when the output file is to be a postscript file.  A text output file will use the) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  standard) 246 W ( font of the printer.  Paper size is assumed to be 8 x 11 inches.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   In column 2 of this record, enter either a T or an F, as described below.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W (              T - The output listing file is to be written as a postscript file.) 0 W 
130 VLFD ( ) 69220 W (              F - The output listing file is to be written as a text file with carriage control characters as) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  the) 246 W ( first character of each record.  If the printer is unable to interpret carriage con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  trol) 246 W ( characters, use a utility program that will edit the print records of FXREF so) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  that) 246 W ( the printer in use will print correctly.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

416 VLFD ( ) 69220 W (                                                                 -5-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   In column 3 of this record, enter a T or an F, as described below.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W (               T - A global analysis of all common blocks defined in all modules within a program is to be) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                   made,) 233 W ( and the argument lists of CALL, ENTRY, FUNCTION, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                   SUBROUTINE) 233 W ( statements will be checked for type, length, and number of argu-) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                   ments) 233 W ( consistency.) 0 W 
130 VLFD ( ) 69220 W (               F - No global analysis is to be performed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   In column 4 of this record:) 0 W 
260 VLFD ( ) 69220 W (              Type one of the three values listed below) 0 W 
260 VLFD ( ) 69220 W (              1 - Use this value to indicate the output listing is a single file of all pages to be in the listing) 0 W 
130 VLFD ( ) 69220 W (                  starting) 185 W ( with page 1 and terminating with the final page.  Column 2 may be T or) 0 W 
130 VLFD ( ) 69220 W (                  F.) 185 W 
260 VLFD ( ) 69220 W (              2 - When column 2 is coded T, use this value to indicate the output listing is to be two dif-) 0 W 
130 VLFD ( ) 69220 W (                  ferent) 185 W ( files.  One file will contain all odd pages starting with page 1 and) 0 W 
130 VLFD ( ) 69220 W (                  terminating) 185 W ( with the final odd page.  The other file will contain all the even pages) 0 W 
130 VLFD ( ) 69220 W (                  starting) 185 W ( with page 2 and terminating with the final even page.) 0 W 
260 VLFD ( ) 69220 W (                  The odd page file will be named with the path and file name in record 2 except the final) 0 W 
130 VLFD ( ) 69220 W (                  four characters are changed to 'O.PS'.  The even page file will be named with the) 0 W 
130 VLFD ( ) 69220 W (                  path and file name in record 2 except the last four characters following the period) 0 W 
130 VLFD ( ) 69220 W (                  are changed to 'E.PS'.  If card 2 contains an output listing file name of) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TEST.PRT, the odd page output file will be modified to:) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TESTO.PS, and the even page file will be modified to:) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TESTE.PS.) 0 W 
260 VLFD ( ) 69220 W (                  Both output files will be in ascending page order; i. e., the odd pages file will start with) 0 W 
130 VLFD ( ) 69220 W (                  page 1 and terminate with the final odd page of the listing.  Likewise, the even) 0 W 
130 VLFD ( ) 69220 W (                  page listing will start with page 2 and terminate with the final even page of the) 0 W 
130 VLFD ( ) 69220 W (                  listing.) 0 W 
260 VLFD ( ) 69220 W (                  Note that this choice is invalid when column 2 is coded F.) 0 W 
260 VLFD ( ) 69220 W (              3 - When column 2 is coded T, use this value to indicate the output listing is to be created as) 0 W 
130 VLFD ( ) 69220 W (                  two) 185 W ( separate files.  One file will contain all odd pages starting with page 1 and ter-) 0 W 
130 VLFD ( ) 69220 W (                  minating) 185 W ( with the final odd page.  The other file will contain all the even pages) 0 W 
130 VLFD ( ) 69220 W (                  starting) 185 W ( with the final even page and terminating with page 2.  The even pages) 0 W 
130 VLFD ( ) 69220 W (                  will) 185 W ( be in reverse order.) 0 W 
260 VLFD ( ) 69220 W (                  The odd page file will be named with the path and file name in record 2 except the final) 0 W 
130 VLFD ( ) 69220 W (                  four characters are changed to 'O.PS'.  The even page file will be named with the) 0 W 
130 VLFD ( ) 69220 W (                  path and file name in record 2 except the last four characters following the period) 0 W 
130 VLFD ( ) 69220 W (                  are changed to 'R.PS'.  If card 2 contains an output listing file name of) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TEST.PRT, the odd page output file will be modified to:) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TESTO.PS, and the even page file will be modified to:) 0 W 
130 VLFD ( ) 69220 W (                  C:\\PRINTER\\TESTR.PS.) 0 W 
260 VLFD ( ) 69220 W (                  The odd page file will be in ascending page order; i. e., the odd pages file will start with) 0 W 
130 VLFD ( ) 69220 W (                  page 1 and terminate with the final odd page of the listing.  However, the even) 0 W 
130 VLFD ( ) 69220 W (                  page listing will start with the final even page and terminate with) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -6-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    page 2 of the listing.  The even pages are in reverse order.) 0 W 
260 VLFD ( ) 69220 W (                  Note that this choice is invalid when column 2 is coded F.) 0 W 
260 VLFD ( ) 69220 W (              These choices allow continuous form paper and sheet paper to be used.  Code 3 simplifies) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              printing) 1848 W ( on both sides of the paper for single sheet fed printers that do not print on) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              both) 1848 W ( sides of the paper in a single pass.  Postscript files may be printed by turning) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              over) 1848 W ( the paper after printing the odd pages and reinserting them into the sheet feeder) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              tray.) 1848 W (  For printers that print only on one side of the paper \(continuous forms or sheet) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              fed\),) 1848 W ( use code 1.  For sheet fed printers that print on both sides of the paper in a single) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              pass) 1848 W ( of the paper, use code 1.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   In columns 5 through 7:) 0 W 
260 VLFD ( ) 69220 W (              Enter the number of columns to be read from a FORTRAN source code record.  The maxi-) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              mum) 1848 W ( value is 132; the minimum value is 72.  This value will designate the number of) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              characters) 1848 W ( in a FORTRAN source code record to be considered as source code, and it is) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              set) 1848 W ( to a value of 132 if columns 5 through 7 are left blank.  If characters beyond) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              column) 1848 W ( 72 are to be treated as source code, the value must be large enough to insure) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              all) 1848 W ( source code is processed.  The value must be right adjusted within the three digit) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              field,) 1848 W ( i. e., the units digit must be in column 7.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   ) 0 W  1 AtrOn
(RECORD 2) 0 W  1 AtrOff

260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   Starting in column one of the record:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       Enter the pathname and file name of the output listing file where the listing is to be writ-) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              ten.) 1848 W (  The record must not exceed 80 characters in length.  The print file \(or files\) will) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              not) 1848 W ( be submitted to the print queue for printing; this must be done separately by the) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              user.) 1848 W (  See the OUTPUT section for additional information regarding printing the out-) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              put) 1848 W ( listing.  The output file name provided in this field will be changed when two) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              output) 1848 W ( files are requested in column 4 of card 1.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       EXAMPLE: D:\\PRHOLD\\FORLST.PRT) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       If column one of this record is blank, a default output listing file name will be created from) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              the) 1848 W ( first node of the input file name from record 3 with PRT appended after the input) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              file) 1848 W ( name and written into the current directory.  Using the example in record 3 as the) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              input) 1848 W ( file, the default output file name would be:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       EXAMPLE: TEST.PRT) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       Note that no path name is generated, so the output file will always be placed in the cur-) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              rent) 1848 W ( directory for this case.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   IMPORTANT: Do not provide an output file name that is identical to any of the file names) 0 W 
130 VLFD ( ) 69220 W (          provided) 934 W ( in records 3 - 12 below.  FXREF will cease execution with a diagnostic message) 0 W 
130 VLFD ( ) 69220 W (          on) 934 W ( unit 0, and, if not executed in the background, a STOP 'IDENTICAL FILE NAMES' will) 0 W 
130 VLFD ( ) 69220 W (          appear) 934 W ( on the monitor's screen.  This prevents the input file from being deleted as an out-) 0 W 
130 VLFD ( ) 69220 W (          put) 934 W ( file as the program checks for duplicate output file names.  Obviously, any other file) 0 W 
130 VLFD ( ) 69220 W (          name) 934 W ( already existing with an identical path and name will be destroyed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -7-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   ) 0 W  1 AtrOn
(RECORDS ) 0 W  1 AtrOff
(3 - 12) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   Starting in Column one of each record:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     Enter the pathname and file name of the FORTRAN source code to be used as input for) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            analysis) 778 W ( by FXREF.  If the path name is omitted, the current directory will be used to) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            find) 778 W ( the file specified.  This record must not exceed 80 characters in length.  The) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            specified) 778 W ( path or file name must begin in the first character position, i.e., column one.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     Record 3 may be repeated nine times, i.e., ten different file names may be specified in addi-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            tional) 778 W ( records if desired.  The first record with a blank in column 1 will terminate the) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            reading) 778 W ( of file names if fewer than ten file names are provided.  This option permits) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            large) 778 W ( programs stored in multiple files to be treated as a single program for analysis.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     EXAMPLE: For the FORTRAN program named TEST.FOR located in the directory FPROG) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            on) 778 W ( drive C, enter the following text in columns 1 through 17.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            C:\\FPROG\\TEST.FOR) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     If the FORTRAN program being analyzed is in the current directory, the path name may be) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            omitted,) 778 W ( and the following text may be entered in columns 1 through 9.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            TEST.FOR) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     Any file specified in an INCLUDE statement within the FORTRAN program must have the) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            path) 778 W ( and name provided by this statement.  It is assumed to be located in the current) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            directory) 778 W ( unless the INCLUDE statement provides a path name.  Although some) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            FORTRAN) 778 W ( compilers do have search capabilities, no search method is provided by) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            FXREF) 778 W ( to locate INCLUDE files not in the current directory.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     When and INCLUDE statement is used and the file can not be found, FXREF will write two) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            messages) 778 W ( on the monitor screen.  These are:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       INCLUDE) 2362 W ( FILE NOT FOUND) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       {record}) 2362 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       FXREF) 2362 W ( REQUIRES A MISSING FILE) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      After writing these messages, FXREF will stop execution.  The user has three options: 1.) 0 W 
130 VLFD ( ) 69220 W ( ) -2774 W (             set) 718 W ( the INCLUDE statement as a comment, 2. delete the INCLUDE statement, or 3.) 0 W 
130 VLFD ( ) 69220 W ( ) -2774 W (             make) 718 W ( the INCLUDE file available to FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (     Other operating systems should use syntax notation appropriate for their file naming stan-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (            dards.) 778 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       A) 1334 W ( Complete example:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   The records to cause FXREF to produce cross reference listings of itself are shown below.) 0 W 
130 VLFD ( ) 69220 W (          This) 934 W ( example assumes the source code of FXREF is located on drive C.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   RECORD 1:     FFF1 72) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   RECORD 2:     C:\\FXREF.PRT) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   RECORD 3:     C:\\FXREF.FOR) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -8-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   RECORD 4-13:  All blank) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   Record 1 uses F in position 1 of the record to indicate the paper orientation is vertical format) 0 W 
130 VLFD ( ) 69220 W (          with) 934 W ( 80 lines of print per page.  Position 2 uses F to indicate a text output file with car-) 0 W 
130 VLFD ( ) 69220 W (          riage) 934 W ( control characters occurring in position one of each print record of the output listing) 0 W 
130 VLFD ( ) 69220 W (          file.) 934 W (  Position 3 uses F to indicate a continuous forms paper is used by the printer.) 0 W 
130 VLFD ( ) 69220 W (          Positions) 934 W ( 6 and 7 provide the number of columns of text in the file\(s\)  specified in records 3) 0 W 
130 VLFD ( ) 69220 W (          -) 934 W ( 12 that are to be considered FORTRAN code for processing.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   If position 2 were a T, a postscript output listing file would be created.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   Record 2 specifies the location and name of the output printer listing file created by FXREF.) 0 W 
130 VLFD ( ) 69220 W (          The) 934 W ( C disk is assigned in the above example, but other output unit designations may be) 0 W 
130 VLFD ( ) 69220 W (          used.) 934 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   Record 3 provides the input file name containing the FORTRAN program to be processed.) 0 W 
130 VLFD ( ) 69220 W (          The) 934 W ( source file in this example will be treated as a single program.  In this case, it is as-) 0 W 
130 VLFD ( ) 69220 W (          sumed) 934 W ( the file exists on disk C.  Any input device \(except the keyboard\) may be specified to) 0 W 
130 VLFD ( ) 69220 W (          indicate) 934 W ( the location of the file.  Note that other operating systems will use different syn-) 0 W 
130 VLFD ( ) 69220 W (          tax) 934 W ( to designate the equivalent of the C disk partition used under OS/2-ECS.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       4.) 1334 W ( FXREF.EXE may be started from a window or a full screen command prompt, or run in a) 0 W 
130 VLFD ( ) 69220 W (          background) 1212 W ( session in OS/2-ECS.  It has been designed to require no monitor or keyboard) 0 W 
130 VLFD ( ) 69220 W (          input,) 1212 W ( so execution in the background is particularly appropriate for the analysis of large) 0 W 
130 VLFD ( ) 69220 W (          programs.) 1212 W (  If the program is executed from a windowed or full screen, the message:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       STOP:) 2362 W ( FXREF ENDED NORMALLY) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   will be written on the window screen if the program is run in the foreground when the) 0 W 
130 VLFD ( ) 69220 W (          program) 934 W ( completes successfully.  If run in a background session, the message is discarded.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   A. Starting FXREF at the OS/2-ECS command prompt in either a windowed session or a full) 0 W 
130 VLFD ( ) 69220 W (             screen) 1060 W ( session.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      EXAMPLE: At the OS/2-ECS prompt, type:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (           FXREF.EXE) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      and depress the ENTER key.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      This example assumes that FXREF.EXE is located in the current directory or that) 0 W 
130 VLFD ( ) 69220 W ( ) -2774 W (             CONFIG.SYS) 718 W ( contains an entry in the PATH statement to permit OS/2-ECS to locate) 0 W 
130 VLFD ( ) 69220 W ( ) -2774 W (             the) 718 W ( program. The FXREF.CCD file is expected to be in the same directory.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   B. Starting FXREF in a background session.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      EXAMPLE: At the OS/2-ECS command prompt type:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            DETACH C:\\PROGRAMS\\FXREF.EXE) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (      and depress the ENTER key.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   C. For other operating systems, start execution of the execution module in the normal man-) 0 W 
130 VLFD ( ) 69220 W (             ner) 1060 W ( for those systems.  The C disk partition used in the above examples must be) 0 W 
130 VLFD ( ) 69220 W (             changed) 1060 W ( to the correct syntax for the operating system in use.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

396 VLFD ( ) 69220 W (                                                                 -9-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (   FXREF will execute in the background and free the windowed or full screen session to be) 0 W 
130 VLFD ( ) 69220 W (          used) 934 W ( simultaneously.  When a large FORTRAN program is being analyzed, background ex-) 0 W 
130 VLFD ( ) 69220 W (          ecution) 934 W ( allows other work to be done during the analysis.  The above example assumes no) 0 W 
130 VLFD ( ) 69220 W (          PATH) 934 W ( statement in CONFIG.SYS of OS/2-ECS allows the program's location to be deter-) 0 W 
130 VLFD ( ) 69220 W (          mined,) 934 W ( when the program is not located in the current directory.  Other operating systems) 0 W 
130 VLFD ( ) 69220 W (          should) 934 W ( use the correct methods and syntax for their requirements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       5.) 1334 W ( Discounting the central processing unit's clock rate, execution time depends upon the size of) 0 W 
130 VLFD ( ) 69220 W (          the) 1212 W ( program being analyzed and the complexity of the individual statements.  Programs) 0 W 
130 VLFD ( ) 69220 W (          making) 1212 W ( extensive use of INCLUDE files will execute somewhat more slowly, because of) 0 W 
130 VLFD ( ) 69220 W (          the) 1212 W ( file management requirements for the included files and the repetitious processing of) 0 W 
130 VLFD ( ) 69220 W (          the) 1212 W ( included files for each subprogram that uses them.  Also, execution time is slower) 0 W 
130 VLFD ( ) 69220 W (          when) 1212 W ( INCLUDE files are large in size, or many INCLUDE files are used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       6.) 1334 W ( Since FORTRAN is not case sensitive, except for literals, all statements are forced to upper) 0 W 
130 VLFD ( ) 69220 W (          case) 1212 W ( by FXREF.  This affects the output print tables 2 through 6 and tables 8 through 10.) 0 W 
130 VLFD ( ) 69220 W (          See) 1212 W ( individual table descriptions below.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       7.) 1334 W ( FXREF is a full 32 bit native OS/2-ECS program.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       8.) 1334 W ( Since FXREF is not a Presentation Manager program, no icon is provided for the OS/2-ECS) 0 W 
130 VLFD ( ) 69220 W (          Presentation) 1212 W ( Manager desktop for FXREF.  However, the user may create their own.) 0 W 
130 VLFD ( ) 69220 W (          Likewise,) 1212 W ( if a user desires a desktop icon for other operating systems than OS/2-ECS, they) 0 W 
130 VLFD ( ) 69220 W (          may) 1212 W ( create their own.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

4296 VLFD ( ) 69220 W (                                                                 -10-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( STATEMENTS) 68664 W ( PROCESSED:) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF SF

276 VLFD ( ) 68664 W ( ) -3330 W (       The) 1806 W ( table below lists the FORTRAN 77 statements processed by FXREF.) 0 W 
312 VLFD ( ) 68664 W ( ) -3330 W (       ACCEPT) 1806 W ( ) -3326 W (              DO) 1273 W ( WHILE) 0 W (                EXTERNAL) 1131 W ( ) -3333 W (           PRINT) 219 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       ASSIGN) 1806 W ( ) -3330 W (              DOUBLE) 1479 W ( COMPLEX) 0 W ( ) -3344 W (          FORMAT) -1612 W ( ) -3325 W (             PROGRAM) 817 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       BACKSPACE) 1806 W ( ) -3333 W (           DOUBLE) 147 W ( PRECISION) 0 W (        FUNCTION) -2181 W ( ) -3333 W (           READ) 279 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       BLOCKDATA) 1806 W ( ) -3339 W (           ELSE) -15 W ( ) -3328 W (                    GO) 1859 W ( TO) 0 W ( ) -3326 W (              RECORD) 1567 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       BYTE) 1806 W ( ) -3324 W (                ELSE) 1752 W ( IF) 0 W ( ) -3321 W (                 IF) 1821 W ( ) -3322 W (                 REAL) 2258 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       CALL) 1806 W ( ) -3328 W (                ENCODE) 1780 W ( ) -3330 W (                  IFMPLICIT) 1239 W (          REWIND) 798 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       CHARACTER) 1806 W ( ) -3337 W (           END) -13 W ( ) -3327 W (                     INCLUDE) 1855 W (            SAVE) 738 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       CKOSE) 1806 W (               END) 1440 W ( DO) 0 W (                  INQUIRE) 1498 W (            STOP) 998 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       COMMON) 1806 W ( ) -3334 W (              ENDFILE) 623 W ( ) -3330 W (                 INTEGER) 1338 W (            STRUCTURE) 831 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       COMPLEX) 1806 W ( ) -3325 W (             END) 721 W ( IF) 0 W ( ) -3330 W (                  INTRINSIC) 1819 W ( ) -3330 W (          SUBROUTINE) 753 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       CONTINUE) 1806 W (            END) 523 W ( MAP) 0 W ( ) -3321 W (                 LOGICAL) 1233 W (            TYPE) 923 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       CYCLE) 1806 W ( ) -3330 W (               END) 1514 W ( STRUCTURE) 0 W ( ) -3343 W (           MAP) -799 W ( ) -3332 W (                UNION) 1664 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       DATA) 1806 W ( ) -3332 W (                END) 1697 W ( UNION) 0 W ( ) -3327 W (               NAMELIST) 805 W ( ) -3331 W (           VIRTUAL) 401 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       DECODE) 1806 W ( ) -3330 W (              ENTRY) 1035 W ( ) -3329 W (                   OPEN) 1571 W ( ) -3330 W (               VOLATILE) 1478 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       DIMENSION) 1806 W ( ) -3332 W (           EQUIVALENCE) 268 W ( ) -3347 W (             PARAMETER) -25 W (          WHILE) -468 W 
156 VLFD ( ) 68664 W ( ) -3330 W (       DO) 1806 W ( ) -3324 W (                  EXIT) 2026 W (                    PAUSE) 2004 W ( ) -3332 W (              WRITE) 1330 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

286 VLFD ( ) 69220 W (        Not) 1720 W ( all of these statements are part of the FORTRAN 77 standard.  Any statement that can) 0 W 
130 VLFD ( ) 69220 W (        not) 1720 W ( be determined to be one listed in the table will be considered an arithmetic statement.) 0 W 
130 VLFD ( ) 69220 W (        The) 1720 W ( accepted statements considered as extensions are discussed in the next section.) 0 W 
260 VLFD ( ) 69220 W (        Many) 1720 W ( FORTRAN compilers have other statements and different use of some special charac-) 0 W 
130 VLFD ( ) 69220 W (        ters) 1720 W ( that are not supported by FXREF.  A diagnostic message will be written when such) 0 W 
130 VLFD ( ) 69220 W (        statements) 1720 W ( are found indicating the statement is not a FORTRAN 77 statement.) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

250 VLFD ( EXTENSIONS:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W (        ) 1720 W  1 AtrOn
(ADDITIONAL STATEMENTS) 0 W  1 AtrOff

260 VLFD ( ) 69220 W (        FXREF) 1720 W ( provides processing of a number of extensions for standard FORTRAN 77 state-) 0 W 
130 VLFD ( ) 69220 W (        ments.) 1720 W (  These are listed below.  However, not all possible extensions provided by compilers) 0 W 
130 VLFD ( ) 69220 W (        are) 1720 W ( accepted.  Any statement not processed by the program will cause the message) 0 W 
260 VLFD ( ) 69220 W (                "NOT) 1720 W ( A FORTRAN STATEMENT") 0 W 
260 VLFD ( ) 69220 W (        to) 1720 W ( appear at the end of the listing of each program and subprogram.  All statements will be) 0 W 
130 VLFD ( ) 69220 W (        identified) 1720 W ( by the internal statement number assigned by FXREF if one has been created for) 0 W 
130 VLFD ( ) 69220 W (        the) 1720 W ( statement.  Otherwise, variant forms of this message will occur.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1502 VLFD ( ) 69220 W (                                                                 -5-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (        Also,) 1720 W ( some FORTRAN statements will cause this message if they have non standard syntax) 0 W 
130 VLFD ( ) 69220 W (        that) 1720 W ( can not be identified by FXREF.) 0 W 
260 VLFD ( ) 69220 W (        ACCEPT) 1720 W ( is a VMS extension.  No input-output control list is allowed.) 0 W 
260 VLFD ( ) 69220 W (        BYTE) 1720 W ( is equivalent to a LOGICAL*1 statement.) 0 W 
260 VLFD ( ) 69220 W (        CALL) 1720 W ( arguments specifying alternate return statement numbers may use either of the) 0 W 
130 VLFD ( ) 69220 W (            forms:) 2535 W (     *nn or &nn, where nn is a statement number) 0 W 
260 VLFD ( ) 69220 W (        CLOSE) 1720 W ( input-output control arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  ERR, IOSTAT, STATUS, UNIT) 0 W 
130 VLFD ( ) 69220 W (                Extension:) 1720 W ( DISP, DISPOSE) 0 W 
260 VLFD ( ) 69220 W (        DECODE) 1720 W ( is available in a number of FORTRAN 77 compilers.  Input-output control list  ar-) 0 W 
130 VLFD ( ) 69220 W ( ) -2770 W (              guments) 3005 W ( accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( ERR, IOSTAT) 0 W 
260 VLFD ( ) 69220 W (        DO) 1720 W ( without a statement number, indicating the start of the DO loop, is available in some) 0 W 
130 VLFD ( ) 69220 W (           FORTRAN) 2160 W ( 77 compilers.  This form of a DO statement requires the END DO statement) 0 W 
130 VLFD ( ) 69220 W (           to) 2160 W ( indicate the end of a DO loop of this type.) 0 W 
260 VLFD ( ) 69220 W (        DO) 1720 W ( WHILE is available in some FORTRAN 77 compilers.  This statement requires termina-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (                 tion) 2703 W (  by an END DO statement.) 0 W 
260 VLFD ( ) 69220 W (        ENCODE) 1720 W ( is available in some FORTRAN 77 compilers.  Input-output control list arguments) 0 W 
130 VLFD ( ) 69220 W (               accepted) 2830 W ( are:) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( ERR, IOSTAT) 0 W 
260 VLFD ( ) 69220 W (        END) 1720 W ( DO is available in some FORTRAN 77 compilers.  This statement is required for the) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (               DO) 2571 W ( statement omitting a statement number and DO WHILE to indicate where the) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (               DO) 2571 W ( statement terminates.) 0 W 
260 VLFD ( ) 69220 W (        ENDFILE) 1720 W ( input-output control list arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  ERR, IOSTAT, UNIT) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( none) 0 W 
260 VLFD ( ) 69220 W (        END) 1720 W ( MAP is available on some FORTRAN compilers using the MAP statement to terminate) 0 W 
130 VLFD ( ) 69220 W (                the) 1720 W ( MAP definition and will always follow it.) 0 W 
260 VLFD ( ) 69220 W (        END) 1720 W ( STRUCTURE is available in some FORTRAN 77 compilers.  This statement terminates) 0 W 
130 VLFD ( ) 69220 W ( ) -2764 W (                      a) 3107 W ( STRUCTURE definition and will always follow it.) 0 W 
260 VLFD ( ) 69220 W (        END) 1720 W ( UNION is available in some FORTRAN 77 compilers.  This statement terminates a) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  UNION) 2831 W ( definition and will always follow it.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -6-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (        END) 1720 W ( WHILE is available in some FORTRAN 77 compilers.  This statement terminates a) 0 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                  WHILE) 2820 W ( statement and must follow it.  This statement does not terminate a DO) 0 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                  WHILE) 2820 W ( statement.) 0 W 
260 VLFD ( ) 69220 W (        FORMAT) 1720 W ( statements are allowed to use the <...> syntax to specify field specifications) 0 W 
130 VLFD ( ) 69220 W (                within) 1720 W ( the statement that are to be modified by the results of program execution.) 0 W 
130 VLFD ( ) 69220 W (                This) 1720 W ( feature is only available in FORMAT statements that are compiled.  Not all) 0 W 
130 VLFD ( ) 69220 W (                FORTRAN) 1720 W ( compilers allow this usage.) 0 W 
260 VLFD ( ) 69220 W (                Subroutine) 1720 W ( FMTSYN checks for FORMAT statements syntax errors, but not all fea-) 0 W 
130 VLFD ( ) 69220 W (                tures) 1720 W ( of the FORMAT statement are analyzed.  In most of the FORMAT messages,) 0 W 
130 VLFD ( ) 69220 W (                nine) 1720 W ( characters will appear in the message.  If a hollerith or literal field occurs) 0 W 
130 VLFD ( ) 69220 W (                within) 1720 W ( the nine characters, it is shown as the hexadecimal character CF on the) 0 W 
130 VLFD ( ) 69220 W (                monitor) 1720 W ( and as a blank when the listing is printed.  A single error in a FORMAT) 0 W 
130 VLFD ( ) 69220 W (                statement) 1720 W ( may cause additional messages.) 0 W 
260 VLFD ( ) 69220 W (        INCLUDE) 1720 W ( is available in some FORTRAN 77 compilers.  It allows FORTRAN source code in) 0 W 
130 VLFD ( ) 69220 W (                a) 1720 W ( separate file or files to be brought into a program or subprogram for compilation.) 0 W 
130 VLFD ( ) 69220 W (                Some) 1720 W ( FORTRAN compilers using this statement permit INCLUDE statements to be) 0 W 
130 VLFD ( ) 69220 W (                nested.) 1720 W ( FXREF allows nesting up to 6 deep; however, the actual nesting factor is a) 0 W 
130 VLFD ( ) 69220 W (                function) 1720 W ( of the compiler in use.  Note that an END statement in an INCLUDE state-) 0 W 
130 VLFD ( ) 69220 W (                ment's) 1720 W ( file will cause FXREF to cease processing.) 0 W 
260 VLFD ( ) 69220 W (        INQUIRE) 1720 W ( input-output control list arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  ACCESS, BLANK, DIRECT, ERR, EXIST, FILE, FORM, FORMATTED,) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           IOSTAT,) 1800 W ( NAME, NAMED, NEXTREC, NUMBER, OPENED, RECL,) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           SEQUENTIAL,) 1800 W ( UNIT) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( ACTION, BINARY, BLOCKSIZE, BUFFERCOUNT,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           CARRIAGECONTROL,) 1814 W ( KEYED, MODE, ORGANIZATION,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           RECORDTYPE,) 1814 W ( UNFORMATTED) 0 W 
260 VLFD ( ) 69220 W (        IMPLICIT) 1720 W ( may be expanded in some FORTRAN 77 compilers with the arguments) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (                 UNDEFINED) 2376 W ( or NONE.  Variable names starting with an underscore are set to) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (                 REAL*4) 2376 W ( by default.  The IMPLICIT statement may be used to change the default) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (                 type) 2376 W ( and length of variables.) 0 W 
260 VLFD ( ) 69220 W (        MAP) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        OPEN) 1720 W ( input-output control list arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  ACCESS, BLANK, ERR, FILE, FORM, IOSTAT, RECL, STATUS, UNIT) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W (                Extension:) 1720 W ( ACTION, ASSOCIATEVARIAB, ASSOCIATEVARIABLE, BLOCKSIZE,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           BUFFERCOUNT,) 1814 W ( CARRIAGECONTROL, DISPOSE, EXTENDSIZE,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           INITIALSIZE,) 1814 W ( KEY, MODE, NAME, NOSPANBLOCKS,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           ORGANIZATION,) 1814 W ( READONLY, RECORDSIZE, RECORDTYPE,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           SHARE,) 1814 W ( SHARED, TYPE, USEROPEN) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W (        PRINT) 1720 W ( is available in some FORTRAN 77 compilers.  No input-output control list is allowed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -7-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (        READ) 1720 W ( input-output control list arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  END, ERR, FMT, IOSTAT, REC, UNIT) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( NML) 0 W 
260 VLFD ( ) 69220 W (                A) 1720 W ( READ statement with an asterisk for the FORMAT statement number will not) 0 W 
130 VLFD ( ) 69220 W (                have) 1720 W ( a cross reference entry of the format designation in any table produced by) 0 W 
130 VLFD ( ) 69220 W (                FXREF.) 1720 W 
260 VLFD ( ) 69220 W (        RECORD) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        STRUCTURE) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        TYPE) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        UNION) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        VIRTUAL) 1720 W ( is available in some FORTRAN compilers.) 0 W 
260 VLFD ( ) 69220 W (        VOLATILE) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (        WHILE) 1720 W ( is available in some FORTRAN 77 compilers.) 0 W 
260 VLFD ( ) 69220 W (                The) 1720 W ( WHILE statement has two standard forms; these are:) 0 W 
130 VLFD ( ) 69220 W (                WHILE) 1720 W ( \(logical condition\) [another executable FORTRAN statement]) 0 W 
130 VLFD ( ) 69220 W (                WHILE) 1720 W ( \(logical condition\) DO) 0 W 
130 VLFD ( ) 69220 W (                Both) 1720 W ( of the above forms are processed by FXREF.  The WHILE statement must be) 0 W 
130 VLFD ( ) 69220 W (                closed) 1720 W ( by an END WHILE statement.) 0 W 
260 VLFD ( ) 69220 W (        WRITE) 1720 W ( input-output control list arguments accepted are:) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  END, ERR, FMT, IOSTAT, REC, UNIT) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( NML) 0 W 
260 VLFD ( ) 69220 W (                A) 1720 W ( WRITE statement with an asterisk for the FORMAT statement number will not) 0 W 
130 VLFD ( ) 69220 W (                have) 1720 W ( a cross reference entry of the format designation in any table produced by) 0 W 
130 VLFD ( ) 69220 W (                FXREF.) 1720 W 
260 VLFD ( ) 69220 W (        ) 1720 W  1 AtrOn
(ADDITIONAL FEATURES OF STATEMENTS ACCEPTED BY FXREF) 0 W  1 AtrOff

260 VLFD ( ) 69220 W (        Character) 1720 W ( Constant Delimiters) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  The FORTRAN 77 standard uses apostrophes as the delimiters of charac-) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           ter) 1800 W ( strings, i.e., character constants.  Only apostrophes may be used to) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           define) 1800 W ( character constants in CALL statements.) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( Some compilers provide for use of either apostrophes or quotation marks,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           and) 1814 W ( either may be used.  FXREF will determine which type is used from) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           the) 1814 W ( context of the statements.) 0 W 
260 VLFD ( ) 69220 W (        Character) 1720 W ( Constant Definitions for Binary, Octal, or Hexadecimal Constants) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -8-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (                Binary:) 1720 W (  Some FORTRAN compilers allow binary constants to be specified using the) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         notation:) 1707 W ( B'00101101' or '00101101'B as a single byte constant.  Only zeros) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         and) 1707 W ( ones may be used to specify the constant value.  FXREF will accept) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         either) 1707 W ( of these notations.  The binary constant may any arbitrary length up) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         to) 1707 W ( the capacity of the particular compiler used.) 0 W 
260 VLFD ( ) 69220 W (                Octal:) 1720 W (   Most FORTRAN compilers allow octal constants to be specified using the) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         notation:) 1537 W ( O'7' or '7'O as a single byte constant.  Only the digits between) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         zero) 1537 W ( through seven may be used to specify the constant value.  FXREF ac-) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         cepts) 1537 W ( either of these notations.  The octal constant may be any arbitrary) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                         length) 1537 W ( accepted by the particular compiler used.) 0 W 
260 VLFD ( ) 69220 W (                Hexadecimal:) 1720 W ( Most FORTRAN compilers allow hexadecimal constants to be specified) 0 W 
130 VLFD ( ) 69220 W (                             using) 1970 W ( the notation: Z'0A' or '0A'Z as a single byte constant.  The) 0 W 
130 VLFD ( ) 69220 W (                             FORTRAN) 1970 W ( 77 standard uses the form Z'0A', but some compilers use) 0 W 
130 VLFD ( ) 69220 W (                             '0A'X.) 1970 W (  Only the digits zero through nine and the letters A through F) 0 W 
130 VLFD ( ) 69220 W (                             may) 1970 W ( be used to specify the constant value.  FXREF will accept either of) 0 W 
130 VLFD ( ) 69220 W (                             these) 1970 W ( notations.  The hexadecimal constant may be any arbitrary) 0 W 
130 VLFD ( ) 69220 W (                             length) 1970 W ( accepted by the particular compiler used.  Some FORTRAN com-) 0 W 
130 VLFD ( ) 69220 W (                             pilers) 1970 W ( use X instead of Z to indicate hexadecimal constants, and) 0 W 
130 VLFD ( ) 69220 W (                             FXREF) 1970 W ( accepts this option.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (             Some compilers allow the use of the character C with string literal definitions) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             encapsulated) 948 W ( between apostrophes or quotation marks to indicate the) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             string) 948 W ( is terminated with a null character, HEX ) 0 W  2 AtrOn
(00) 0 W  2 AtrOff
(, for compatibility) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             with) 948 W ( the C/C++ language standard.  The null character is then included) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             in) 948 W ( the literal but not shown in any listings.  The literal length will be) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             one) 948 W ( character longer than it appears in the listings since the null is not) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             a) 948 W ( printable character.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (             Example: the character string literal 'ABC'C will appear in memory as:) 0 W 
130 VLFD ( ) 69220 W (                ) 1720 W (             ' CBA', where the blank is the null character, HEX ) 0 W  2 AtrOn
(00) 0 W  2 AtrOff
(, which is not a print-) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             able) 948 W ( character.  This literal would appear as HEX ) 0 W  2 AtrOn
(00434241) 0 W  2 AtrOff
( ASCII in) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             memory) 948 W ( of a PC.  In mainframe and minicomputers with a big endian) 0 W 
130 VLFD ( ) 69220 W ( ) -2752 W (                             architecture,) 948 W ( the literal would appear in memory as HEX ) 0 W  2 AtrOn
(41424300) 0 W  2 AtrOff

130 VLFD ( ) 69220 W ( ) -2752 W (                             ASCII.) 948 W 
260 VLFD ( ) 69220 W (                Not) 1720 W ( all FORTRAN compilers provide all types of these constants.  The specification of) 0 W 
130 VLFD ( ) 69220 W (                binary) 1720 W ( and octal constants without encapsulating apostrophes or quotation marks is) 0 W 
130 VLFD ( ) 69220 W (                not) 1720 W ( accepted by FXREF except in a DATA statement.) 0 W 
260 VLFD ( ) 69220 W (                The) 1720 W ( FORTRAN source code of FXREF uses the forms B'00101101', O'7', and Z'0A') 0 W 
130 VLFD ( ) 69220 W (                which) 1720 W ( conforms to IBM mainframe and DEC minicomputer standards.  If FXREF is) 0 W 
130 VLFD ( ) 69220 W (                to) 1720 W ( be compiled on a system with a different compiler than that described, verify the) 0 W 
130 VLFD ( ) 69220 W (                notation) 1720 W ( used to specify character constants in that compiler conforms to the stan-) 0 W 
130 VLFD ( ) 69220 W (                dards) 1720 W ( in FXREF source code.  Modify all character constants in the source code) 0 W 
130 VLFD ( ) 69220 W (                when) 1720 W ( required.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1306 VLFD ( ) 69220 W (                                                                 -9-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (        Comment) 1720 W ( Statements) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  The letter C in column one of the input source code identifies the record as) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           a) 1800 W ( comment statement containing no FORTRAN statement code.) 0 W 
260 VLFD ( ) 69220 W (                Extension:) 1720 W ( An asterisk , *, in column one of the input source code is also recognized) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           as) 1814 W ( a comment statement containing no FORTRAN statement code.  A) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           record) 1814 W ( of blanks is treated as a comment statement.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (           Some FORTRAN compilers allow the use of the character D, d, X, and x as) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           switches) 1019 W ( to the compiler that the statements, when they occur in column) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           one) 1019 W ( of the statement, are debugging statements and are compiled into a) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           program) 1019 W ( only when a debugging switch is set.  FXREF treats these cases) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           as) 1019 W ( a standard comment line, and they are ignored.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (           Some FORTRAN compilers use a dollar sign, $, or the sharp sign, #, in column) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           one) 1019 W ( of an input record to indicate such statements are operating system) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           or) 1019 W ( compiler commands rather than a FORTRAN language statement to) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           be) 1019 W ( compiled.  These statements are treated as comment statements.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (           Some FORTRAN compilers permit the use of an exclamation sign, !, as the) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           beginning) 1019 W ( of a line comment following a statement within a record.) 0 W 
130 VLFD ( ) 69220 W (                ) 1720 W (           FXREF will not process any source text as FORTRAN source code after an ex-) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           clamation) 1019 W ( sign occurs.  For a literal containing an exclamation sign,) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           FXREF) 1019 W ( will process the literal normally, and the exclamation sign will) 0 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                           not) 1019 W ( cause line processing to cease.) 0 W 
260 VLFD ( ) 69220 W (        Continuation) 1720 W ( Statements) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  Any nonblank character in column six of the input record identifies the) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           record) 1800 W ( as containing additional FORTRAN code that continues the state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           ment.) 1800 W 
130 VLFD ( ) 69220 W (                Extension:) 1720 W ( An ampersand, &, in column one also identifies the input record as con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           taining) 1814 W ( additional FORTRAN code that continues the statement.) 0 W 
260 VLFD ( ) 69220 W (                The) 1720 W ( number of continuation records is 99 when columns 5 through 7 on control card) 0 W 
130 VLFD ( ) 69220 W (                one) 1720 W ( 72.  If the value of columns 5 through 7 sets the maximum record of the) 0 W 
130 VLFD ( ) 69220 W (                FORTRAN) 1720 W ( source code to 132 characters, the maximum number of continuation) 0 W 
130 VLFD ( ) 69220 W (                records) 1720 W ( is 49.) 0 W 
260 VLFD ( ) 69220 W (        DIMENSION) 1720 W ( Subscripts) 0 W 
260 VLFD ( ) 69220 W (                The) 1720 W ( subscript values may be numeric or an arithmetic expression using previously) 0 W 
130 VLFD ( ) 69220 W (                defined) 1720 W ( named integer constants in a PARAMETER statement.  The PARAMETER) 0 W 
130 VLFD ( ) 69220 W (                statement) 1720 W ( must precede the DIMENSION statement when an arithmetic expression) 0 W 
130 VLFD ( ) 69220 W (                if) 1720 W ( used.) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  The subscript values of a dimensioned variable range from 1 to) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           2,147,483,647) 1800 W ( which is the maximum integer value a four byte word can) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           contain.) 1800 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -10-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (                Extension:) 1720 W ( The subscript values of a dimensioned variable range from -2,147,483,648) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           to) 1814 W ( +2,147,483,647 \(including zero\) which is the minimum and maximum) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (                           values) 1814 W ( a four byte word can contain.) 0 W 
260 VLFD ( ) 69220 W (                Note) 1720 W ( that a two byte integer has a range of -32,768 to +32,767, and those limits apply) 0 W 
130 VLFD ( ) 69220 W (                when) 1720 W ( two byte integer variables are used.) 0 W 
260 VLFD ( ) 69220 W (        EQUIVALENCE) 1720 W ( Subscripts and Substrings) 0 W 
260 VLFD ( ) 69220 W (                Standard:) 1720 W (  The subscript values of an equivalenced variable may be specified as a) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           numeric) 1800 W ( integer or as an arithmetic expression using previously defined) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           named) 1800 W ( integer constants in a PARAMETER statement.  The) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           PARAMETER) 1800 W ( statement must precede the EQUIVALENCE statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                           when) 1800 W ( an arithmetic expression is used.) 0 W 
260 VLFD ( ) 69220 W (                ) 1720 W (           Substring specification values must be numeric integers only.) 0 W 
260 VLFD ( ) 69220 W (        Intrinsic) 1720 W ( Functions) 0 W 
260 VLFD ( ) 69220 W (                All) 1720 W ( FORTRAN compilers provide a library of functions that can be used for various) 0 W 
130 VLFD ( ) 69220 W (                purposes.) 1720 W (  The library of functions depends upon the particular compiler used.  Since) 0 W 
130 VLFD ( ) 69220 W (                each) 1720 W ( compiler has some unique features in its intrinsic function library, FXREF) 0 W 
130 VLFD ( ) 69220 W (                processes) 1720 W ( the most common and standard functions.  The most important of these) 0 W 
130 VLFD ( ) 69220 W (                are) 1720 W ( the mathematical functions which permit computation of trigonometric, ex-) 0 W 
130 VLFD ( ) 69220 W (                ponential,) 1720 W ( square root, logarithm, and other mathematical functions' values when) 0 W 
130 VLFD ( ) 69220 W (                required.) 1720 W (  Some compilers allow a programmer to use a generic function name for all) 0 W 
130 VLFD ( ) 69220 W (                length) 1720 W ( and type specifications.  When used in this manner, the compiler determines) 0 W 
130 VLFD ( ) 69220 W (                the) 1720 W ( function results type and length characteristics from the context of the state-) 0 W 
130 VLFD ( ) 69220 W (                ment.) 1720 W (  FXREF does not perform as complete an analysis as a compiler;) 0 W 
130 VLFD ( ) 69220 W (                consequently,) 1720 W ( type and length of intrinsic functions may not have the correct  infor-) 0 W 
130 VLFD ( ) 69220 W (                mation) 1720 W ( in the various tables.  Some intrinsic functions will have a length) 0 W 
130 VLFD ( ) 69220 W (                designation) 1720 W ( of ? in the output listing when the length can not be determined.) 0 W 
260 VLFD ( ) 69220 W (                Although) 1720 W ( FORTRAN does not have any reserved variable names, the intrinsic func-) 0 W 
130 VLFD ( ) 69220 W (                tion) 1720 W ( names are treated as reserved by FXREF.  Thus, a statement such as Y =) 0 W 
130 VLFD ( ) 69220 W (                SIN\(X\)) 1720 W ( is used to compute the value of the trigonometric sine of the angle X.) 0 W 
130 VLFD ( ) 69220 W (                However,) 1720 W ( if SIN\(N\) is used where SIN is defined in a DIMENSION statement, then) 0 W 
130 VLFD ( ) 69220 W (                conflict) 1720 W ( occurs because the variable name no longer has a unique meaning.  FXREF) 0 W 
130 VLFD ( ) 69220 W (                will) 1720 W ( write a warning diagnostic message for this case, and the name is treated as a) 0 W 
130 VLFD ( ) 69220 W (                variable) 1720 W ( name rather than a function name. The INTRINSIC statement may be used) 0 W 
130 VLFD ( ) 69220 W (                to) 1720 W ( prevent conflicts of this kind.) 0 W 
260 VLFD ( ) 69220 W (                If) 1720 W ( desired, FXREF may be modified to either expand or reduce the entries in the in-) 0 W 
130 VLFD ( ) 69220 W (                trinsic) 1720 W ( function table.  Instructions on requirements for changing the the function) 0 W 
130 VLFD ( ) 69220 W (                table) 1720 W ( names are documented in the subroutine CHKNME.  If any names are  added) 0 W 
130 VLFD ( ) 69220 W (                or) 1720 W ( deleted from the function table, collating sequence must be maintained, since the) 0 W 
130 VLFD ( ) 69220 W (                search) 1720 W ( routine for matching function names requires sequence order for the coding) 0 W 
130 VLFD ( ) 69220 W (                system) 1720 W ( used.  The table currently contains 143 entries.  The table values are defined) 0 W 
130 VLFD ( ) 69220 W (                in) 1720 W ( the BLOCK DATA subroutine.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1046 VLFD ( ) 69220 W (                                                                 -11-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W (                The) 1720 W ( address functions %LOC, %REF, and %VAL provide special data and informa-) 0 W 
130 VLFD ( ) 69220 W (                tion) 1720 W ( to the compiler.  %LOC will provide a signed integer value of the address of its) 0 W 
130 VLFD ( ) 69220 W (                argument) 1720 W ( and may be used as an arithmetic value in arithmetic expressions or) 0 W 
130 VLFD ( ) 69220 W (                arithmetic) 1720 W ( assignment statements.  %REF and %VAL may be used only in the argu-) 0 W 
130 VLFD ( ) 69220 W (                ment) 1720 W ( list of a FUNCTION invocation or called SUBROUTINE.  %REF causes the) 0 W 
130 VLFD ( ) 69220 W (                argument) 1720 W ( variable's address to be passed, while %VAL causes the argument vari-) 0 W 
130 VLFD ( ) 69220 W (                able's) 1720 W ( actual value to be passed.) 0 W 
260 VLFD ( ) 69220 W (                While) 1720 W ( it is best to avoid defining variable names that are identical to any intrinsic) 0 W 
130 VLFD ( ) 69220 W (                function) 1720 W ( name, FXREF can discern the difference in most cases.  If the program is) 0 W 
130 VLFD ( ) 69220 W (                unable) 1720 W ( to make a definitive decision, a default choice will be made and a diagnostic) 0 W 
130 VLFD ( ) 69220 W (                message) 1720 W ( will be written as a warning.) 0 W 
260 VLFD ( ) 69220 W (                A) 1720 W ( list of the intrinsic functions recognized by FXREF is shown below.) 0 W 
260 VLFD ( ) 69220 W (                ABSOLUTE) 1720 W ( VALUE FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ABS) 1334 W ( ) -2775 W (         -) 1315 W ( Absolute value of a number, generic form) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ABS) 1334 W ( ) -2775 W (         -) 1315 W ( Absolute value of a single precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CABS) 1334 W (        -) 925 W ( Absolute value of a single precision complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DABS) 1334 W (        -) 855 W ( Absolute value of a double precision number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IABS) 1334 W ( ) -2774 W (        -) 1318 W ( Absolute value of an integer number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ZABS) 1334 W ( ) -2774 W (        -) 1063 W ( Absolute value of a double precision complex number) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ADDRESSING) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       %LOC) 1334 W (        -) 670 W ( Creates a memory address of the variable name argument) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       %REC) 1334 W ( ) -2778 W (        -) 671 W ( Passes an argument's address in a CALL, ENTRY, FUNCTION,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  or SUBROUTINE statenment) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       %VAL) 1334 W (        -) 740 W ( Passes an argument's actual value in a CALL, ENTRY,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  FUNCTION, or SUBROUTINE statement) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ARCCOSINE) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ACOS) 1334 W (        -) 855 W ( Real single precision Arccosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DACOS) 1334 W ( ) -2774 W (       -) 262 W ( Real double precision Arccosine) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ARCSINE) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ASIN) 1334 W ( ) -2776 W (        -) 1202 W ( Real single precision Sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DASIN) 1334 W (       -) 660 W ( Real double precision Sine) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ARCTANGENT) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ATAN) 1334 W ( ) -2776 W (        -) 762 W ( Real single precision Arctangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ATAN2) 1334 W ( ) -2778 W (       -) 474 W ( Real single precision arctangent of a ratio) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DATAN) 1334 W ( ) -2779 W (       -) 157 W ( Real double precision Acrtangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DATAN2) 1334 W (      -) -280 W ( Real double precision arctangent of a ratio) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -12-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            BIT) 2020 W ( MANIPULATION FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       BTEST) 1334 W (       -) 580 W ( Determines if a bit is set to a 1 or 0.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBCLR) 1334 W (       -) 820 W ( Sets a bit to zero) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBSET) 1334 W ( ) -2777 W (       -) 951 W ( Sets a bit to one) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            COSINE) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       COS) 1334 W ( ) -2777 W (         -) 1253 W ( Generic cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       COS) 1334 W ( ) -2777 W (         -) 1253 W ( Real single precision cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CCOS) 1334 W (        -) 855 W ( Complex single precision cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CDCOS) 1334 W ( ) -2774 W (       -) 262 W ( Complex double precision cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DCOS) 1334 W (        -) 785 W ( Double precision cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ZCOS) 1334 W ( ) -2774 W (        -) 993 W ( Complex double precision cosine) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            SINE) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       SIN) 1334 W ( ) -2778 W (         -) 1562 W ( Generic sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SIN) 1334 W ( ) -2778 W (         -) 1562 W ( Real single precision sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CSIN) 1334 W ( ) -2776 W (        -) 1202 W ( Complex single precision sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CDSIN) 1334 W (       -) 660 W ( Complex double precision sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DSIN) 1334 W ( ) -2776 W (        -) 1132 W ( Double precision sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ZSIN) 1334 W ( ) -2778 W (        -) 1341 W ( Complex double precision sine) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            TANGENT) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       TAN) 1334 W ( ) -2779 W (         -) 1171 W ( Generic tangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       TAN) 1334 W ( ) -2779 W (         -) 1171 W ( Single precision real tangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DTAN) 1334 W ( ) -2776 W (        -) 692 W ( Double precision real tangent) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            COTANGENT) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       COTAN) 1334 W ( ) -2779 W (       -) 157 W ( Generic cotangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       COTAN) 1334 W ( ) -2779 W (       -) 157 W ( Single precision cotangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DCOTAN) 1334 W (      -) -650 W ( Double precision cotangent) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            HYPERBOLIC) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       COSH) 1334 W ( ) -2778 W (        -) 716 W ( Generic hyperbolic cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       COSH) 1334 W ( ) -2778 W (        -) 716 W ( Single precision hyperbolic cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SINH) 1334 W ( ) -2774 W (        -) 1063 W ( Generic hyperbolic sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SINH) 1334 W ( ) -2774 W (        -) 1063 W ( Single precision hyperbolic sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       TANH) 1334 W ( ) -2774 W (        -) 623 W ( Generic hyperbolic tangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       TANH) 1334 W ( ) -2774 W (        -) 623 W ( Single precision hyperbolic tangent) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DCOSH) 1334 W ( ) -2778 W (       -) 104 W ( Double precision hyperbolic cosine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DSINH) 1334 W ( ) -2777 W (       -) 501 W ( Double precision hyperbolic sine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DTANH) 1334 W ( ) -2783 W (       -) -1 W ( Double precision hyperbolic tangent) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1306 VLFD ( ) 69220 W (                                                                 -13-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            CHARACTER) 2020 W ( CONVERSION FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       CHAR) 1334 W ( ) -2778 W (        -) 671 W ( Converts a character in collating sequence with index I to a one byte character variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ICHAR) 1334 W ( ) -2774 W (       -) 582 W ( Converts a single character to an integer of length 4) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            COMPLEX) 2020 W ( CONVERSION FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       AIMAG) 1334 W ( ) -2778 W (       -) 344 W ( Changes a complex number imaginary part to a single precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CMPLX) 1334 W ( ) -2779 W (       -) 157 W ( Converts two real, integer, or double precision arguments to a single precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CONJG) 1334 W ( ) -2775 W (       -) 235 W ( Changes a complex number into its single precision complex conjugate) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DCMPLX) 1334 W (      -) -650 W ( Converts two real, integer, or double precision arguments to a double precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DCONJG) 1334 W ( ) -2782 W (      -) -558 W ( Changes a complex number into its double precision complex conjugate) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DIMAG) 1334 W ( ) -2778 W (       -) 264 W ( Changes a complex number imaginary part to a double precision real number) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            EXPONENTIAL) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       CEXP) 1334 W ( ) -2778 W (        -) 901 W ( Complex single precision exponential) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CDEXP) 1334 W ( ) -2775 W (       -) 315 W ( Complex double precision exponential) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DERF) 1334 W ( ) -2774 W (        -) 808 W ( ERROR function of a double precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DERFC) 1334 W (       -) 290 W ( Complementary ERROR function of a double precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DEXP) 1334 W ( ) -2778 W (        -) 831 W ( Double precision exponential) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       EXP) 1334 W ( ) -2776 W (         -) 1294 W ( Generic exponential) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       EXP) 1334 W ( ) -2776 W (         -) 1294 W ( Real single precision exponential) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ERF) 1334 W ( ) -2776 W (         -) 1274 W ( ERROR function of single and double precision real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ERFC) 1334 W ( ) -2774 W (        -) 878 W ( Complementary ERROR function of single and double precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LGAMMA) 1334 W ( ) -2784 W (      -) -1141 W ( Natural logarithm of the GAMMA function) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  Note: Some compilers intrinsic library use GAMMA as the function) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (        name of LGAMMA and do not provide the GAMMA function directly.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            LOGARITHMIC) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ALOG) 1334 W ( ) -2774 W (        -) 738 W ( Natural logarithm of a single precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ALOG10) 1334 W ( ) -2778 W (      -) 58 W ( Base 10 logarithm of a single precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CDLOG) 1334 W (       -) 130 W ( Natural logarithm of a double precision complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CLOG) 1334 W ( ) -2774 W (        -) 738 W ( Natural logarithm of a single precision complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DLOG) 1334 W ( ) -2774 W (        -) 668 W ( Natural logarithm of a double precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DLOG10) 1334 W (      -) -35 W ( Base 10 logarithm of a double precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LOG) 1334 W (         -) 1150 W ( Generic logarithm) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LOG) 1334 W (         -) 1150 W ( Natural logarithm of a single or double precision number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LOG10) 1334 W ( ) -2778 W (       -) 684 W ( Base 10 logarithm of a single or double precision number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ZLOG) 1334 W ( ) -2776 W (        -) 877 W ( Natural logarithm of a double precision complex number) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            SQUARE) 2020 W ( ROOT FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       CSQRT) 1334 W ( ) -2777 W (       -) 421 W ( Complex single precision square root) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       CDSQRT) 1334 W ( ) -2784 W (      -) -341 W ( Complex double precision square root) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DSQRT) 1334 W ( ) -2777 W (       -) 341 W ( Double precision real square root) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SQRT) 1334 W ( ) -2774 W (        -) 923 W ( Generic square root) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -14-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       SQRT) 1334 W ( ) -2774 W (        -) 923 W ( Single precision real square root) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ZSQRT) 1334 W (       -) 580 W ( Complex double precision square root) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            NUMERIC) 2020 W ( CONVERSION - INTEGER FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       AINT) 1334 W ( ) -2778 W (        -) 1156 W ( Converts a single precision real number to a single precision integer real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ANINT) 1334 W ( ) -2778 W (       -) 554 W ( Rounds a single precision real number up or down to the nearest single precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   integer real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DAINT) 1334 W ( ) -2779 W (       -) 607 W ( Converts a double precision real number to a double precision integer value) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DINT) 1334 W ( ) -2778 W (        -) 1086 W ( Converts a double precision number to a double precision integer value) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       NINT) 1334 W (        -) 1040 W ( Rounds a double precision real number up or down to the nearest double precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   integer value) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IDINT) 1334 W ( ) -2779 W (       -) 1057 W ( Rounds a single or double precision real number to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       INT) 1334 W ( ) -2779 W (         -) 1521 W ( Generic conversion of a number to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       INT) 1334 W ( ) -2779 W (         -) 1521 W ( Converts a real single or double precision number to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       NINT) 1334 W (        -) 1040 W ( Converts a real single or double precision number, rounds up or down to the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   nearest integer of any length) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            NUMERIC) 2020 W ( CONVERSION - FLOAT FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       DBLE) 1334 W ( ) -2774 W (        -) 808 W ( Generic conversion of an integer number to a double precision number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DBLE) 1334 W ( ) -2774 W (        -) 808 W ( Convert an integer or single precision real to a double precision number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DFLOAT) 1334 W ( ) -2784 W (      -) -311 W ( Convert an integer number to a double precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FLOAT) 1334 W ( ) -2779 W (       -) 447 W ( Convert an integer number to a single precision real number) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            NUMERIC) 2020 W ( CONVERSION - DIFFERENCE FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       DDIM) 1334 W ( ) -2778 W (        -) 786 W ( Computes the difference between two double precision numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DIM) 1334 W ( ) -2776 W (         -) 1254 W ( Generic Computation of the difference between numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DIM) 1334 W ( ) -2776 W (         -) 1254 W ( Computes the difference between two single precision numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IDIM) 1334 W (        -) 1250 W ( Computes the difference between two integer numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DPROD) 1334 W (       -) 130 W ( Computes the product of two single precision numbers and produces a double precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  result) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       NEAREST) 1334 W (     -) -1260 W ( Assigns the nearest single or double precision number represented by the data type) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            NUMERIC) 2020 W ( CONVERSION - FIX FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       IFIX) 1334 W ( ) -2774 W (        -) 1688 W ( Converts a single precision real number to an integer) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       REAL) 1334 W ( ) -2774 W (        -) 878 W ( Generic single precision real part of a complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       REAL) 1334 W ( ) -2774 W (        -) 878 W ( Obtains the single precision real part of a single or double precision complex number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SNGL) 1334 W ( ) -2776 W (        -) 807 W ( Converts a double precision real number to a single precision real number) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            NUMERIC) 2020 W ( CONVERSION - SIGN TRANSFER FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       DSIGN) 1334 W (       -) 580 W ( Moves the algebraic sign from one double precision number to another) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ISIGN) 1334 W (       -) 1110 W ( Moves the algebraic sign from one integer to another) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SIGN) 1334 W ( ) -2776 W (        -) 1132 W ( Generic algebraic sign from one real number to another) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SIGN) 1334 W ( ) -2776 W (        -) 1132 W ( Moves the algebraic sign from one single or double precision number to another) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            MODULAR) 2020 W ( ARITHMETIC FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       AMOD) 1334 W ( ) -2776 W (        -) 392 W ( Computes the remainder of division of two single precision real numbers subtracted) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   from the first number) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -15-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       DMOD) 1334 W ( ) -2776 W (        -) 322 W ( Computes the remainder of division of two double precision real numbers subtracted) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  from the first number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IMOD) 1334 W ( ) -2778 W (        -) 786 W ( Computes the remainder of division of two integer numbers subtracted from the first) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MOD) 1334 W ( ) -2778 W (         -) 842 W ( Generic Computation of the remainder of division of two integer numbers subracted) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  from the first) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MOD) 1334 W ( ) -2778 W (         -) 842 W ( Computes the remainder of division of two integer numbers subracted from the first) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            MINIMUM) 2020 W ( AND MAXIMUM FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       AMAX0) 1334 W ( ) -2779 W (       -) 237 W ( Chooses the largest value from a list of a integers of any length to a single precision) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       AMAX1) 1334 W ( ) -2779 W (       -) 237 W ( Chooses the largest value from a list of single precision real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DMAX1) 1334 W ( ) -2779 W (       -) 157 W ( Chooses the largest value from a list of double precision real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IMAX0) 1334 W ( ) -2779 W (       -) 687 W ( Chooses the largest value from a list of integers of length two) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IMAX1) 1334 W ( ) -2779 W (       -) 687 W ( Chooses the largest value from a list of single precision real numbers and converts it) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MAX) 1334 W ( ) -2774 W (         -) 986 W ( Generic form for choosing the largest value from a list of any type of numbers;) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   whether real or integer) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MAX0) 1334 W ( ) -2776 W (        -) 762 W ( Chooses the largest value from a list of integers of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MAX1) 1334 W ( ) -2776 W (        -) 762 W ( Chooses the largest value form a list of single precision real numbers and converts it) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       AMIN0) 1334 W ( ) -2776 W (       -) 528 W ( Chooses the smallest value from a list of a integers of any length to a single) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   precision real number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       AMIN1) 1334 W ( ) -2776 W (       -) 528 W ( Chooses the smallest value from a list of single precision real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       DMIN1) 1334 W ( ) -2776 W (       -) 448 W ( Chooses the smallest value from a list of double precision real numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IMIN0) 1334 W ( ) -2776 W (       -) 978 W ( Chooses the smallest value from a list of integers of length two) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IMIN1) 1334 W ( ) -2776 W (       -) 978 W ( Chooses the smallest value from a list of single precision real numbers and converts) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   to an integer of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MIN) 1334 W ( ) -2777 W (         -) 1213 W ( Generic form for choosing the smallest value from a list of any type of numbers; whether real) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  or integer) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MIN0) 1334 W ( ) -2776 W (        -) 1017 W ( Chooses the smallest value from a list of integers of any length) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MIN1) 1334 W ( ) -2776 W (        -) 1017 W ( Chooses the smallest value form a list of single precision real numbers and converts) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (  to an integer of any length) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            LOGICAL) 2020 W ( BIT MANIPULATION FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       AND) 1334 W ( ) -2773 W (         -) 1047 W ( Performs a logical AND on each bit of arguments.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       BTEST) 1334 W (       -) 580 W ( Determines if a bit is set to 1 or 0.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IAND) 1334 W ( ) -2776 W (        -) 1017 W ( Performs a logical AND on each bit of arguments.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBCLR) 1334 W (       -) 820 W ( Sets a particular bit to zero.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBITS) 1334 W ( ) -2777 W (       -) 1401 W ( Extracts a range of bits.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IBSET) 1334 W ( ) -2777 W (       -) 951 W ( Sets a particular bit to one.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IEOR) 1334 W ( ) -2774 W (        -) 1133 W ( Performs a boolean exclusive OR.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       IOR) 1334 W ( ) -2779 W (         -) 1501 W ( Performs a boolean inclusive OR.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ISHA) 1334 W (        -) 1180 W ( Performs an arithmetic bit shift.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ISHC) 1334 W (        -) 1180 W ( Performs a circular bit shift.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ISHFT) 1334 W ( ) -2777 W (       -) 871 W ( Performs bit shift left or right.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ISHFTC) 1334 W ( ) -2776 W (      -) 276 W ( Performs circular bit shift.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LSHIFT) 1334 W ( ) -2778 W (      -) 368 W ( Performs a left bit shift.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       NOT) 1334 W ( ) -2772 W (         -) 1108 W ( Performs a boolean complement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       OR) 1334 W (          -) 1480 W ( Performs a boolean exclusive OR) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       RSHIFT) 1334 W ( ) -2776 W (      -) 276 W ( Performs a right bit shift.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -16-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            MISCELLANEOUS) 2020 W ( FUNCTIONS) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       INDEX) 1334 W ( ) -2778 W (       -) 554 W ( Obtains the position of a substring in a larger string in a character variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LEN) 1334 W ( ) -2779 W (         -) 1171 W ( Determines the number of characters in a character variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LENTRIM) 1334 W (     -) -1148 W ( Determines the number of characters in a character variable without trailing blanks) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       LEN_TRIM) 1334 W (    -) -1990 W ( FORTRAN 95 version of LENTRIM.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2778 W (       Hollerith) 1334 W ( Fields) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Data) 2020 W ( defined by Hollerith fields such as:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   25HTHIS IS A HOLLERITH FIELD) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   33HCAN'T SET VALUE TO ZERO AND WON'T) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            occurring) 2020 W ( in DATA statements and in argument lists of) 2163 W ( CALL statements are) 2162 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   processed.) 1767 W (  All Hollerith fields are) 976 W ( converted to literals and inserted in the table) 975 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   of) 1767 W ( literals created on the work file of FORTRAN unit 9.) 1239 W (  The output listing will) 1238 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   show) 1767 W ( the Hollerith field as:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   'THIS IS A HOLLERITH FIELD') 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (   'CAN''T SET VALUE TO ZERO AND WON''T') 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            FXREF) 2020 W ( will surround the Hollerith field with apostrophes before entering the) 2251 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   field) 1767 W ( in the) 2105 W ( literal table.  Hollerith fields containing an apostrophe within the) 2104 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   literal) 1767 W ( field will be changed to two adjacent apostrophes.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Hollerith) 2020 W ( fields are FORTRAN 66 data notation artifacts and are allowed only in) 745 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   the) 1767 W ( DATA, FORMAT statements, and in the argument list of CALL and ENTRY) 885 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   statements.) 1767 W (  They may not be used in data type statements such as) 2867 W ( BYTE,) 2866 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   CHARACTER,) 1767 W ( COMPLEX, INTEGER, LOGICAL, and REAL.  The maximum) 2720 W 
130 VLFD ( ) 69220 W ( ) -2773 W (                   length) 1767 W ( of a hollerith field is 255 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Logical) 1334 W ( Operators) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Standard:) 2020 W (   .AND.) 0 W (  .EQ.  .EQV.  .GE.  .GT.  .LE.  .LT.  .NE.  .NEQ.  .NEQV.  .NOT.) 92 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                               .OR.) 1763 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Extension:) 2020 W (  .XOR.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Numerical) 1334 W ( Constants) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Standard) 2020 W ( forms of specifying numerical constants are:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Integer:) 2020 W (  A) 0 W ( continuous series of digits, such as 746201, that) 2143 W ( may be optionally) 2142 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                             preceded) 1655 W ( by either a plus or minus sign.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Real:) 2020 W (     A) 0 W ( continuous series of digits with a) 1068 W ( decimal point, such as 7.46201, that) 1067 W 
130 VLFD ( ) 69220 W ( ) -2774 W (                             may) 1496 W ( be optionally preceded by a plus or minus sign.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Floating:) 2020 W ( A) 0 W ( continuous series of digits with a) 519 W ( decimal point to specify the value of) 518 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             the) 1732 W ( number that may be preceded by) 1552 W ( a plus or a minus sign, and the) 1551 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             number) 1732 W ( is followed by) 2370 W ( the letter D or E, optionally a plus or minus) 2369 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             sign,) 1732 W ( and a sequence of digits specifying the power of ten to adjust) 1117 W ( the) 1116 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             location) 1732 W ( of the decimal point.) 1454 W (  For example, the number 5,692 may be) 1453 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             written) 1732 W ( as .5692E4 or as 5.692E3.  If) 2182 W ( the number is negative then -) 2181 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                             .5692E4) 1732 W ( represents -5,692.  If the number is less than) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

136 VLFD ( ) 69220 W (                                                                 -17-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (          one,) 0 W ( then the value of .5692 is represented by .5692E0; if) 676 W ( D is used instead) 675 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             of) 1157 W ( E, the number is double precision.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Hexadecimal:) 2020 W ( A) 0 W ( hexadecimal number is represented as a literal encapsulated) 3065 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                within) 1974 W ( apostrophes or quotation marks and preceded) 2807 W ( by the al-) 2806 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                phabetic) 1974 W ( character Z.  An example is Z'AF01'.  Some FORTRAN) 2191 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                compilers) 1974 W ( place the Z after the final apostrophe,) 3588 W ( i.e., 'AFO1'Z.) 3587 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                FXREF) 1974 W ( accepts this form, though it does not conform to the) 4121 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                FORTRAN) 1974 W ( 77 standard.  Also, FXREF recognizes the letter X or x) 1000 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                as) 1974 W ( an option for the letter Z in specifying) 52 W ( hexadecimal literals, but X) 51 W 
130 VLFD ( ) 69220 W ( ) -2758 W (                                or) 1974 W ( x must occur at the end of the designated value.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (             The) 0 W ( hexadecimal constant form ZAF01, where AF01 is) 2948 W ( the numerical) 2947 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                value,) 1049 W ( is accepted by FXREF only when) 3338 W ( it occurs in a DATA state-) 3337 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                ment.) 1049 W (  If used in any other statement, it may be) 5131 W ( treated as a) 5130 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                variable) 1049 W ( name or) 3609 W ( generate an error message.  If used, constants in) 3608 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                this) 1049 W ( form are listed in the table of literals as ZAF01.  Note) 2938 W ( that no) 2937 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                apostrophes) 1049 W ( or quotation) 3045 W ( marks are added.  The use of X to replace) 3044 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                Z) 1049 W ( is not accepted for this format in a) 2040 W ( DATA  statement.      Also the) 2039 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                                form) 1049 W ( AF01Z is an illegal syntax and is not accepted by  FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Octal:) 2020 W (    An) 0 W ( octal number is represented as a literal encapsulated within either) 1803 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                             apostrophes) 1534 W ( or quotation marks.  An example is O'264'.  Some) 5707 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                             FORTRAN) 1534 W ( compilers place the O after the final apostrophe, i.e., '264'O.) 1282 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                             Constants) 1534 W ( of this form are accepted by) 1458 W ( FXREF, though it does not con-) 1457 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                             form) 1534 W ( to the FORTRAN 77 standard.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (          The) 0 W ( octal constant form O701, where 701) 158 W ( is the numerical value, is accepted) 157 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             by) 1157 W ( FXREF only when it occurs in a DATA statement.  If used) 2848 W ( in any) 2847 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             other) 1157 W ( statement, it may be) 2904 W ( treated as a variable name or generate an) 2903 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             error) 1157 W ( message.  Note that no apostrophes or quotation marks are) 5432 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             added.) 1157 W (  If used, constants in this form are listed in the table) 2173 W ( of literals) 2172 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             as) 1157 W ( O701.  Also, the) 2475 W ( form 701O is an illegal syntax and is not accepted) 2474 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             by) 1157 W ( FXREF.  Only the digits 0 \(zero\) through 7 may be used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Binary:) 2020 W (   A) 0 W ( Binary number is represented as a literal encapsulated within either) 1008 W 
130 VLFD ( ) 69220 W ( ) -2779 W (                             apostrophes) 1681 W ( or quotation marks.  An example is B'01010111'.  Some) 2558 W 
130 VLFD ( ) 69220 W ( ) -2779 W (                             FORTRAN) 1681 W ( compilers place the) 4804 W ( B after the final apostrophe, i.e.,) 4803 W 
130 VLFD ( ) 69220 W ( ) -2779 W (                             '01010111'B.) 1681 W (  Constants of this form are accepted by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (          The) 0 W ( binary) 2512 W ( constant form B01010111, where 01010111 is the numerical) 2511 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             value,) 1157 W (  is accepted by FXREF only) 3509 W ( when it occurs in a DATA state-) 3508 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             ment.) 1157 W (  If) 2463 W ( used in any other statement, it may be treated as a variable) 2462 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             name) 1157 W ( or generate) 4839 W ( an error message.  Note that no apostrophes or) 4838 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             quotation) 1157 W ( marks are added.  If used, constants) 1842 W ( in this form are listed in) 1841 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             the) 1157 W ( table of) 3100 W ( literals as B01010111.  The form 01010111B is an illegal) 3099 W 
130 VLFD ( ) 69220 W ( ) -2753 W (                             syntax) 1157 W ( and is not accepted by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Variable) 1334 W ( names) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Standard:) 2020 W (  The) 0 W ( length may not exceed six characters, and the initial character) 2045 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              must) 1822 W ( be an alphabetic character.  The remaining five characters may) 1081 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              be) 1822 W ( either alphabetic or numeric characters.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -18-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            Extension:) 2020 W ( The) 0 W ( length may not exceed 32 characters, and the initial character) 2212 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              must) 1834 W ( be an underscore or an alphabetic character.  The remaining) 2361 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              characters) 1834 W ( may) 4038 W ( be an underscore, alphabetic characters, numeric) 4037 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              characters,) 1834 W ( or a dollar sign.  Some FORTRAN compilers will) 562 W ( allow the) 561 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              dollar) 1834 W ( sign, $,) 3555 W ( to also be the first character of a variable name.) 3554 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              FXREF) 1834 W ( does not allow this choice, and variable names) 1503 W ( with a dollar) 1502 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              sign) 1834 W ( as the first character are treated as an error.  If a variable name) 720 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              exceeds) 1834 W ( 32 characters, the name) 447 W ( is truncated to the first 32 characters) 446 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                              for) 1834 W ( processing and is so shown in the printed listings.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (           Compound) 0 W ( variable names) 5102 W ( resulting from the use of STRUCTURE,) 5101 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              RECORD,) 1119 W ( and UNION statements are processed, but only the com-) 4370 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              ponents) 1119 W ( are cross referenced and) 2059 W ( printed in the tables by FXREF.  The) 2058 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              complete) 1119 W ( compound name is not shown in the output tables.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (            ) 2020 W (           FORTRAN) 0 W ( compilers handle variable name definitions within) 8023 W ( a) 8022 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              STRUCTURE) 1119 W ( statement separately from all other) 7176 W ( variable name) 7175 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              definitions.) 1119 W (  This allows) 3894 W ( identical variable names with different type) 3893 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              and) 1119 W ( length specifications.) 4923 W (  FXREF will maintain this separation of) 4922 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              definitions.) 1119 W (  A maximum of 1000) 6136 W ( unique variable names defined) 6135 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              within) 1119 W ( all STRUCTURE statements in all) 2906 W ( single program modules are) 2905 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                              allowed.) 1119 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

4686 VLFD ( ) 69220 W (                                                                 -19-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( CONSTRAINTS:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W  1 AtrOn
(PROGRAM CAPACITY) 0 W  1 AtrOff

260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( maximum number of items) 1780 W ( that can occur in a single program or subprogram module) 1779 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       processed) 1334 W ( by FXREF is listed below.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       4000) 4328 W (    Unique) -2020 W ( variable names, includes all variable names from INCLUDE state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      ments,) 1801 W ( subprogram names in EXTERNAL statements, and all synthetic) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      names) 1801 W ( generated by FXREF.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       4000) 4328 W (    Unique) -2020 W ( definitions of symbolic names for integer defined constants in) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      PARAMETER) 1801 W ( statements.  No limit exists for other PARAMETER data type) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      definitions.) 1801 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       4000) 4328 W (    Unique) -2020 W ( floating constants) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       2000) 4328 W (    Unique) -2020 W ( Integer constants) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Unique) -2020 W ( Dimensioned Variables) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Statement) -2020 W ( numbers) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Unique) -2020 W ( STRUCTURE statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Unique) -2020 W ( RECORD statement variable names) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Unique) -2020 W ( variables defined within a STRUCTURE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    References) -2020 W ( to a single variable name) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Literals) -2020 W ( used in CALL statements in an entire program) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    EXTERNAL) -2020 W ( subprogram names in an entire program) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    References) -2020 W ( to a single literal in a program module) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2776 W (       1000) 4328 W (    Unique) -2020 W ( ENTRY, FUNCTION, and SUBROUTINE subprograms) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 500) 0 W (    Literals) -2020 W ( in a single FORTRAN statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 500) 0 W (    References) -2020 W ( to a statement number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 500) 0 W (    Variable) -2020 W ( names in a COMMON block) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 500) 0 W (    Variables) -2020 W ( used within UNION statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 500) 0 W (    Unique) -2020 W ( EQUIVALENCE group definitions in a single routine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 256) 0 W (    Maximum) -2020 W ( length of a hollerith or literal in a single FORTRAN statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 200) 0 W (    Number) -2020 W ( of EXTERNAL subprogram definitions in a single routine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 200) 0 W (    Number) -2020 W ( of literals that can occur in a single FORTRAN statement) 0 W ( ) -7960 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 200) 0 W (    Unique) -2020 W ( COMMON definitions in an entire program) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 200) 0 W (    Unique) -2020 W ( EQUIVALENCE group definitions for a single routine) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2775 W (       ) 4725 W ( 100) 0 W (    EQUIVALENCE) -2020 W ( variables in a single common block) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  99) 0 W (    Integer) -2020 W ( input-output units) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  99) 0 W (    Unique) -2020 W ( variable name input-output units) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  99) 0 W (    Continuation) -2020 W ( statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  50) 0 W (    Maximum) -2020 W ( number of variables in an arithmetic assignment statement, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      arithmetic,) 1801 W ( character, or logical expressions) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  30) 0 W (    Maximum) -2020 W ( number of arguments allowed in an argument list for CALL,) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      ENTRY,) 1801 W ( FUNCTION, and SUBROUTINE statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  20) 0 W (    Variable) -2020 W ( names in an EQUIVALENCE group) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  20) 0 W (    MAP) -2020 W ( statements under a single UNION statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  20) 0 W (    Nested) -2020 W ( UNION statements under an initial UNION statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 5122 W (  10) 0 W (    Maximum) -2020 W ( number of arithmetic operations in an expression of integer type) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      defining) 1801 W ( constants specified in PARAMETER statements. Such expressions) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      may) 1801 W ( be  used to define a length characteristic of a variable, the dimension size) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      of) 1801 W ( an array variable, and the value of defined constants in a PARAMETER) 0 W 
130 VLFD ( ) 69220 W ( ) -2762 W (                      statement) 1801 W ( based on previously defined PARAMETER constant definitions.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (       ) 5520 W (   6) 0 W (    Nested) -2020 W ( INCLUDE statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       Disk) 2362 W ( Capacity for character constants \(literals\); however, FXREF limits an individual) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (              routine) 1848 W ( to 1000 literals.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

416 VLFD ( ) 69220 W (                                                                 -20-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2778 W (       There) 1334 W ( are no length or size limitations of the source program or subprogram if the above con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       straints) 1334 W ( are not violated; however, disk capacity is a limiting factor for all work files.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( allows 4,000 variable names in the master name table, which incorporates all names) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       present) 1334 W ( from the program or subprogram being processed, all synthetic variables generated) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       by) 1334 W ( FXREF, and all names from INCLUDE statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( has a limit of 4,000 integer PARAMETER definitions; however, the limits of unique in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       teger) 1334 W ( and real value constants may lower the integer PARAMETER limit indirectly.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( will generate synthetic variable names for the arguments of CALL statements when) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       global) 1334 W ( analysis is to be performed;, they are placed in the master table of variable names and) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       are) 1334 W ( counted as a normal variable in the master name table.  These synthetic variables will al-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ways) 1334 W ( start with C## and are never printed in the output listings.  However, the name of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       synthetic) 1334 W ( variables may appear in some of the global diagnostic and error messages and are) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       shown) 1334 W ( in the table below.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Synthetic) 1334 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  Name         Meaning) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##EX) 0 W (        A) 1450 W ( logical or mathematical expression) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##LIT) 0 W ( ) -2778 W (       A) 1604 W ( literal not part of a literal expression) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##LOG) 0 W ( ) -2775 W (       A) 915 W ( logical constant value) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##NUM) 0 W ( ) -2778 W (       A) 414 W ( numerical value) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##STM) 0 W (       A) 890 W ( return statement number) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W (  C##nnn) 0 W ( ) -2774 W (       A) 1472 W ( literal value \(nnn is a three digit number\)) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       However,) 1334 W ( if a variable name starting with C## occurs in the program module being analyzed, a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       diagnostic) 1334 W ( message is written.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( will process nested INCLUDE statements up to 6 levels after the first INCLUDE. The) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       program) 1334 W ( provides capacity for a depth level of 20, but, since each INCLUDE statement opens) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       an) 1334 W ( additional file and it is not possible to have more than 20 simultaneously open files for a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       single) 1334 W ( program in OS/2-ECS, only seven are possible without increasing the number of total) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       open) 1334 W ( files beyond 20. Units 14 through 20 are reserved for INCLUDE files.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( limit of 2000 occurrences of integer and 4000 floating constants excludes some multiple) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       use) 1334 W ( in the same statement.  Statements such as:) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (     ) -240 W (      A = 2.14 * SIN\(K+1\) + 2.14 * COS\(K-1\)) 0 W 
130 VLFD ( ) 66000 W (     ) -240 W (      B = 2.14 * SIN\(K-1\) + 2.14 * COS\(K+1\)) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2778 W (       will) 1334 W ( cause one entry to be made in the integer and floating constant save arrays for each state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ment.) 1334 W (  Duplicate occurrences of a number in the same statement do not cause additional) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       entries) 1334 W ( to be made in the save arrays, since the internal statement number, ISN, would be) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       identical.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Generally,) 1334 W ( FXREF distinguishes between algebraic sign and arithmetic operators for the plus) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       and) 1334 W ( minus signs.  Thus, the K-1 in the expressions above causes a plus one to be entered in) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( the integer save array.  Floating numbers are treated similarly, and tables 5 and 6 of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       output) 1334 W ( listing will have their values listed as positive numbers.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -21-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       FORTRAN) 1334 W ( 77 input records of source code use columns 1 through 72 as the statement contain-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ing) 1334 W ( area.  Columns 73 through 80 do not contain FORTRAN statement text.  FXREF assumes) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       all) 1334 W ( text in a single record represents a FORTRAN statement from column 1 to the column of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( value specified in record 3 of the file FXREF.CCD; see the description above.  Text beyond) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( specified column limit is ignored.  A maximum of 132 columns may be read as a single) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       record,) 1334 W ( since this is the length of the read buffer.  The EXECUTION section describes a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       capability) 1334 W ( to control the input source code record length.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( value of the record limit only sets the maximum length of the FORTRAN statement record) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       that) 1334 W ( can be read; it does not set the minimum.  If the hexadecimal characters HEX ) 0 W  2 AtrOn
(0D0A) 0 W  2 AtrOff
( oc-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       cur) 1334 W ( before the limit is reached, processing for a record will stop, and the next record will be) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       processed.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( desired, the limits described in the program capacity table above may be increased by chang-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ing) 1334 W ( the DIMENSION size of those variable arrays containing the data.  However, changing) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( DIMENSION size will require modification of loop control parameters throughout the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       program.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       In) 1334 W ( all FORTRAN statements, any text between matched left and right square brackets, [ and ],) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       occurring) 1334 W ( outside a character constant \(e. g., a literal\) will not be processed by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( logical constants, .TRUE. and .FALSE., are not cross referenced in any of the tables in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       output) 1334 W ( listing produced by FXREF.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

4426 VLFD ( ) 69220 W (                                                                 -22-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( OUTPUT:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       For) 1334 W ( each program or subprogram in the input files, FXREF produces either a text file listing) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       with) 1334 W ( standard FORTRAN carriage control characters as the first character of each print line,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       or) 1334 W ( a postscript printer listing of one or two files.  If a text output is requested, a utility) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       program) 1334 W ( must be used to print the text listing on printers that do not recognize  carriage con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       trol) 1334 W ( characters as part of the print line to control printing characteristics.  One such program,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       named) 1334 W ( FORPRINT, is available from the COSMIC library of NASA programs.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( listings can be very large, because of the volume of information provided.  For ex-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ample,) 1334 W ( the complete example of control cards \(shown above\) that will analyze the entire) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( program will generate a listing of approximately 100,000 lines of print.  While there) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       is) 1334 W ( no limit to the number of pages of print in the output listing by FXREF, there is a limit of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       10,000) 1334 W ( pages of print when the postscript output listing option is used.  When the postscript) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       output) 1334 W ( listing is split into two files of even and odd pages, the 10,000 page limit applies to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       each) 1334 W ( split file independently, giving a total of 20,000 pages.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       For) 1334 W ( text output, the output from FXREF is a disk file designed for printing on a standard) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       mainframe) 1334 W ( or minicomputer line printer for text output, or some of the many types of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       postscript) 1334 W ( printers if postscript output has been chosen; however, the text file can be printed) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       on) 1334 W ( any desired printer that accepts standard print files with carriage control characters in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       first) 1334 W ( character of each output record as described above.  Note that the output print file or) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       files) 1334 W ( are not submitted to the print queue, because many printers on a PC do not accept) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FORTRAN) 1334 W ( carriage control text print files.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       For) 1334 W ( postscript output, many postscript printers may require control parameters in addition to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( generated postscript printer file or files.  These control parameters must be supplied by) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( user.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( maximum listing record length is 121 characters for both text and postscript output files.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Standard) 1334 W ( FORTRAN carriage control characters are:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       Blank) 2362 W ( - Advance one line and print) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    0 - Advance two lines and print) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    1 - Advance to the top of the next page and print) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    + - Print without advancing to the next line) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( output listing file name is the one specified in record 2 in the control card file. Using the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       example) 1334 W ( in step 2 above and assuming no file name was specified on record 2, the output) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       print) 1334 W ( file will be named: TEST.PRT, and it will be placed in the current directory, not neces-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       sarily) 1334 W ( in the directory of the input file.  If a path name is specified on record 2 of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FXREF.CCD) 1334 W ( file, then the output listing file will be written to the directory specified.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( will make no modification of the path or file name in this case.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( the listing file name and its path in record 2 match already existing path and file names on) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( disk, the program will delete the existing file to insure only the newly created file will ex-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ist) 1334 W ( after completion of FXREF's execution.  The program will not notify the user that this) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       action) 1334 W ( has been taken.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       While) 1334 W ( nonstandard functions for date and time acquisition are provided by many FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       compilers,) 1334 W ( these functions can not be used with other compilers and operating systems.  The) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       specific) 1334 W ( functions used by the WATCOM compiler are discussed in the section) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       MODIFICATIONS) 1334 W (  FOR BIG ENDIAN COMPUTERS AND OTHER OPERATING SYSTEMS) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       at) 1334 W ( the end of this document.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

286 VLFD ( ) 69220 W (                                                                 -23-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( postscript output listings are requested, the file name in card 2 is modified as described in) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( execution section of this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( forces all statements to upper case characters, except for character constants, i. e.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       literals.) 1334 W (  Table 1 will contain the original FORTRAN source code unaltered, but tables 2) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       through) 1334 W ( 6 and tables 8 through 10 will show upper case alphabetic characters exclusively.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       Only) 1334 W ( Tables 1 and 7 will preserve any original lower case characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( listing consists of a series of tables, some of which may not occur in the analysis of a par-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ticular) 1334 W ( program or subprogram.  A program or subprogram lacking an entry for a table causes) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       that) 1334 W ( table to be omitted from the listing.  The tables produced are discussed below.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       No) 1334 W ( FORTRAN source code brought into a program or subprogram by use of an INCLUDE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       statement) 1334 W ( will have any of these imported statements printed in any of the tables produced) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       by) 1334 W ( FXREF.  Only the variable names explicitly used by the program or subprogram that is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       being) 1334 W ( analyzed, which also may be used in the FORTRAN source code from the INCLUDE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       statement) 1334 W ( file, will appear in the listing of all tables.  No provision is made in FXREF for in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       corporating) 1334 W ( the INCLUDE file's source code into the listing since the INCLUDE file may be) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       processed) 1334 W ( separately by FXREF.  The main use FXREF makes of the INCLUDE files contents) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       is) 1334 W ( to provide dimension, type, and length information for those variables used within the cur-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       rent) 1334 W ( module being analyzed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( listing for each program or subprogram is paginated starting at one rather than an entire) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       listing) 1334 W ( of multiple routines having a single sequence of page numbers from start to finish for) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       all) 1334 W ( routines processed in a single execution of FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       An) 1334 W ( unnecessary heading for a new page will be generated at the end of the listings when the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       final) 1334 W ( record on a FORTRAN source input file consists of blanks only.  To avoid wasting a page) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       of) 1334 W ( paper, insure this condition does not occur in the input file to be analyzed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( FXREF finds no entries for a table during its analysis, that table will be omitted.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( two logical constants, .TRUE. and .FALSE., are not cross referenced in any table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( global analysis is requested, any diagnostic messages will appear at the end of the printer) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       listing.) 1334 W (  Other diagnostic messages appear at the end of each routine's listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Some) 1334 W ( generic intrinsic FORTRAN library routine functions do not have a unique length defini-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       tion,) 1334 W ( because the length depends on the arguments of the library function at the time it is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       called.) 1334 W (  FXREF may be unable to determine the length for some of the generic functions used) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       in) 1334 W ( a program since the FORTRAN compiler determines the length characteristic during com-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       pilation.) 1334 W (  Also, a generic intrinsic function may be used with variables of more than a single) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       length) 1334 W ( characteristic.  Since FXREF does not perform as complete an analysis as a compiler, a) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       question) 1334 W ( mark will be placed in the length field to indicate it is unknown or can not be deter-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       mined.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       1.) 2362 W (  The first table is a listing of the original source code, which will show all upper and) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  lower) 1592 W ( case alphabetic characters in the original input source code, with an internal) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  statement) 1592 W ( number \(ISN\) assigned to identify each statement of the FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  source) 1592 W ( code.  Comment statements and blank statements are not assigned an ISN.) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  The) 1592 W ( header at the start of each printed page in the listing will show the input path) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  and) 1592 W ( file name where the FORTRAN source code being  analyzed exists.  This infor-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  mation) 1592 W ( is taken from the third record in the file FXREF.CCD.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

396 VLFD ( ) 69220 W (                                                                 -24-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    If no path is designated, none will appear in the heading.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Note that a program using an INCLUDE statement will not cause the FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  code) 1437 W ( requested by this statement to become part of the source code being analyzed) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  when) 1437 W ( the file can not be found. This will affect output tables 2 through 10.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Comment statements may follow the final END statement that terminates each) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  program) 1437 W ( or subprogram; although, this s not the best practice.  Once an END) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  statement) 1437 W ( occurs, any following input records are assumed to be part of the next) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  subprogram,) 1437 W ( unless an end of file follows the final comment statement following) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( END statement.  An END statement may not have a continuation statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  following) 1437 W ( it.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       2.) 2362 W (  The second table is a cross reference of all variable names occurring in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  FORTRAN) 1592 W ( code being analyzed.  For each variable, the name, its usage, its type) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  and) 1592 W ( length, and the ISNs where used in the program are listed.  No lower case) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  characters) 1592 W ( will be printed.  Blanks within a variable name will not be printed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  Headers) 1592 W ( at the top of each page of print show the codes used to designate both) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  usage) 1592 W ( and type.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When a variable name exceeds the FORTRAN 77 standard of six characters in) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  length,) 1437 W (  ISN lists are shifted to the right to accommodate a variable name length) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  of) 1437 W ( up to 32 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The usage code specified for each variable name may not show a correct code for a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  function) 1437 W ( subprogram when in fact the name may be a function defined in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  program.) 1437 W (  This can occur when a single module is being analyzed without the func-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  tion) 1437 W ( subprogram or an EXTERNAL definition present.  A function name resembles) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  a) 1437 W ( variable name and can not be distinguished from it when complete information) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  is) 1437 W ( not available.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Also, the usage code shown in this table may display a function subprogram name as) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  a) 1437 W ( subroutine, depending on the type of usage within the program unit even when) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  complete) 1437 W ( information is available.  If a function subprogram is invoked by using a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  CALL) 1437 W ( statement, rather than being used in the normal manner in an expression,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( usage coding will be set to an S since it has been treated as a SUBROUTINE.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  This) 1437 W ( situation arises because FORTRAN permits a FUNCTION subprogram) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  definition) 1437 W ( module to be used in a CALL statement, but does not allow a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  SUBROUTINE) 1437 W ( definition module to be used as a FUNCTION.  Thus, the usage) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  codes) 1437 W ( of this table will show the actual usage, rather than the definition type for) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  FUNCTION) 1437 W ( and SUBROUTINE subprograms.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The usage code A designates the variable name is used as an argument in a CALL) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  statement) 1437 W ( or as an argument in the input-output control list.  However, implied) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  DO) 1437 W ( loop control parameters' variable names are not coded A, since they are not ar-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  guments) 1437 W ( to be written or read by input-output statements. When the UNIT control) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  list) 1437 W ( argument specification is a variable name, that variable will not have a usage) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  code) 1437 W ( A assigned to it.  Any other type of control list variables names will have a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  usage) 1437 W ( code of A.  Neither intrinsic nor program functions' arguments that are ex-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  pressions) 1437 W ( of variable names will have those variables coded as arguments since) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( expression is the argument, not the individual arguments used in the expres-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  sion.) 1437 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -25-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When the type and length is printed as ' * ' \(without the apostrophes\), and the al-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  phabetic) 1437 W ( character O or the numeric character zero is used, the variable name) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  with) 1437 W ( the type and length codes of ' * ' has likely been misspelled.  A zero has been) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  used) 1437 W ( where an alphabetic O is intended, or an alphabetic O has been used where a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  zero) 1437 W ( is intended.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Invalid PARAMETER statements in an INCLUDE file may cause arguments of) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ENTRY,) 1437 W ( FUNCTION, and SUBROUTINE statements to be listed with the type) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  and) 1437 W ( length code of: ?*) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When the length specification *\(*\) appears, this indicates the variable name has an) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  inherited) 1437 W ( length from another subprogram module.  When global analysis is re-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  quested,) 1437 W ( a variable with an inherited length will not have its length checked for) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  errors) 1437 W ( if that variable is used as an argument in CALL, ENTRY, FUNCTION, or) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  SUBROUTINE) 1437 W ( statements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    However, a CALL statement argument variable with an integer range values will) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  have) 1437 W ( the length characteristic set to the range for the record written on unit 10.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  This) 1437 W ( allows argument length checking in routine ARGCHK to process the argu-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ment) 1437 W ( without creating superfluous error messages.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    STRUCTURE, RECORD, AND UNION statements have no usage type, but do have) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  a) 1437 W ( length definition.  The type and length are shown as: ?*nn, where nn is a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  numerical) 1437 W ( value.  Intrinsic FORTRAN library functions may have a type code but) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  no) 1437 W ( determined length when a generic form of the function name is used.  This case) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  is) 1437 W ( shown in the listing as: I*?, F*?, D*?, etc.  The actual length attribute of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  generic) 1437 W ( function is determined by it arguments, and, as previously described,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  FXREF) 1437 W ( does not make as complete an analysis as a compiler or Lint program.  At) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( time the intrinsic function is processed, the argument list is unknown.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    For all tables after the first, a heading is provided that shows the name of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  program) 1437 W ( or subprogram.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Intrinsic and FORTRAN library functions and subroutines will also have their) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  names) 1437 W ( listed as variables.  Intrinsic functions will have their usage code set to F.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  A) 1437 W ( type code and length designation is provided; however, if the length characteris-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  tic) 1437 W ( of a generic intrinsic function can not be determined, a question mark, ?, is) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  placed) 1437 W ( in the length specification field of this table and all  occurrences in other) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  tables) 1437 W ( where length is provided for that particular function name.  If used in a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  CALL) 1437 W ( statement, the names will be listed as a subroutine name with an S code for) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  usage,) 1437 W ( and no type or length code will be provided.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The subprogram name used in a CALL statement can not be identified as a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  FUNCTION) 1437 W ( or a SUBROUTINE by FXREF, so FXREF assumes they are all) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  SUBROUTINES) 1437 W ( by default unless the function names are specified in an) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  EXTERNAL) 1437 W ( statement which has a length definition in a type statement.  A vari-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  able) 1437 W ( name defined as a SUBROUTINE or ENTRY name can not have a type and) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  length) 1437 W ( designation.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1046 VLFD ( ) 69220 W (                                                                 -26-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The type and length designations shown for variable names are obtained from the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  DIMENSION,) 1437 W ( IMPLICIT, STRUCTURE, UNION, and data type statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  within) 1437 W ( the program or subprogram source code.  Standard FORTRAN data types) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  are) 1437 W ( assumed unless overridden by TYPE or IMPLICIT statements.  If an) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  INCLUDE) 1437 W ( statement is used by the program or subprogram being analyzed to in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  corporate) 1437 W ( data type statements such as INTEGER, REAL, CHARACTER,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  COMPLEX,) 1437 W ( etc., the type and length definitions will not be accurate in the listing) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  for) 1437 W ( this table when the file provided in the INCLUDE statement can not be found.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  For) 1437 W ( this case, included code will not be present when the program or subprogram) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  analysis) 1437 W ( is made.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Any variable names not used by a program or subprogram that are brought into the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  routine) 1437 W ( being analyzed by an INCLUDE statement will not be shown in this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    A variable name defined by a RECORD statement will always have its type code) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  shown) 1437 W ( as a question mark, ?.  Since a RECORD statement consists of a collection) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  of) 1437 W ( fields of data types defined in a STRUCTURE  statement, it can not have any) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  standard) 1437 W ( data type classification.  Similarly, STRUCTURE statement names will) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  possess) 1437 W ( a length characteristic but no type specification, and they will also have) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  their) 1437 W ( type shown as a question mark.  The type and length definitions of variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  names) 1437 W ( defined within a STRUCTURE statement are independent of any other) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  FORTRAN) 1437 W ( statement, and they do not assume their type and length characteris-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  tics) 1437 W ( from the default standards or from IMPLICIT definitions.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    UNION and MAP statements have no defined names, but any variable name occur-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ring) 1437 W ( within their range will have their usage code set appropriately.  The usage) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  code) 1437 W ( U will be printed in the listing for variable names used between UNION and) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  END) 1437 W ( UNION and MAP and END MAP statements.  No code is provided for MAP) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  because) 1437 W ( it can occur only within the range of the UNION and END UNION state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ments.) 1437 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Compound variable names used in a FORTRAN program resulting from) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  STRUCTURE,) 1437 W ( UNION, and RECORD statements are separated into their con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  stituent) 1437 W ( parts in this table and are not listed in their complete compound form.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  Since) 1437 W ( FORTRAN compilers separate the variable name definitions occurring) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  within) 1437 W ( a STRUCTURE statement from all other variables within a program, it is) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  possible) 1437 W ( to have multiple defined variable names that are identical in this table) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  with) 1437 W ( different type and length characteristics.  Variables with multiple definitions) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  of) 1437 W ( identical names will be shown on separate lines in this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The addressing operators %LOC, %REC, and %VAL are listed in this table as LOC,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  REC,) 1437 W ( and VAL with usage codes of INTEGER and REAL functions.  The function) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  %DESCR) 1437 W ( is processed as REAL*4.  It occurs in older VAX programs.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    In FORMAT statements, the syntax notation <...> includes constants and variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  names) 1437 W ( that are used by the program module where the FORMAT statement oc-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  curs.) 1437 W (  This syntax allows a computed value from the program module to set the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  field) 1437 W ( description.  Table two will include any variable names specified between) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  <...>) 1437 W ( in the table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    FORTRAN variable names fall into two general categories:) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (       1. Variable names that have defined type and length characteristics.  This) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        category) 1194 W ( includes all operational, typing, and declarative variables.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -27-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (       2. Variable names without any type or length.  This category includes only BLOCK) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        COMMON) 1194 W ( definition names, SUBROUTINE statement names, and ENTRY) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        STATEMENT) 1194 W ( names.  Names in this category are shown on a separate line) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        of) 1194 W ( print in the output listing.  Note that STRUCTURE and RECORD state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        ment) 1194 W ( use the same notation syntax as BLOCK COMMON, i.e., the variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                        name) 1194 W ( is encapsulated within slashes.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       3.) 2362 W ( The third table provides a list of the statement numbers, the ISN where defined,) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 and) 1685 W ( the ISNs where referenced.  In the special case where an input/output state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 ment,) 1685 W ( such as READ or WRITE, has an asterisk as the FORMAT reference) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 statement) 1685 W ( number, it is not shown in this table and is not cross referenced in any of) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 the) 1685 W ( tables by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       4.) 2362 W (  The fourth table lists all the integer input-output unit numbers and the ISNs where) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  they) 1592 W ( are defined followed by the variable name unit numbers and their ISNs' list) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  of) 1592 W ( use.  Integer values of input-output unit designations are not entered in the list) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  of) 1592 W ( integer constants in table 5, but the variable name units are also listed in table) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  2.) 1592 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When a variable name used as an input-output specification is used as a normal) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  arithmetic) 1437 W ( variable elsewhere within the same program module, the variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  specified) 1437 W ( as the unit will not have the statement's ISN listed in table 2.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    This table includes the console default unit designated by an asterisk, *, as the unit.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  The) 1437 W ( variable name input-output units are also listed in the variable name table,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  but) 1437 W ( this fourth table excludes all references not a unit in an input-output or file) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  manipulation) 1437 W ( statement.  No lower case characters will be printed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Variable names occurring as units may not be true input-output units.  When the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  READ) 1437 W ( and WRITE statements are used to convert one type of variable to another) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  internally) 1437 W ( without an actual read or write operation, which replaces the ENCODE) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  and) 1437 W ( DECODE statements, the unit parameter of READ and WRITE statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  will) 1437 W ( appear in this table even though they are not FORTRAN unit designations.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When a variable name exceeds eight characters in length, the FORTRAN 77 stan-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  dard) 1437 W ( is six characters, the ISN list is shifted to the right to accommodate the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  additional) 1437 W ( size.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Variable input-output units will be printed in upper case characters only.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  Compound) 1437 W ( variable names resulting from definitions using STRUCTURE,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  UNION,) 1437 W ( and RECORD statements used as a unit name will have only the final) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  name) 1437 W ( of the compound name appear in this table.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

2086 VLFD ( ) 69220 W (                                                                 -28-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       5.) 2362 W (  The fifth table lists all integer constant values in the source code from the lowest to) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  the) 1592 W ( largest magnitude order and the ISNs where used.  Integer constants that are) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  in) 1592 W ( FORMAT statements and integer input-output units are excluded.  But, all) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  length) 1592 W ( definitions occurring in TYPE statements such as INTEGER, REAL,) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  LOGICAL,) 1592 W ( CHARACTER, etc. are excluded from this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    In FORMAT statements, the syntax notation <...> includes constants and variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  names) 1437 W ( that are used by the program module where the FORMAT statement oc-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  curs.) 1437 W (  This syntax allows a computed value from the program module to set the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  field) 1437 W ( description.  Table five will include any constant values between <...> in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  table,) 1437 W ( but any other FORMAT constants are excluded.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    All integer constants defined by code brought into a program or subprogram by an) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  INCLUDE) 1437 W ( statement will not be listed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       6.) 2362 W (  The sixth table lists all floating constants in the source code and the ISNs where) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  used.) 1592 W (  In this table, floating constants are listed by value in increasing magnitude,) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  and) 1592 W ( no distinction is made between single and double precision in the printed out-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  put) 1592 W ( listing.  Double precision values are printed in single precision form.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Floating constants of double and single precision numbers may be listed as equal by) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  this) 1437 W ( table when in fact they are not.  If a double precision number differs only in) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( eighth through sixteenth digits from a single precision number, they are) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  treated) 1437 W ( as equal in this listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Depending upon the value of the mantissa of the floating point value, it may not be) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  printed) 1437 W ( exactly as the number occurs in the source FORTRAN code.  Some values) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  may) 1437 W ( show an extended series of digits which, when rounded, will then represent) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( original number.  For example, the number .9E0 occurring in a statement may) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  appear) 1437 W ( in this table as .8999999E000.  Rounding of values for printing in this) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  table) 1437 W ( may cause a number such as 999,999,999. to appear as .1E10; these results) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  are) 1437 W ( artifacts of the conversion process from text to numeric format or from binary) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  representation) 1437 W ( to text format and is somewhat dependent upon the library) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  routines) 1437 W ( of a particular FORTRAN compiler.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Double precision numbers that differ only in digits 8 through 16 will be printed) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  separately,) 1437 W ( even if they will have identical values when printed.  Two different) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  double) 1437 W ( precision numbers such as:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        .9999999999999995D0 or 1.0000000000000005D0) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    will be printed in the output listing as:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        .1000000E+001) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    on separate lines from numbers that are exactly 1.D0.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Any floating constants defined by code brought into a program or subprogram by an) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  INCLUDE) 1437 W ( statement will not be listed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1046 VLFD ( ) 69220 W (                                                                 -29-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       7.) 2362 W (  The seventh table lists all character constants, i.e. literals, in the source code and) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  the) 1592 W ( ISNs where used.  When a literal exceeds 80 characters, it is truncated to 80) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  characters) 1592 W ( for the listing.  If less than 80 characters in length, every literal is) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  shown) 1592 W ( with its encapsulating apostrophes or quotation marks.  All upper and) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  lower) 1592 W ( case characters will be printed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Hollerith fields used in CALL, DATA, and FORMAT statements will appear as) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  literals) 1437 W ( surrounded by apostrophes in this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Hexadecimal, octal, or binary numbers specified without apostrophes or quotation) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  marks) 1437 W ( in a DATA statement are listed as in this table exactly as they occur in the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  source) 1437 W ( program code, including leading or trailing B, O, Z, X, or x DATA type) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  specification.) 1437 W (  They are treated as literals not numbers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Character constants defined as binary, octal, or hexadecimal with the value sur-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  rounded) 1437 W ( by apostrophes or quotation marks will have the correct type indicator B,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  O,) 1437 W ( Z, X, or x DATA type specification preceding or following the character con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  stant.) 1437 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Some FORTRAN compilers use X instead of Z to indicate hexadecimal literal con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  stants) 1437 W ( and may also use the character C to indicate a literal string  encapsulated) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  in) 1437 W ( apostrophes or quotation marks is a null terminated string used by the C/C++) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  language.) 1437 W (  The null character is neither coded nor shown.  The C code to indicate a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  null) 1437 W ( terminated string may occur only as the final character of the literal after the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  last) 1437 W ( apostrophe or quotation mark.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The character constants are ordered by their length then collated in ascending se-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  quence.) 1437 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Any character constants defined by code brought into a program or subprogram by) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  an) 1437 W ( INCLUDE statement will not be listed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       8.) 2362 W (  The eighth table shows the size of each COMMON block and the relative address of) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  every) 1592 W ( variable belonging to the COMMON block.  If any variables are brought into) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  a) 1592 W ( COMMON block by an EQUIVALENCE statement, the relative address of each) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  equivalenced) 1592 W ( variable is shown.  No lower case characters will be printed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    If any variables declared to be equivalenced exist that are not included in a) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  COMMON) 1437 W ( block definition, these variables will not appear in this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    When a variable name exceeds six characters, the FORTRAN 77 standard, the num-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ber) 1437 W ( of variable names printed on a line will change to accommodate longer names.) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  This) 1437 W ( causes a single line of print to contain from two to four variables.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    The type and length designations shown for variable names are obtained from the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  DIMENSION,) 1437 W ( IMPLICIT, COMMON, EQUIVALENCE, RECORD, and data type) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  statements) 1437 W ( within the program or subprogram source code.  If an INCLUDE state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ment) 1437 W ( is used to incorporate data type statements such as INTEGER, REAL,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  CHARACTER,) 1437 W ( COMPLEX, etc., or DIMENSION, IMPLICIT, COMMON, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  EQUIVALENCE) 1437 W ( into a program or subprogram, the relative addresses, the type,) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  and) 1437 W ( the length values  will not be accurate in the listing when the INCLUDE in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  put) 1437 W ( file can not be found.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -30-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    A variable name defined in a RECORD statement will have a question mark, ?, as) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  the) 1437 W ( type designation since no standard FORTRAN type may be assigned to it, be-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  cause) 1437 W ( it is composed of a collection of types.  The usage code will show that the) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  name) 1437 W ( is a RECORD variable.  The length of a RECORD variable will be shown as) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  that) 1437 W ( of the STRUCTURE which is used as the template for the RECORD variable.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Also, variables in COMMON blocks that are dimensioned with a variable passed as) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  an) 1437 W ( argument to a SUBROUTINE, FUNCTION, or ENTRY subprogram will not) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  have) 1437 W ( the correct size for the COMMON block since the value of the passed argu-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  ment) 1437 W ( is unknown during compilation.  Its true value is known only during) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  execution) 1437 W ( of the program.  Each variable within such a common block will have its) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  relative) 1437 W ( address set to zero.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Variables equivalenced to a COMMON block variable may have an address greater) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  than) 1437 W ( the total size of the COMMON block when the COMMON block is dimen-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  sioned.) 1437 W (  Older FORTRAN programs often use this technique in SUBROUTINE) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  definitions.) 1437 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       9.) 2362 W (  The ninth table provides a listing of all subprograms called by the routine being) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  analyzed.) 1592 W (  No lower case characters will be printed.  This list is derived from) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  CALL,) 1592 W ( ENTRY, and FUNCTION statements.  All FORTRAN intrinsic functions) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  will) 1592 W ( also be listed in this table if they are used by the module.  This list is derived) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  from) 1592 W ( ENTRY, FUNCTION, and SUBROUTINE statements.  Any FORTRAN in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2776 W (                  trinsic) 1592 W ( functions used by the module will appear in this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Use of a FUNCTION subprogram name in a program or subprogram may not be) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  designated) 1437 W ( as one by FXREF since there is no way to distinguish between a sub-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  routine) 1437 W ( name and a function name when the CALL statement is used.  FXREF) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  makes) 1437 W ( no attempt to coordinate different routines to determine if a name is a vari-) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  able) 1437 W ( name, a function name, or a subroutine name.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (    Any FUNCTION or SUBROUTINE statements used by code brought into a program) 0 W 
130 VLFD ( ) 69220 W ( ) -2766 W (                  or) 1437 W ( subprogram using the INCLUDE statement will not be listed in the table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       10.) 2362 W ( The tenth table provides statistical counts of the number of occurrences of items in) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  each) 1746 W ( table.  The count of the number of subprograms includes those defined by the) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  program) 1746 W ( being analyzed.  Also, the counts exclude any occurrences of variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  names,) 1746 W ( statement numbers, constants, input-output, and subprogram names units) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  brought) 1746 W ( into the program module through use of the INCLUDE statement and not) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  used) 1746 W ( within the subprogram.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       11.) 2362 W ( If any errors are detected in the source FORTRAN statements, messages are) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  printed) 1746 W ( at the end of the tables for each individual routine.  If no errors are) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  detected,) 1746 W ( this table is omitted.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       12.) 2362 W ( If global analysis of the FORTRAN source code is requested, any messages gener-) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  ated) 1746 W (  will appear after all source code processing is complete.  Global messages) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  will) 1746 W ( always appear at the end of the entire listing of all program modules) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  processed) 1746 W ( in a single execution of FXREF, and it is assumed that all the source) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  code) 1746 W ( read for processing constitutes a single program.  Messages appearing as) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  global) 1746 W ( messages will be erroneous or superfluous when less than a complete) 0 W 
130 VLFD ( ) 69220 W ( ) -2768 W (                  program) 1746 W ( is processed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -31-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( table listings are designed to make maximum use of the printed page since listings can be) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       quite) 1334 W ( lengthy.  The maximum record length is 121 characters including the carriage control) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       character.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       When) 1334 W ( text output is chosen, vertical paper orientation \(portrait\) is used, 8.5 X 11 inch stan-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       dard) 1334 W ( paper is assumed when 80 lines per page have been chosen.  If 60 lines of text output is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       selected,) 1334 W ( 11 X 14 inch paper in horizontal paper orientation \(landscape\) is assumed.  Font) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       choice) 1334 W ( and margin settings are the default settings of the printer.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( postscript output is chosen, requesting 80 lines per page will use vertical paper orientation) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       \(portrait\),) 1334 W ( 8.5 x 11 inch standard paper with 1/4 top and bottom margins and 3/4 inch left and) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       1/2) 1334 W ( inch right margins.  Font size is 8 point.  For 60 lines per page, horizontal paper orienta-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       tion) 1334 W ( \(landscape\) with 1 inch top, bottom, left, and right margins and 10 a point font.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       Postscript) 1334 W ( files have the font set to courier-bold as standard.  This font is part of the basic 35) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       fonts) 1334 W ( of most postscript printers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       If) 1334 W ( other than 8 or 10 point text is preferred for the postscript listing, the FXREF must be) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       modified.) 1334 W (  The FORTRAN code setting the two values specifying the number of lines are lo-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       cated) 1334 W ( in the main routine, FXREF, at about line 720 of the program.  However, all of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       printing) 1334 W ( routines contain numerical integer constants that must be changed to match the new) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       choices.) 1334 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       When) 1334 W ( postscript output files are created, the font size is set in subroutine PSPRINT.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       Modification) 1334 W ( of these values will require recompilation of FXREF.) 0 W 
260 VLFD ( VIEWING) 69220 W ( THE FXREF TABLES OUTPUT TABLES ON THE MONITOR) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Both) 1334 W ( the text and Postscript output files may be viewed as text files using a full screen editor.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       However,) 1334 W ( the output file will not be displayed in normal form as it would on a printer.  If it is) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       desired) 1334 W ( to view the output file as it would appear on the printed page, select the option to) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       create) 1334 W ( Postscript output file and view it with Ghostscript which can display the listing as it) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       appears) 1334 W ( on paper.  The Ghostscript program is available from several internet sites without) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       charge.) 1334 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

250 VLFD ( FXREF) 68664 W ( PROGRAM INFORMATION:) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( is a large program with numerous subprograms.  The source code is approximately) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       2,400,000) 1334 W ( bytes in size with about 26,000 lines of FORTRAN 77 code. The program is well) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       documented) 1334 W ( with copious comment statements throughout.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( execution module, FXREF.EXE, requires about 3,000,000 characters of disk storage for) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       EcomStation) 1334 W ( Ver. 2.0.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W ( uses few FORTRAN library routines, but those used are part of any standard) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       FORTRAN) 1334 W ( library.  Special routines, that may or may not be part of some FORTRAN com-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       piler) 1334 W ( libraries, are written into the program to avoid any problems or inconsistences.  The) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       exceptions) 1334 W ( are:) 0 W 
260 VLFD ( ) 69220 W (         1. GROWHANDLES function discussed in the section describing the input-output units and) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (            their) 231 W ( record descriptions;) 0 W 
130 VLFD ( ) 69220 W (         2. GETDATE, a subroutine to obtain the current date;) 0 W 
130 VLFD ( ) 69220 W (         3. GETTIME, a subroutine to obtain the current time.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

546 VLFD ( ) 69220 W (                                                                 -32-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       The) 1334 W ( GETDAT and GETTIM subroutines are discussed in the program modification section at) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( end of this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Subroutines) 1334 W ( for conversion between alphabetic numeric characters and algebraic numeric) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       values) 1334 W ( are coded within the program by means of arithmetic computations or by using READ) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       and) 1334 W ( WRITE statements.  Arithmetic values required to accomplish this are based on the) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ASCII) 1334 W ( coding system and require change for other coding systems and operating systems.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       See) 1334 W ( the comments regarding modifications at the end of this documentation. The routines of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       the) 1334 W ( program are classified into several categories; these are:) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       1.) 1334 W ( The main program.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       2.) 1334 W ( Routines to read the source statements and write them on the listing file, and utility) 0 W 
130 VLFD ( ) 69220 W (          routines) 1212 W ( for the main program.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       3.) 1334 W ( Analysis routines of the FORTRAN statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       4.) 1334 W ( Utility routines for the analysis subprograms.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       5.) 1334 W ( Sort utilities to prepare data for the listing routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       6.) 1334 W ( Output file list creation routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       7.) 1334 W ( Utility routines for the list creation routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       8.) 1334 W ( Postscript output listing routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       9.) 1334 W ( Global analysis routines.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       A) 1334 W ( list of all the subprogram routines in FXREF are provided by the following table with a brief) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       description) 1334 W ( of its function.  Some routine names are ENTRY statements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       1.) 1334 W ( Main Program) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       FXREF) 1334 W (   Main program, controls overall execution) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       2.) 1334 W ( Input and output routines of FORTRAN source code and utility routines for the main) 0 W 
130 VLFD ( ) 69220 W (          program) 1212 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       CHKSWS) 1334 W ( ) 23480 W (        Insures) -2400 W ( bit switches in array CNAME are correct) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       COMPRS) 1334 W ( ) 24590 W (        Removes) -2400 W ( all blanks not part of a literal from a FORTRAN statement.  All) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        statement) 1720 W ( numbers and literals are removed from the FORTRAN statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        and) 1720 W ( saved in temporary disk files or arrays.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       GETRCD) 1334 W ( ) 25330 W (        Reads) -2400 W ( a FORTRAN source code record from an input file) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       PRCD) 1334 W (   ) -410 W (        Controls) 1720 W ( the synthesis of a FORTRAN statement including all continuation) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        records) 1720 W ( from an input unit.) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       RDSTMT) 1334 W ( ) 25140 W (        Reads) -2400 W ( the FORTRAN source code being analyzed) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SETUP) 1334 W (  ) 15715 W (        Initializes) -2400 W ( FXREF to start processing a new program or subprogram) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       SUBTBL) 1334 W ( ) 26990 W (        Creates) -2400 W ( a table of all ENTRY, FUNCTION, and SUBROUTINE subprogram) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        definitions) 1720 W ( in the program being processed) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       TESTR) 1334 W (  ) 16180 W (        Determines) -2400 W ( if a possible logical syntax error is a RECORD variable name) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       TFUNC) 1334 W (  ) 14790 W (        Sets) -2400 W ( a logical switch when a FUNCTION or SUBROUTINE statement occurs) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        while) 1720 W ( reading FORTRAN input source code from unit 5) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       WKCLOS) 1334 W ( ) 23660 W (        Closes) -2400 W ( and deletes all internal work files except global diagnostic work) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ) 1334 W ( ) -2774 W (       ) 2362 W (        files) 1720 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       WKOPEN) 1334 W ( ) 21810 W (        Opens) -2400 W ( all internal work files except global diagnostic work files) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       WRSTMT) 1334 W ( ) 23110 W (        Writes) -2400 W ( the source code with assigned ISNs in the output listing) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1046 VLFD ( ) 69220 W (                                                                 -33-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2778 W (       3.) 1334 W ( FORTRAN Statement Analysis Routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       STMT01) 1334 W (  analyzes ACCEPT) 0 W (                         STMT31) 1198 W (  analyzes IF) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT02) 1334 W (  analyzes ASSIGN) 0 W (                         STMT32) 1294 W (  analyzes IMPLICIT) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT04) 1334 W (  analyzes BACKSPACE) 0 W ( ) -2774 W (                      STMT33) 747 W (  analyzes INCLUDE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT05) 1334 W (  analyzes BLOCK DATA) 0 W ( ) -2761 W (                     STMT34) 711 W (  analyzes INQUIRE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT06) 1334 W (  analyzes BYTE) 0 W ( ) -2768 W (                           STMT35) 1424 W (  analyzes INTEGER) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT07) 1334 W (  analyzes CALL) 0 W ( ) -2776 W (                           STMT36) 1438 W (  analyzes INTRINSIC) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT08) 1334 W (  analyzes CHARACTER) 0 W ( ) -2770 W (                      STMT37) 680 W (  analyzes LOGICAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT09) 1334 W (  analyzes CLOSE) 0 W ( ) -2770 W (                          STMT38) 1315 W (  analyzes NAMELIST) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT10) 1334 W (  analyzes COMMON) 0 W ( ) -2770 W (                         STMT39) 894 W (  analyzes OPEN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT11) 1334 W (  analyzes COMPLEX) 0 W ( ) -2766 W (                        STMT41) 954 W (  analyzes PARAMETER) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT12) 1334 W (  analyzes CONTINUE) 0 W ( ) -2769 W (                       STMT42) 883 W (  analyzes PAUSE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT13) 1334 W (  analyzes DATA) 0 W ( ) -2779 W (                           STMT43) 1397 W (  analyzes PRINT) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT14) 1334 W (  analyzes DECODE & ENCODE) 0 W ( ) -2790 W (                STMT44) -430 W (  analyzes PROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT15) 1334 W (  analyzes DIMENSION & VIRTUAL) 0 W ( ) -2784 W (            STMT45) -1298 W (  analyzes READ) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT16) 1334 W (  analyzes DO) 0 W ( ) -2762 W (                             STMT46) 1568 W (  analyzes REAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT17) 1334 W (  analyzes DO WHILE) 0 W ( ) -2766 W (                       STMT47) 1012 W (  analyzes RECORD) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT18) 1334 W (  analyzes DOUBLE PRECISION) 0 W (               STMT48) -422 W (  analyzes RETURN) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT19) 1334 W (  analyzes ELSE) 0 W ( ) -2757 W (                           STMT49) 1451 W (  analyzes REWIND) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT21) 1334 W (  analyzes END) 0 W ( ) -2756 W (                            STMT50) 1452 W (  analyzes SAVE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT22) 1334 W (  analyzes END DO) 0 W ( ) -2775 W (                         STMT52) 1227 W (  analyzes STOP) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT23) 1334 W (  analyzes END FILE) 0 W ( ) -2773 W (                       STMT53) 1181 W (  analyzes STRUCTURE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT25) 1334 W (  analyzes ENTRY) 0 W ( ) -2762 W (                          STMT54) 1272 W (  analyzes SUBROUTINE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT26) 1334 W (  analyzes EQUIVALENCE) 0 W ( ) -2770 W (                    STMT55) 396 W (  analyzes TYPE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT27) 1334 W (  analyzes EXTERNAL) 0 W ( ) -2769 W (                       STMT56) 883 W (  analyzes UNION) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT29) 1334 W (  analyzes FUNCTION) 0 W ( ) -2771 W (                       STMT59) 907 W (  anlyzes  WHILE) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT30) 1334 W (  analyzes GO TO) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       Not) 1334 W ( every FORTRAN statement has its own analysis routine.  No routines named STMT03,) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       STMT20,) 1334 W ( STMT22, STMT24, STMT28, STMT40, STMT51, STMT57, STMT58 exist.  A num-) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       ber) 1334 W ( of statements are processed by one of the routines listed above.  As a result, the list of) 0 W 
130 VLFD ( ) 69220 W ( ) -2778 W (       statements) 1334 W ( processed by the program does not match the above table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2778 W (       4.) 1334 W ( Utility routines for the FORTRAN statement analysis routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGLST) 1801 W ( ) -2776 W (        Processes) 87 W ( the argument lists for CALL, ENTRY, FUNCTION, and) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CHKNME) 1801 W ( ) -2784 W (        Places) -347 W ( a variable name in a table of all names found in a program or sub-) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( being analyzed.  Checks to insure a name is inserted into the table) 0 W 
130 VLFD ( ) 69220 W (                         only) 1828 W ( once.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CIOLST) 1801 W ( ) -2778 W (        Processes) 481 W ( input-output and file operation statements' control lists, except) 0 W 
130 VLFD ( ) 69220 W (                         for) 1828 W ( the KEY argument.  This routine does not process input-output lists.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CSETUP) 1801 W ( ) -2778 W (        Processes) 41 W ( compound variable names) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CUNIT) 1801 W ( ) -2777 W (         Determines) 613 W ( the unit number or variable name unit designation of input-) 0 W 
130 VLFD ( ) 69220 W (                         output) 1828 W ( and file operation statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           DELCOM) 1801 W ( ) -2786 W (        Deletes) -443 W ( line comments within a statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EFARGS) 1801 W ( ) -2774 W (        Processes) 18 W ( FUNCTION names and arguments called from an expression.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EINCL) 1801 W ( ) -2774 W (         Processes) 716 W ( the end of file condition for an INCLUDE statement file.  This is) 0 W 
130 VLFD ( ) 69220 W (                         an) 1828 W ( ENTRY statement name.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -34-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVB) 1801 W ( ) -2776 W (        Creates) 112 W ( disk records for EQUIVALENCE group variable names used by) 0 W 
130 VLFD ( ) 69220 W (                         routine) 1828 W ( PEQUIV.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ESTRUC) 1801 W ( ) -2784 W (        Sets) -27 W ( the length characteristic of a STRUCTURE definition when the END) 0 W 
130 VLFD ( ) 69220 W (                         STRUCTURE) 1828 W ( statement terminates a STRUCTURE definition.  This an) 0 W 
130 VLFD ( ) 69220 W (                         ENTRY) 1828 W ( statement name, not a SUBROUTINE or FUNCTION.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EUNION) 1801 W (        Sets) -120 W ( the maximum length of a UNION definition when an END UNION) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( terminates a UNION statement.  This is an ENTRY statement) 0 W 
130 VLFD ( ) 69220 W (                         name.) 1828 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EVALU) 1801 W ( ) -2774 W (         Evaluates) 366 W ( a length or size specification specified as an expression for type,) 0 W 
130 VLFD ( ) 69220 W (                         DIMENSION,) 1828 W ( and PARAMETER statements) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EXPR) 1801 W (          Processes) 885 W ( arithmetic statements, arithmetic expressions, logical state-) 0 W 
130 VLFD ( ) 69220 W (                         ments,) 1828 W ( and logical expressions.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EXPRA) 1801 W (         Processes) 490 W ( arithmetic statements, arithmetic expressions, logical state-) 0 W 
130 VLFD ( ) 69220 W (                         ments,) 1828 W ( and logical expressions occurring in CALL statement arguments, or) 0 W 
130 VLFD ( ) 69220 W (                         as) 1828 W ( arguments of functions used within a program module.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FCHECK) 1801 W (        Places) -235 W ( a floating point number in the table of real values found in a) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( or subprogram.  Prevents a multiple entry of the number into the) 0 W 
130 VLFD ( ) 69220 W (                         table) 1828 W ( for the same statement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FMTSYN) 1801 W ( ) -2786 W (        Processes) -213 W ( FORMAT statements' syntax) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           INSERT) 1801 W ( ) -2778 W (        Places) 366 W ( an integer in the table of integer values found in a program or sub-) 0 W 
130 VLFD ( ) 69220 W (                         program.) 1828 W (  Prevents a multiple entry of the number into the table for the) 0 W 
130 VLFD ( ) 69220 W (                         same) 1828 W ( statement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ITABIN) 1801 W (        Inserts) 645 W ( an entry into a table of integer variable array that is singly dimen-) 0 W 
130 VLFD ( ) 69220 W (                         sioned.) 1828 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ITABSR) 1801 W ( ) -2776 W (        Performs) 482 W ( a binary search of a singly dimensioned integer array.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ITOC) 1801 W (          Converts) 1126 W ( an integer algebraic value to ASCII text form. Used to provide text) 0 W 
130 VLFD ( ) 69220 W (                         form) 1828 W ( of the length characteristic.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           KEY) 1801 W ( ) -2777 W (           Processes) 1107 W ( the KEY argument of input-output control lists.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           LOCERR) 1801 W ( ) -2782 W (        Writes) -96 W ( the message that a definition statement occurs after the first ex-) 0 W 
130 VLFD ( ) 69220 W (                         ecutable) 1828 W ( statement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           LOGERR) 1801 W ( ) -2782 W (        Creates) -166 W ( a FORMAT statement to write a message that a syntax error exists) 0 W 
130 VLFD ( ) 69220 W (                         in) 1828 W ( a logical operator.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           MOVREC) 1801 W ( ) -2784 W (        Places) -92 W ( the input source code into the analysis work area) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NUMBER) 1801 W (        Converts) -605 W ( an ASCII numerical field to either an integer arithmetic number) 0 W 
130 VLFD ( ) 69220 W (                         or) 1828 W ( to a floating point number.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PARAEV) 1801 W ( ) -2782 W (        Controls) -26 W ( evaluation of a PARAMETER variable defined as an arithmetic ex-) 0 W 
130 VLFD ( ) 69220 W (                         pression,) 1828 W ( length of a type statement defined as an expression, and) 0 W 
130 VLFD ( ) 69220 W (                         DIMENSION) 1828 W ( size defined as an expression.  Length of type statements and) 0 W 
130 VLFD ( ) 69220 W (                         size) 1828 W ( of DIMENSION statements that are expressions must be defined as) 0 W 
130 VLFD ( ) 69220 W (                         constants) 1828 W ( or variables defined in a PARAMETER statement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PIOLST) 1801 W (        Processes) 550 W ( input-output lists for input-output statements.  This routine does) 0 W 
130 VLFD ( ) 69220 W (                         not) 1828 W ( process input-output control lists.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PMAP) 1801 W (          Processes) 700 W ( the initialization of MAP statement) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRDWR) 1801 W (         Determines) 120 W ( arguments of input-output and file operation command lists) 0 W 
130 VLFD ( ) 69220 W (                         and) 1828 W ( calls the routine to process them.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           RBLANK) 1801 W ( ) -2784 W (        Removes) -212 W ( all blank characters from a FORTRAN source statement and gen-) 0 W 
130 VLFD ( ) 69220 W (                         erates) 1828 W ( synthetic C## variable names for argument lists in CALL, ENTRY,) 0 W 
130 VLFD ( ) 69220 W (                         FUNCTION,) 1828 W ( and SUBROUTINE statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           REMTAB) 1801 W ( ) -2786 W (        Determines) -303 W ( if horizontal tab characters exist in a record and removes them.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           SAPOSH) 1801 W (        Converts) -5 W ( hollerith fields to literals in all statements.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           SETTL) 1801 W ( ) -2776 W (         Sets) 694 W ( the type and length of a variable from the FORTRAN default values as) 0 W 
130 VLFD ( ) 69220 W (                         modified) 1828 W ( by an IMPLICIT statement.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -35-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           TABINS) 1801 W ( ) -2778 W (        Inserts) 366 W ( an entry into a table of a character variable array that is singly) 0 W 
130 VLFD ( ) 69220 W (                         dimensioned.) 1828 W (  This routine is also used by the printer listing creation) 0 W 
130 VLFD ( ) 69220 W (                         routines.) 1828 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           TABSRH) 1801 W (        Performs) -50 W ( a binary search of a singly dimensioned character array variable) 0 W 
130 VLFD ( ) 69220 W (                         using) 1828 W ( an arbitrary length field.  This routine is also used by the printer list-) 0 W 
130 VLFD ( ) 69220 W (                         ing) 1828 W ( creation routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           TBLINS) 1801 W (        Inserts) 435 W ( an entry into a character variable array that is singly dimensioned.) 0 W 
130 VLFD ( ) 69220 W (                         This) 1828 W ( routine is also used by the printer listing creation routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           TBLSRH) 1801 W ( ) -2774 W (        Performs) 18 W ( a binary search of a singly dimensioned character array.  This) 0 W 
130 VLFD ( ) 69220 W (                         routine) 1828 W ( is also used by the printer listing creation routines.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           TYPLST) 1801 W ( ) -2776 W (        Processes) 317 W ( the argument list of type statements, DIMENSION statement,) 0 W 
130 VLFD ( ) 69220 W (                         COMMON) 1828 W ( statement, BYTE statement, DATA statement, DOUBLE) 0 W 
130 VLFD ( ) 69220 W (                         PRECISION) 1828 W ( statement, DOUBLE COMPLEX statement, RECORD state-) 0 W 
130 VLFD ( ) 69220 W (                         ment,) 1828 W ( and STRUCTURE statement.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           VSETUP) 1801 W ( ) -2778 W (        Partitions) 41 W ( a compound variable name into its components and sets up the) 0 W 
130 VLFD ( ) 69220 W (                         parameters) 1828 W ( and work area for routine CHKNME.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           5.) 1801 W ( Sort routines to prepare for printing the listing) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CFIELD) 1801 W ( ) -2778 W (        Used) 366 W ( by DSORT to determine the result of comparing character, real,) 0 W 
130 VLFD ( ) 69220 W (                         double) 1828 W ( precision, integer, and complex type data fields.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CMFLD) 1801 W ( ) -2778 W (         Compares) 222 W ( fields in separate records according to their data type.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           DSORT) 1801 W ( ) -2773 W (         Sorts) 447 W ( an ASCII disk file.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           MFSORT) 1801 W (        Sorts) -190 W ( a singly dimensioned real array in memory.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           MISORT) 1801 W (        Sorts) 135 W ( a doubly dimensioned integer array in memory.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           MISRT1) 1801 W ( ) -2776 W (        Sorts) 412 W ( a singly dimensioned integer array in memory.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           MSORT) 1801 W ( ) -2777 W (         Sorts) 263 W ( a singly dimensioned character array in memory.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           All) 1801 W ( sort routines use the heap sort algorithm.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           6.) 1801 W ( Listing creation routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LIST) 1801 W (          Controls) 1329 W ( the creation of the tables for the listing.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PCOMM) 1801 W ( ) -2785 W (         Determines) -85 W ( relative addresses of variables in BLOCK COMMON defini-) 0 W 
130 VLFD ( ) 69220 W (                         tions) 1828 W ( and prints all common blocks found in the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PEQUIC) 1801 W ( ) -2778 W (        Combines) 181 W ( multiple defined EQUIVALENCE groups that must treated as a) 0 W 
130 VLFD ( ) 69220 W (                         single) 1828 W (  group because they are brought into a COMMON definition.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PEQUIV) 1801 W ( ) -2778 W (        Determines) 181 W ( relative addresses of variables brought into BLOCK COMMON) 0 W 
130 VLFD ( ) 69220 W (                         by) 1828 W ( EQUIVALENCE statements and prints all such variables with their) 0 W 
130 VLFD ( ) 69220 W (                         relative) 1828 W ( addresses.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTC) 1801 W (        Prints) 320 W ( the table of integer constants found in the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTF) 1801 W ( ) -2774 W (        Prints) 388 W ( the table of real constants found in the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTI) 1801 W ( ) -2774 W (        Prints) 713 W ( the integer input-output units found in the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTL) 1801 W ( ) -2774 W (        Prints) 388 W ( the literals found in the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTS) 1801 W (        Prints) 435 W ( the table of statement numbers found in the program being) 0 W 
130 VLFD ( ) 69220 W ( ) -2772 W (                          analyzed.) 1907 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRINTV) 1801 W (        Prints) 320 W ( the table of variable names, their usage, type and length, and ISNs) 0 W 
130 VLFD ( ) 69220 W (                         where) 1828 W ( used within the program being analyzed.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PRTVIO) 1801 W ( ) -2778 W (        Prints) 366 W ( input-output units specified as a variable name.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1046 VLFD ( ) 69220 W (                                                                 -36-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           7.) 1801 W ( Utility routines for the list creation routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NUPAGE) 1801 W ( ) -2786 W (        Creates) -328 W ( a new page format modification.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           VFMTC) 1801 W ( ) -2776 W (         Creates) 284 W ( a format statement to write table 2.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           8.) 1801 W ( Postscript listing creation routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CARCTL) 1801 W ( ) -2776 W (        Controls) 42 W ( the interpretation of carriage control characters occurring in  the) 0 W 
130 VLFD ( ) 69220 W (                         first) 1828 W ( column of each print record to position each record of print in the) 0 W 
130 VLFD ( ) 69220 W (                         postscript) 1828 W ( printed page.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           HEADPR) 1801 W (        Creates) -235 W ( a header when carriage control characters are not used.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NUMCNV) 1801 W ( ) -2782 W (        Converts) -371 W ( binary integer values to ASCII text to create FORMAT state-) 0 W 
130 VLFD ( ) 69220 W (                         ments) 1828 W (  for writing the postscript output listing.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PAGENM) 1801 W (        Creates) -490 W ( the postscript %%Page command to locate the start of each print) 0 W 
130 VLFD ( ) 69220 W (                         page) 1828 W ( of the output listing.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PSPRINT) 1801 W ( ) -2784 W (       Controls) -58 W ( the creation of the various forms of the postscript output file  list-) 0 W 
130 VLFD ( ) 69220 W (                         ing) 1828 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           REVPRT) 1801 W ( ) -2776 W (        Writes) 42 W ( two output postscript files; one containing the odd pages in  ascend-) 0 W 
130 VLFD ( ) 69220 W (                         ing) 1828 W ( order and another containing the even pages in reverse \(descending\)) 0 W 
130 VLFD ( ) 69220 W (                         order.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           9.) 1801 W ( Global analysis routines) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGCHK) 1801 W ( ) -2786 W (        Verfies) -373 W ( CALL, ENTRY, FUNCTION, and SUBROUTINE argument lists) 0 W 
130 VLFD ( ) 69220 W (                         have) 1828 W ( the correct number of arguments, the type and length characteristics) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( each argument is correct, if a subprogram is defined but not called, or if) 0 W 
130 VLFD ( ) 69220 W (                         a) 1828 W ( subprogram is called but not defined.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           COMCHK) 1801 W ( ) -2782 W (        Verifies) -651 W ( that the same COMMON block as identical length in all routines) 0 W 
130 VLFD ( ) 69220 W (                         that) 1828 W ( use it.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR1) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message a subprogram has been defined, but) 0 W 
130 VLFD ( ) 69220 W (                         it) 1828 W ( has not been called in a program.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR2) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message a subprogram has been called, but it) 0 W 
130 VLFD ( ) 69220 W (                         has) 1828 W ( not been defined.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR3) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message an argument of a CALL statement) 0 W 
130 VLFD ( ) 69220 W (                         has) 1828 W (  a data type different from the subprogram definition.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR4) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message an argument of a CALL statement) 0 W 
130 VLFD ( ) 69220 W (                         has) 1828 W (  a length characteristic different from the subprogram definition.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR5) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message that a FUNCTION subprogram is) 0 W 
130 VLFD ( ) 69220 W (                         called) 1828 W (  as a SUBROUTINE.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           GERR6) 1801 W ( ) -2779 W (         Creates) 531 W ( the global diagnostic message that the number of arguments in a) 0 W 
130 VLFD ( ) 69220 W (                         CALL) 1828 W ( statement is different from the subprogram definition number of ar-) 0 W 
130 VLFD ( ) 69220 W (                         guments.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Routines) 1801 W ( GERR2, GERR3, GERR4, GERR5, and GERR6 are ENTRY statements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Many) 1801 W ( messages may be created by the COMMON length verification when the erroneous) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           length) 1801 W ( is in the initial occurrence of the common block.  FXREF assumes the correct) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           length) 1801 W ( of a common block is its first occurrence in the program.  A single syntax error) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           may) 1801 W ( produce more than one error message.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

1046 VLFD ( ) 69220 W (                                                                 -37-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

528 VLFD ( ) 68664 W (         FXREF) 2264 W ( ABNORMAL HALTS DURING EXECUTION) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           When) 1801 W ( FXREF terminates execution without a normal completion message, error mes-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           sages) 1801 W ( may have been written on the error message file named: MESS.LST.  Examine this) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           file) 1801 W ( with an editor program to determine if any error messages exist.  Any error messages) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           on) 1801 W ( this file can usually identify the cause of the error in the FORTRAN source code caus-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ing) 1801 W ( FXREF's execution failure.) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

250 VLFD ( ERROR) 68664 W ( MESSAGES:) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2771 W (           Error) 1801 W ( messages will be written when errors occur that prevent correct analysis of a) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FORTRAN) 1801 W ( source statement.  The messages pertain to syntax errors, and no attempt is) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           made) 1801 W ( to determine other inconsistencies such as improper mixed mode arithmetic, im-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           proper) 1801 W ( uses of character and arithmetic variables, closed block if statements, closed do) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           statements,) 1801 W ( etc.  Detection of these errors are properly the task of a compiler, precom-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           piler,) 1801 W ( or LINT program.  Some messages may be advisory rather than an explicit error) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           particularly) 1801 W ( when INCLUDE statement files are used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Many) 1801 W ( messages may be created by COMMON length verification when the erroneous) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           length) 1801 W ( is in the initial occurrence of the common block.  FXREF assumes the correct) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           length) 1801 W ( of the common block is its first occurrence in the program.  A single error may) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           produce) 1801 W ( more than one error message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           When) 1801 W ( FORTRAN source code in brought into a program or a subprogram through use of) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( INCLUDE statement, no diagnostic messages will be written for the code of the in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           cluded) 1801 W ( file.  It is assumed the file specified in the INCLUDE statement will be analyzed) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           separately) 1801 W ( which will detect any syntax or other errors recognized by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( list of the error messages that may be generated by this program are listed below.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           When) 1801 W ( {number}, {name}, or {character} occur, these values are supplied by FXREF from) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           its) 1801 W ( analysis.  When multiple {name}, {number\), or {character} specifications occur, they) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           are) 1801 W ( designated as {name1}, {name2}, etc.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           If) 1801 W ( more than one hundred error messages are written on unit 0, the program will stop all) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           further) 1801 W ( source statement processing.  This limit is provided to prevent possible run away) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           conditions) 1801 W ( during execution.  The error message: STOP: MORE THAN 100 ERRORS will) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           appear) 1801 W ( on the monitor screen.  It is necessary to correct the situation causing the excess) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           errors) 1801 W ( before executing FXREF again with the same FORTRAN source program as input.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FORTRAN) 1801 W ( unit 0 will be saved, and it can be examined using an editor.  A complete list-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ing) 1801 W ( of tables will not be available.  This limit does not apply to global diagnostic) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           messages.) 1801 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORTRAN) 1801 W ( programs not adhering to the 1977 standard will usually cause many error) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           messages) 1801 W ( to be created by FXREF.  Some compiler may have non-standard syntax usages) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           that) 1801 W ( will cause messages or abnormal termination of execution.  In those cases, the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FORTRAN) 1801 W ( source code should be edited to remove or modify any illegal text not conform-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ing) 1801 W ( to FORTRAN 77 standards.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           If) 1801 W ( it is desired to increase the 100 error limit, the FORTRAN statement occurring after) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           statement) 1801 W ( number 16 in the MAIN routine:) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (          IF\(IREC0) 480 W ( .GT. 100\) STOP 'STOP: MORE THAN 100 ERRORS') 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

566 VLFD ( ) 69220 W (                                                                 -38-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           must) 1801 W ( be modified with what ever limit is desired and FXREF recompiled.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( produces two basic message types.  Type 1 does not contain ISN numbers, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           type) 1801 W ( 2 does contain ISN numbers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W  1 AtrOn
(Messages without the ISN specified) 0 W  1 AtrOff

260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( DUPLICATE SUBPROGRAM DEFINITION OCCURS, NAMED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( ENTRY, FUNCTION, or SUBROUTINE definition has a duplicate) 0 W 
130 VLFD ( ) 69220 W (                         name.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( SUBROUTINE MUST HAVE AN ISN OF 1) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( SUBROUTINE statement must be the first non-comment statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COLUMN) 1801 W ( 1 OF A FORTRAN CHARACTER IS AN ILLEGAL CHARACTER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           {statement}) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Column) 1848 W ( one of a FORTRAN record from unit 5, the FORTRAN source code) 0 W 
130 VLFD ( ) 69220 W (                         input) 1828 W ( file, contains a character other than the following: c, C, d, D, x, X, *,) 0 W 
130 VLFD ( ) 69220 W (                         #,) 1828 W ( $, or blank; or, the record contains text that can not be identified as a) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W ( statement.  72 characters are shown for this form of the mes-) 0 W 
130 VLFD ( ) 69220 W (                         sage.) 1828 W (  Occurrence of characters not part of the allowable FORTRAN) 0 W 
130 VLFD ( ) 69220 W (                         character) 1828 W ( set will also cause this message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Some) 1848 W ( older FORTRAN programs have compiler or operating system com-) 0 W 
130 VLFD ( ) 69220 W (                         mands) 1828 W ( that precede FORTRAN code.  When FORTRAN code is found, the) 0 W 
130 VLFD ( ) 69220 W (                         END) 1828 W ( STATEMENT MISSING  message is issued as well, even though the) 0 W 
130 VLFD ( ) 69220 W (                         END) 1828 W ( statement does exist.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COLUMN) 1801 W ( 1 OF A FORTRAN RECORD IS A FORM FEED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( form feed occurs in a FORTRAN input record.  This usually occur when a) 0 W 
130 VLFD ( ) 69220 W (                         file) 1828 W ( of FORTRAN code used as input from unit 5 is a listing for printing.) 0 W 
130 VLFD ( ) 69220 W (                         FXREF) 1828 W ( accepts FORTRAN source code from printer listings in some cases.) 0 W 
130 VLFD ( ) 69220 W (                         Any) 1828 W ( form feed in column one will cause this message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COMMON) 1801 W ( BLOCK /{name1}/ IN ROUTINE {name2} HAS A LENGTH OF \(number1},) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           BUT) 1801 W ( HAS A LENGTH OF {number2}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( block common {name1} has a different length of {number1} in sub-) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( {name2}.  This is a global message.  FXREF assumes that the) 0 W 
130 VLFD ( ) 69220 W (                         initial) 1828 W ( occurrence of {name1} is the correct length; consequently, if the) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( error exists in the first occurrence, all other occurrences are con-) 0 W 
130 VLFD ( ) 69220 W (                         sidered) 1828 W ( to have an erroneous length.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( CARD ERROR: COLUMN 4 ERROR FOR POSTSCRIPT OUTPUT.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           COLUMN) 1801 W ( 4 IS SET TO 1.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Inconsistent) 1848 W ( parameters exist in column 4 of control card 1.  Column2 is set) 0 W 
130 VLFD ( ) 69220 W (                         to) 1828 W ( F; column 4 is set to 1.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( CARD ERROR: COLUMN 4 ERROR FOR TEXT OUTPUT.  COLUMN 4 IS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           SET) 1801 W ( TO 1.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Inconsistent) 1848 W ( parameters exist in column 4 of control card 1.  Column2 is set) 0 W 
130 VLFD ( ) 69220 W (                         to) 1828 W ( F; column 4 is set to 1.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -39-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           DEFINED) 1801 W ( SUBPROGRAM {name} IS NOT CALLED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( subprogram named {name} is defined but never called within the) 0 W 
130 VLFD ( ) 69220 W (                         program.) 1828 W (  This may be a local or global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              When) 1848 W ( subprogram {name} is used as an argument in OS/2-ECD, this mes-) 0 W 
130 VLFD ( ) 69220 W (                         sage) 1828 W ( may appear if it is not used as a function call or the subprogram name) 0 W 
130 VLFD ( ) 69220 W (                         is) 1828 W ( a CALL statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           END) 1801 W ( STATEMENT MISSING) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FXREF) 1848 W ( has detected that an END statement does not occur where one is ex-) 0 W 
130 VLFD ( ) 69220 W (                         pected.) 1828 W (  In certain cases, FXREF will synthesize an END statement which) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( appear in the output listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FILE) 1801 W ( NOT FOUND: {file name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( file name specified as FORTRAN source code input in the control cards) 0 W 
130 VLFD ( ) 69220 W (                         \(file:) 1828 W ( FXREF.CCD\) can not be found.  FXREF terminates execution, and) 0 W 
130 VLFD ( ) 69220 W (                         this) 1828 W ( message appears on the monitor screen when FXREF is run in a) 0 W 
130 VLFD ( ) 69220 W (                         foreground) 1828 W ( session.  The message is discarded when FXREF runs in a back-) 0 W 
130 VLFD ( ) 69220 W (                         ground) 1828 W ( session.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( CAN NOT PROCESS FILE NAME) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( synthesized file name of an INCLUDE statement exceeds 80 charac-) 0 W 
130 VLFD ( ) 69220 W (                         ters;) 1828 W ( a message and the INCLUDE statement precedes this message on the) 0 W 
130 VLFD ( ) 69220 W (                         monitor) 1828 W ( screen.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( {name}, COMPARE FIELD LENGTH GREATER THAN RECORD LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Subroutine) 1848 W ( TBLSRH, TABSRH, or ITABSR contains a field length that ex-) 0 W 
130 VLFD ( ) 69220 W (                         ceeds) 1828 W ( the record length.  This message should never appear and indicates) 0 W 
130 VLFD ( ) 69220 W (                         some) 1828 W ( kind of hardware failure.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( {name}, LENGTH OF COMPARE FIELDS UNEQUAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Subroutine) 1848 W ( TBLSRH, TABSRH, or ITABSR is attempting to compare two) 0 W 
130 VLFD ( ) 69220 W (                         fields) 1828 W ( of unequal length.  This message should never appear and indicates) 0 W 
130 VLFD ( ) 69220 W (                         some) 1828 W ( kind of hardware failure.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INCLUDE) 1801 W ( FILE NOT FOUND) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           {statement}) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INCLUDE statement {statement} specifies a file that can not be found.) 0 W 
130 VLFD ( ) 69220 W (                         Make) 1828 W ( the statement a comment statement, delete the statement from the) 0 W 
130 VLFD ( ) 69220 W (                         source) 1828 W ( code, or make the file available to FXREF.  FXREF will stop execu-) 0 W 
130 VLFD ( ) 69220 W (                         tion.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INPUT) 1801 W ( AND OUTPUT FILES ARE IDENTICAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( output listing file and one of the input FORTRAN source file names are) 0 W 
130 VLFD ( ) 69220 W (                         identical.) 1828 W (  The program will stop execution.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INPUT) 1801 W ( FILE EMPTY) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( first record of file FXREF.CCD is blank.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -40-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           INPUT) 1801 W ( RECORD LENGTH GREATER THAN 256 OR ZERO) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( input record of the output listing is zero or greater than 256.  This) 0 W 
130 VLFD ( ) 69220 W (                         should) 1828 W ( never occur.  It would occur only if the output listing is a postscript) 0 W 
130 VLFD ( ) 69220 W (                         listing.) 1828 W (  It indicates that one of the table creation routines' records has been) 0 W 
130 VLFD ( ) 69220 W (                         damaged.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 10 PARENTHESES IN A PARAMETER STATEMENT EXPRESSION) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( arithmetic expression defining a PARAMETER variable contains more) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( 10 sets of matching parentheses.  FXREF permits only 10 general) 0 W 
130 VLFD ( ) 69220 W (                         work) 1828 W ( variables to evaluate the expression.  The value assigned to the vari-) 0 W 
130 VLFD ( ) 69220 W (                         able) 1828 W ( will be incorrect.  The output listing will not have the correct when the) 0 W 
130 VLFD ( ) 69220 W (                         PARAMETER) 1828 W ( variable is used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 SUBPROGRAMS EXIST) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( single program unit uses more than 1000 ENTRY, FUNCTION, and) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( definitions.  This is a global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 10,000 EVEN NUMBERED PAGES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( postscript output listing exceeds 10,000 even numbered pages.  This) 0 W 
130 VLFD ( ) 69220 W (                         message) 1828 W ( may appear when a postscript output listing is split into two files,) 0 W 
130 VLFD ( ) 69220 W (                         an) 1828 W ( odd page file and an even page file.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 10,000 NUMBER PAGES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 10,000 pages occur in the postscript output file when a single) 0 W 
130 VLFD ( ) 69220 W (                         postscript) 1828 W ( output file has been requested in FXREF.CCD.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 200 COMMON DEFINITIONS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 200 COMMON blocks defined.  The listing will be incomplete.) 0 W 
130 VLFD ( ) 69220 W (                         COMMON) 1828 W ( definitions brought into the program or subprogram by an) 0 W 
130 VLFD ( ) 69220 W (                         INCLUDE) 1828 W ( statement are counted for this limit.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 200 EQUIVALENCE GROUPS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 200 groups of variables that are made equivalent to each other) 0 W 
130 VLFD ( ) 69220 W (                         exist) 1828 W ( in a single EQUIVALENCE statement.  The remaining groups will) 0 W 
130 VLFD ( ) 69220 W (                         not) 1828 W ( be processed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 INTEGER PARAMETER DEFINITIONS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( number of integer PARAMETER definitions exceeds 4000.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 SUBPROGRAMS EXIST) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( single program uses more than 4000 ENTRY, FUNCTION, and) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( definitions.  This is a global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 VARIABLE NAMES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( single subprogram uses more than 4000 variable names.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 8 CHARACTERS IN FILE NAME) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( base file name of the output listing file contains more than eight) 0 W 
130 VLFD ( ) 69220 W (                         characters.) 1828 W (  FXREF stops execution.  This message occurs only if the out-) 0 W 
130 VLFD ( ) 69220 W (                         put) 1828 W ( listing file is to be a postscript file. However, it should never appear.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -41-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN {number} CONTINUATION RECORDS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FORTRAN) 1848 W ( continuation statements, indicated by a non-blank character in) 0 W 
130 VLFD ( ) 69220 W (                         character) 1828 W ( 6 of a statement or an ampersand, &, in column 1, exceed the al-) 0 W 
130 VLFD ( ) 69220 W (                         lowed) 1828 W ( limit.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MULTIPLE) 1801 W ( FUNCTION LENGTHS ARE DEFINED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FUNCTION statement has more than one length characteristic defined) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( C0NTROL CARD FILE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( FXREF.CCD file can not be found.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( FILE SPECIFIED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              No) 1848 W ( input file name is provided in the FXREF.CCD file that specifies where) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( FORTRAN source code to be analyzed may be found.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A FORTRAN STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           \(statement\)) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Column) 1848 W ( one of an input record from unit 5, the FORTRAN source code input) 0 W 
130 VLFD ( ) 69220 W (                         file,) 1828 W ( contains a character other than one of the following: C, c, *, #, $, !, or) 0 W 
130 VLFD ( ) 69220 W (                         blank;) 1828 W ( or the record contains text that can not be identified as a FORTRAN) 0 W 
130 VLFD ( ) 69220 W (                         statement.) 1828 W (  72 characters are shown for this form of the message.) 0 W 
130 VLFD ( ) 69220 W (                         Occurrence) 1828 W ( of characters that are not part of the allowable FORTRAN) 0 W 
130 VLFD ( ) 69220 W (                         character) 1828 W ( set will also cause this message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           \(statement\):) 1801 W ( NOT A FORTRAN STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Test) 1848 W ( has been identified as not a FORTRAN statement, and the internal) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( number \(ISN\) is not available.  Only the initial 20 characters are) 0 W 
130 VLFD ( ) 69220 W (                         shown.) 1828 W (  Another form of this message contains the internal statement num-) 0 W 
130 VLFD ( ) 69220 W (                         ber) 1828 W ( \(ISN\).  See the further description in the next section.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STOP:) 1801 W ( MORE THAN 100 ERRORS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 100 error messages have been written.  The program will stop all) 0 W 
130 VLFD ( ) 69220 W (                         processing) 1828 W ( of further FORTRAN source code records.  Only a partial listing) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( be available.  FORTRAN unit 0 will contain the 100 error messages.) 0 W 
130 VLFD ( ) 69220 W (                         An) 1828 W ( editor must be used to examine this file.  The file name is: MESS.LST.) 0 W 
130 VLFD ( ) 69220 W (                         When) 1828 W ( FXREF is restarted, the file will be automatically deleted if it exists.) 0 W 
130 VLFD ( ) 69220 W (                         It) 1828 W ( will be in the same directory as FXREF.EXE.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBPROGRAM) 1801 W ( NAME TABLE FULL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FXREF) 1848 W ( a table of all ENTRY, FUNCTION, and SUBROUTINE subprogram) 0 W 
130 VLFD ( ) 69220 W (                         names) 1828 W ( for the input file on unit 5.  The maximum allowed is 1000.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           TABLE) 1801 W ( FULL {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( table maintained by subroutine TABINS or TBLINS is full.  No further) 0 W 
130 VLFD ( ) 69220 W (                         entries) 1828 W ( are made, and the output tables will be incomplete.  {name} will be) 0 W 
130 VLFD ( ) 69220 W (                         either) 1828 W ( TABINS or TBLINS.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNIT) 1801 W ( 5 INPUT FILE NOT FOUND) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              ) 1848 W ( The file name specified on control card records 3 - 12 from unit 1 as the) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W ( input source code can not be found.  Correct the file name) 0 W 
130 VLFD ( ) 69220 W (                         before) 1828 W ( rerunning FXREF.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -42-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( DEFINED IN MORE THAN ONE COMMON BLOCK: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} is defined in multiple COMMON blocks.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W  1 AtrOn
(Messages with the ISN specified) 0 W  1 AtrOff

260 VLFD ( ) 69220 W ( ) -2771 W (           All) 1801 W ( of this class of messages are of the form:) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              ISN:) 1848 W ( {numeric value} [message]) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Only) 1801 W ( the [message] portion is shown in this table.  The value of {numeric value} will be) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( internal statement number \(ISN\) of the FORTRAN statement containing the error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( DIGIT MUST FOLLOW AN ASTERISK) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( type statement, such as INTEGER, REAL, etc., does not have a digit) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( specification after an asterisk.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( DUPLICATE SUBPROGRAM DEFINITION OCCURS, NAMED: {name:}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Two) 1848 W ( or more ENTRY, FUNCTION, or SUBROUTINE subprograms have) 0 W 
130 VLFD ( ) 69220 W (                         been) 1828 W ( defined with identical names.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( FUNCTION STATEMENT MUST HAVE AN ISN OF 1) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FUNCTION statement must be the first non-executable statement in a) 0 W 
130 VLFD ( ) 69220 W (                         subprogram.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( NUMERICAL FIELD CONTAINS AN ALPHABETIC CHARACTER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( required numerical field in an input-output command list contains an al-) 0 W 
130 VLFD ( ) 69220 W (                         phabetic) 1828 W ( character.  This message will not appear for real values expressed) 0 W 
130 VLFD ( ) 69220 W (                         in) 1828 W ( scientific notation.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( PARAMETER IN A CONTROL LIST IS INVALID {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( input-output statement parameter control list {name} is invalid.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( PROGRAM STATEMENT IS NOT THE FIRST STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( PROGRAM statement occurs that is not the first executable statement in) 0 W 
130 VLFD ( ) 69220 W (                         a) 1828 W ( program.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           A) 1801 W ( SUBROUTINE STATEMENT MUST HAVE AN ISN OF 1) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( SUBROUTINE statement must be the first non-comment statement in a) 0 W 
130 VLFD ( ) 69220 W (                         subprogram.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           AN) 1801 W ( INTRINSIC FUNCTION SPECIFICATION IS INVALID) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( intrinsic function specification is not valid.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( LENGTH EXCEEDS 80 CHARACTERS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of a CALL statement exceeds 80 characters, the maximum al-) 0 W 
130 VLFD ( ) 69220 W (                         lowed) 1828 W ( by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; A SUBSCRIPT MUST BE AN INTEGER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of a CALL statement contains a subscripted variable whose) 0 W 
130 VLFD ( ) 69220 W (                         subscript) 1828 W ( can not be evaluated as an integer.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE CONCANTENATED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EXPRESSION) 1801 W ( ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( ENTRY, FUNCTION,  or SUBROUTINE statement has a concatenated) 0 W 
130 VLFD ( ) 69220 W (                         character) 1828 W ( expression argument which is not allowed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

266 VLFD ( ) 69220 W (                                                                 -43-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE CONSTANT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENTS) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION, or, SUBROUTINE statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a numeric or logical constant which is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE LITERAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENTS) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION, or SUBROUTINE statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a literal which is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE MATHEMATICAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           EXPRESSION) 1801 W ( ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION, or SUBPROGRAM statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a mathematical expression which is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE SUBSCRIPTED OR) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CHARACTER) 1801 W ( RANGE ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION,  or SUBROUTINE statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a variable with either subscripts or character range specifications) 0 W 
130 VLFD ( ) 69220 W (                         which) 1828 W ( is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NUMBER) 1801 W ( ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION, or, SUBROUTINE statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a statement number which is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}; ONLY CALL STATEMENTS MAY HAVE SUBSCRIPTED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           RANGE) 1801 W ( SPECIFICATION ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of an ENTRY, FUNCTION, or, SUBROUTINE statement con-) 0 W 
130 VLFD ( ) 69220 W (                         tains) 1828 W ( a variable with either subscripts or character range specifications) 0 W 
130 VLFD ( ) 69220 W (                         which) 1828 W ( is not allowed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ARITHMETIC) 1801 W ( IF LACKS THREE STATEMENT NUMBERS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( arithmetic IF statement has more than or less than three statement) 0 W 
130 VLFD ( ) 69220 W (                         numbers.) 1828 W (  None of the arguments will be processed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ASTERISK) 1801 W ( IS ILLEGAL IN THIS STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( asterisk is not allowed in either a DOUBLE COMPLEX or DOUBLE) 0 W 
130 VLFD ( ) 69220 W (                         PRECISION) 1828 W ( statements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           BACKSPACE) 1801 W ( CONTROL ARGUMENT IS A VARIABLE NAME) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control argument for the BACKSPACE statement may not be a variable) 0 W 
130 VLFD ( ) 69220 W (                         name.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           BACKSPACE) 1801 W ( CONTROL ARGUMENTS LACK A LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           BACKSPACE) 1801 W ( CONTROL ARGUMENTS LACK A RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control argument for the BACKSPACE statement lacks a left or right) 0 W 
130 VLFD ( ) 69220 W (                         parenthesis.) 1828 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -44-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           BLOCK) 1801 W ( COMMON NAME NOT DEFINED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( block common name can not be found while attempting to determine its) 0 W 
130 VLFD ( ) 69220 W (                         total) 1828 W ( length.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           BYTE) 1801 W ( VARIABLE HAS ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable defined as type BYTE has an illegal length.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( ARGUMENT DIMENSIONED VARIABLE SUBSCRIPT CONTAINS A) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FLOATING) 1801 W ( OR REAL NUMBER {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument of a CALL statement uses a dimensioned variable that has a) 0 W 
130 VLFD ( ) 69220 W (                         subscript) 1828 W ( specified as an expression, and the expression contains a numeric) 0 W 
130 VLFD ( ) 69220 W (                         constant) 1828 W ( that is a floating or real number {number}.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( ARGUMENT IS NOT DEFINED AS AN EXTERNAL STATEMENT: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( CALL statement has a subprogram name {name} used as an argument,) 0 W 
130 VLFD ( ) 69220 W (                         but) 1828 W ( the subprogram name is not defined as an EXTERNAL subprogram.) 0 W 
130 VLFD ( ) 69220 W (                         This) 1828 W ( message is usually a warning message if the subprogram is part of the) 0 W 
130 VLFD ( ) 69220 W (                         current) 1828 W ( program being analyzed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( ARGUMENT LACKS A LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( ARGUMENT LACKS A RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( argument of a CALL statement is lacking a left or right parenthesis) 0 W 
130 VLFD ( ) 69220 W (                         where) 1828 W ( one is expected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( ARGUMENT DOES NOT MATCH ITS DIMENSION: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( dimensioned variable {name} used as an argument in a CALL state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( has too few or too many subscripts specified.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( LACKS A LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CALL) 1801 W ( LACKS A RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( CALL statement is lacking a left or right parenthesis.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CALLED) 1801 W ( ARGUMENT VARIABLE IS NOT DEFINED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument in a CALL statement uses a variable name {name} that is not) 0 W 
130 VLFD ( ) 69220 W (                         defined) 1828 W ( prior to its use as a CALL statement argument.  This message is) 0 W 
130 VLFD ( ) 69220 W (                         written) 1828 W ( if a subprogram name is used as an argument and no EXTERNAL) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( statement declares it as an external subprogram.  When the) 0 W 
130 VLFD ( ) 69220 W (                         variable) 1828 W ( returns a value from the called subprogram and used later in the) 0 W 
130 VLFD ( ) 69220 W (                         calling) 1828 W ( subprogram, it is not treated as a subprogram name.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CAN) 1801 W ( NOT DIVIDE A DIMENSION SUBSCRIPT BY ZERO: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( dimension size defined by an expression contains a subscript variable) 0 W 
130 VLFD ( ) 69220 W (                         that) 1828 W ( has a value of zero.  This is caused by attempting to evaluate 0/0 or) 0 W 
130 VLFD ( ) 69220 W (                         A/0.) 1828 W (  The result value will be set to a default value.  The condition may be) 0 W 
130 VLFD ( ) 69220 W (                         caused) 1828 W ( by failing to correctly define PARAMETER statement variable) 0 W 
130 VLFD ( ) 69220 W (                         values.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CHARACTER) 1801 W ( VARIABLE HAS AN ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable defined as type character has a length of zero or the provided) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( exceeds 7 digits.  The length is set to four to continue processing.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -45-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           COLUMNS) 1801 W ( 1-5 MUST BE BLANK IN CONTINUATION RECORDS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( record read from the FORTRAN source code input unit is a continuation) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( a FORTRAN statement, and columns 1 through 5 are not blank.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COMMON) 1801 W ( STATEMENT HAS ILLEGAL SYNTAX: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( COMMON statement contains a syntax error.  {text} shows nine charac-) 0 W 
130 VLFD ( ) 69220 W (                         ters) 1828 W ( that contain the error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COMMON) 1801 W ( VARIABLE NOT FOUND: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable in common does not exist in the master name table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           COMPLEX) 1801 W ( VARIABLE HAS ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( complex data type definition has an incorrect length specification.  The) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( is set to eight to continue processing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONCANTENATED) 1801 W ( VARIABLE IS NOT DEFINED AS A CHARACTER TYPE IN) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENT) 1801 W ( {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable has been used in a character concatenation expression, but its) 0 W 
130 VLFD ( ) 69220 W (                         type) 1828 W ( is not defined as character.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( LIST ARGUMENT VALUE MUST BE A CHARACTER VARIABLE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control list argument in a data manipulation statement is not a character) 0 W 
130 VLFD ( ) 69220 W (                         when) 1828 W ( required.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( LIST ARGUMENT VALUE MUST BE A LOGICAL VARIABLE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control list argument in a data manipulation statement is not a logical) 0 W 
130 VLFD ( ) 69220 W (                         variable) 1828 W ( when required.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( LIST ARGUMENT VALUE MUST BE A STATEMENT NUMBER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control list argument in a data manipulation statement is not a state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( number when required.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           CONTROL) 1801 W ( LIST ARGUMENT VALUE MUST BE AN INTEGER VARIABLE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( control list argument in a data manipulation statement is not an  integer) 0 W 
130 VLFD ( ) 69220 W (                         variable) 1828 W ( when required.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DATA) 1801 W ( SPECIFICATION LACKS BALANCED PARENTHESES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement that has a DATA specification lacks matching left and right) 0 W 
130 VLFD ( ) 69220 W (                         slashes.) 1828 W (  This message may occur when hollerith field definitions contain-) 0 W 
130 VLFD ( ) 69220 W (                         ing) 1828 W ( a slash exist.  In this case, it is a warning message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DATA) 1801 W ( STATEMENT HAS ILLEGAL SYNTAX: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( data specification within encapsulating slashes has a syntax error.  {text}) 0 W 
130 VLFD ( ) 69220 W (                         shows) 1828 W ( nine characters, and character 5 is the location of the error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DIMENSION) 1801 W ( SPECIFICATION IS REAL: {real number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( value of a dimension specification is a real value rather than an integer) 0 W 
130 VLFD ( ) 69220 W (                         value.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DIMENSION) 1801 W ( SPECIFICATION LACKS BALANCED PARENTHESES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement that has a DIMENSION specification lacks matching left and) 0 W 
130 VLFD ( ) 69220 W (                         right) 1828 W ( parentheses.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -46-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           DIMENSION) 1801 W ( SUBSCRIPT VARIABLE NAME IS NOT AN INTEGER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           SUBSCRIPT) 1801 W ( NAME IS: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( dimensioned variable has as one of its dimension specifications a variable) 0 W 
130 VLFD ( ) 69220 W (                         name) 1828 W ( that is not an integer.  Correct the definition of the subscript variable) 0 W 
130 VLFD ( ) 69220 W (                         name) 1828 W ( to be an integer.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DUMMY) 1801 W ( VARIABLE DIMENSIONING COMMON BLOCK: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( DIMENSION statement has a variable name for the dimension specifica-) 0 W 
130 VLFD ( ) 69220 W (                         tion,) 1828 W ( but the variable name is not a named integer specified in a) 0 W 
130 VLFD ( ) 69220 W (                         PARAMETER) 1828 W ( statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DUMMY) 1801 W ( VARIABLE NAME EXCEEDS 32 CHARACTERS: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( dummy variable in an argument list of ENTRY, FUNCTION, or) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( statement is longer than 32 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DUPLICATE) 1801 W ( ERR ARGUMENT IN ENDFILE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( control list ERR argument is specified more than once in an END FILE) 0 W 
130 VLFD ( ) 69220 W (                         statement.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           DUPLICATE) 1801 W ( IOSTAT ARGUMENT IN ENDFILE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( control list IOSTAT argument is specified more than once in an) 0 W 
130 VLFD ( ) 69220 W (                         ENDFILE) 1828 W ( statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ELSE) 1801 W ( STATEMENT MISSPELLED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( ELSE statement has not been spelled correctly.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           END) 1801 W ( PARAMETER ILLEGAL IN A WRITE STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( WRITE statement contains an END parameter in the control list) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           END) 1801 W ( STATEMENT ILLEGAL IN AN INCLUDE FILE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FORTRAN) 1848 W ( code in a file defined in an INCLUDE statement contains an) 0 W 
130 VLFD ( ) 69220 W (                         END) 1828 W ( statement.  The END statement is ignored by FXREF, and processing) 0 W 
130 VLFD ( ) 69220 W (                         continues.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVALENCED) 1801 W ( GROUP HAS A SINGLE VARIABLE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( group of equivalenced variables must have at least two variables.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVALENCED) 1801 W ( VARIABLE HAS MORE SUBSCRIPTS THAN ITS DIMENSION:) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           {name}) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( EQUIVALENCE variable {name} uses more subscripts than the num-) 0 W 
130 VLFD ( ) 69220 W (                         ber) 1828 W ( of defined subscripts for that variable.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVALENCED) 1801 W ( VARIABLE {name} HAS A CHARACTER RANGE SPECIFIED BUT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           IS) 1801 W ( NOT A CHARACTER VARIABLE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} is not a character variable, but a character range) 0 W 
130 VLFD ( ) 69220 W (                         specification) 1828 W ( exists for it in an EQUIVALENCE statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVALENCED) 1801 W ( VARIABLE {name} USES SUBSCRIPTS BUT IT IS NOT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           DIMENSIONED) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} is not dimensioned, but it has a subscript specification) 0 W 
130 VLFD ( ) 69220 W (                         in) 1828 W ( an EQUIVALENCE statement.  This may be caused by using a subscript) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( \(1\) when it is superfluous.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -47-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           EQUIVALENCE) 1801 W ( VARIABLE SUBSCRIPTS AND RANGE SPECIFICATIONS MUST BE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NUMERIC) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Specification) 1848 W ( of a subscript or character range value is not numeric.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           EXPRESSION) 1801 W ( INVALID) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( arithmetic statement, an arithmetic expression, a logical statement, or a) 0 W 
130 VLFD ( ) 69220 W (                         logical) 1828 W ( expression is not valid.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS A DECIMAL POINT WITHOUT LEFT AND RIGHT DIGITS: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Numerical) 1848 W ( digits do not precede and follow a decimal point.  {text} will con-) 0 W 
130 VLFD ( ) 69220 W (                         tain) 1828 W ( nine characters, where character 5 is the location of the error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS AN ILLEGAL CHARACTER: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( character occurs where it is not allowed.  {text} will contain nine charac-) 0 W 
130 VLFD ( ) 69220 W (                         ters,) 1828 W ( where character 5 is the location of the error.  No further processing of) 0 W 
130 VLFD ( ) 69220 W (                         this) 1828 W ( statement occur after the error is detected.  The most usual cause of) 0 W 
130 VLFD ( ) 69220 W (                         this) 1828 W ( message is when a comma is missing, between format specifications,) 0 W 
130 VLFD ( ) 69220 W (                         such) 1828 W ( as: FORMAT\(1H15X,A15\).  The correct form for the example is:) 0 W 
130 VLFD ( ) 69220 W (                         FORMAT\(1H1,5X,A15\).) 1828 W (  This message may not occur when a comma is ex-) 0 W 
130 VLFD ( ) 69220 W (                         pected) 1828 W ( but not found while removing hollerith fields in a FORTRAN) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( in SUBROUTINE COMPRS.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Some) 1848 W ( FORTRAN compilers allow the ascii code A to be used with no length) 0 W 
130 VLFD ( ) 69220 W (                         specified.) 1828 W (  Example: FORMAT\('ZZ',A5,A,I4\).  The character sequence ,A, in) 0 W 
130 VLFD ( ) 69220 W (                         a) 1828 W ( FORMAT statement will cause this message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS AN ILLEGAL COMMA: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( comma occurs where it is not allowed.  {text} will contain nine characters,) 0 W 
130 VLFD ( ) 69220 W (                         where) 1828 W ( character 5 is the location of the error.  No further processing of the) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( occurs after this error is detected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Most) 1848 W ( FORTRAN compilers allow the FORMAT statement to contain a code) 0 W 
130 VLFD ( ) 69220 W (                         sequence) 1828 W ( of: ,/,  The commas are superfluous, and FXREF will print this) 0 W 
130 VLFD ( ) 69220 W (                         message) 1828 W ( for each occurrence.) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS AN ILLEGAL DECIMAL POINT: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( period or decimal point occurs where it is not allowed.  {text} will contain) 0 W 
130 VLFD ( ) 69220 W (                         nine) 1828 W ( characters, where character 5 is the location of the error.  No further) 0 W 
130 VLFD ( ) 69220 W (                         processing) 1828 W ( of the statement after this error is detected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS AN ILLEGAL RIGHT PARENTHESIS: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( right parenthesis occurs where is not allowed. {text} will contain nine) 0 W 
130 VLFD ( ) 69220 W (                         characters,) 1828 W ( where character 5 is the location of the error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS NO MATCHING RIGHT PARENTHESIS: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( right parenthesis does not match a left parenthesis when one is expected.) 0 W 
130 VLFD ( ) 69220 W (                         {text}) 1828 W ( will contain nine characters, where character 5 is the location of the) 0 W 
130 VLFD ( ) 69220 W (                         error.) 1828 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -48-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( HAS NO MATCHING SYMBOL: > OR <: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Case) 1848 W ( 1:) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( FORMAT statement has the symbol: <, but no matching symbol > was) 0 W 
130 VLFD ( ) 69220 W (                         found.) 1828 W (  {text} will contain nine characters, where character 5 is the location) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( the < symbol.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Case) 1848 W ( 2:) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( FORMAT statement has the symbol: >, but no matching symbol <) 0 W 
130 VLFD ( ) 69220 W (                         preceded) 1828 W ( it.  {text} will contain nine characters, where character 5 is the) 0 W 
130 VLFD ( ) 69220 W (                         location) 1828 W ( of the > symbol.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              No) 1848 W ( further processing occurs after this is detected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( IS MISSING A COMMA: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( comma does not occur where one is expected.  {text} will contain nine) 0 W 
130 VLFD ( ) 69220 W (                         characters,) 1828 W ( where character 5 is the location of the error.  No further) 0 W 
130 VLFD ( ) 69220 W (                         processing) 1828 W ( occurs after the error is detected.  This message in generated by) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( FMTSYN and may be a warning rather than an error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( LACKS A LEFT BOUNDING PARENTHESIS: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( left parenthesis does not follow the key word FORMAT.  {text} will con-) 0 W 
130 VLFD ( ) 69220 W (                         tain) 1828 W ( nine characters, where character 7 is the location of the error.  No) 0 W 
130 VLFD ( ) 69220 W (                         further) 1828 W ( processing occurs after this error is detected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( LACKS A RIGHT BOUNDING PARENTHESIS: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( right parenthesis does not terminate the FORMAT statement.  {text} will) 0 W 
130 VLFD ( ) 69220 W (                         contain) 1828 W ( nine characters, where character 9 is the location of the error.  No) 0 W 
130 VLFD ( ) 69220 W (                         further) 1828 W ( processing occurs after the error is detected.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FORMAT) 1801 W ( STATEMENT HAS NO STATEMENT NUMBER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FORMAT statement must have a statement number specified, but one) 0 W 
130 VLFD ( ) 69220 W (                         does) 1828 W ( not exist.  This error usually causes the message to be written that a) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( number was not defined.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FUNCTION) 1801 W ( HAS A LENGTH DEFINED BUT NO DATA TYPE IS DEFINED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           {text}) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FUNCTION has a defined length specified, but no data type is defined.) 0 W 
130 VLFD ( ) 69220 W (                         This) 1828 W ( message occurs only when the FUNCTION is specified as:) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FUNCTION*{length}) 1848 W ( {name} [arguments].) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FUNCTION) 1801 W ( STATEMENT NOT THE FIRST STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FUNCTION statement occurs that is not the first non-comment state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( in a subprogram.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           HOLLERITH) 1801 W ( FIELD HAS MORE THAN 255 CHARACTERS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( literal exists in a statement that exceeds 255 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ILLEGAL) 1801 W ( CHARACTERS IN IF STATEMENT: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( character immediately following the IF statement logical condition field) 0 W 
130 VLFD ( ) 69220 W (                         violates) 1828 W ( correct syntax.  The erroneous character is the third character in) 0 W 
130 VLFD ( ) 69220 W (                         {text}) 1828 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

916 VLFD ( ) 69220 W (                                                                 -49-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           ILLEGAL) 1801 W ( EXPRESSION SYNTAX IN PARAMETER STATEMENT EXPRESSION) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Syntax) 1848 W ( of an expression defining a PARAMETER variable, a type statement) 0 W 
130 VLFD ( ) 69220 W (                         length,) 1828 W ( or the size of a DIMENSION is in error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ILLEGAL) 1801 W ( RETURN DESIGNATION FOR ARGUMENT {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( RETURN statement has an argument that is not a statement number.) 0 W 
130 VLFD ( ) 69220 W (                         {number}) 1828 W ( is the invalid specification.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ILLEGAL) 1801 W ( USE OF A RECORD VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} defined by a RECORD statement is not used correctly.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ILLEGAL) 1801 W ( VARIABLE NAME: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( initial character of a variable name is not an alphabetic character or an) 0 W 
130 VLFD ( ) 69220 W (                         underscore,) 1828 W ( or the second and subsequent characters are not alphabetic,) 0 W 
130 VLFD ( ) 69220 W (                         numeric,) 1828 W ( underscore, or dollar sign characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ENTRY STATEMENT {name}, ARGUMENT {number\) IS A SUBPROGRAM NAME) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Argument) 1848 W ( {number} in ENTRY statement {name} is a subprogram name.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( FUNCTION STATEMENT {name}, ARGUMENT {number} IS A SUBPROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NAME) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( argument {number} is an ENTRY or SUBROUTINE name.  {name} is) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( FUNCTION name.  This is a warning message that argument {number}) 0 W 
130 VLFD ( ) 69220 W (                         is) 1828 W ( in a FUNCTION definition statement is identical to a subprogram name) 0 W 
130 VLFD ( ) 69220 W (                         within) 1828 W ( the program.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ITBLSR, COMPARE FIELD LENGTH GREATER THAN FIELD LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length of the field to be searched for in the ITBLSR routine is greater) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( the record length of the table entry.  This message should never occur.) 0 W 
130 VLFD ( ) 69220 W (                         It) 1828 W ( indicates damaged data.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ITBLSR, COMPARE FIELD LENGTH OF COMPARE FIELDS UNEQUAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Two) 1848 W ( fields to be compared in the ITBLSR routine are not of equal length.) 0 W 
130 VLFD ( ) 69220 W (                         This) 1828 W ( message should never occur.  It indicates damaged data.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ROUTINE {name1}, CALLED ARGUMENT {number} \({name2}\) IS TYPE {character1}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           BUT) 1801 W ( IS DEFINED AS TYPE {character2}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              In) 1848 W ( the calling subprogram {name1}, the argument number {number}, whose) 0 W 
130 VLFD ( ) 69220 W (                         variable) 1828 W ( name is {name2}, has a type characteristic of {character1}, but the) 0 W 
130 VLFD ( ) 69220 W (                         definition) 1828 W ( type characteristic is type {character2}.  This is a global message.) 0 W 
130 VLFD ( ) 69220 W (                         {character1}) 1828 W ( and {character2} are the usage codes that appear in table 2.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ROUTINE {name1}, CALLED ARGUMENT {number1} \({name2}\) HAS A LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CHARACTERISTIC) 1801 W ( OF {number2} BUT HAS A DEFINED LENGTH OF {number3}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              In) 1848 W ( the calling subprogram {name1}, the called subprogram argument num-) 0 W 
130 VLFD ( ) 69220 W (                         ber) 1828 W ( {number1} whose name is {name2} has a length characteristic of) 0 W 
130 VLFD ( ) 69220 W (                         {number2},) 1828 W ( but the definition type length is {number3}.  This is a global) 0 W 
130 VLFD ( ) 69220 W (                         message.) 1828 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -50-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message is suppressed when the length definition is \(*\), in a type state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( or when the CALL statement passes numeric values.  An inherited) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( is unknown to the subprogram that uses this definition.  A CALL) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( using actual numeric arguments will not know the type defined) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( characteristic of the dummy variable argument in the called sub-) 0 W 
130 VLFD ( ) 69220 W (                         program.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ROUTINE {name1}, CALLED SUBPROGRAM {name2} HAS {number1}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ARGUMENTS,) 1801 W ( BUT IS DEFINED WITH {number2} ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              In) 1848 W ( the calling subprogram {name1}, the called subprogram {name2} uses) 0 W 
130 VLFD ( ) 69220 W (                         {number1}) 1828 W ( arguments, but the defined subprogram uses {number2} argu-) 0 W 
130 VLFD ( ) 69220 W (                         ments.) 1828 W (  This is a global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ROUTINE {name1}, CALLED SUBPROGRAM {NAME2} IS NOT DEFINED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Subprogram) 1848 W ( {name2} has been called from subprogram {name1}, but no) 0 W 
130 VLFD ( ) 69220 W (                         such) 1828 W ( subprogram exists.  This is a global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( ROUTINE {name1}, SUBPROGRAM {name2} IS DEFINED AS {name3}, BUT IS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CALLED) 1801 W ( AS {name4}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              In) 1848 W ( the calling subprogram {name1}, the program module {name2} is defined) 0 W 
130 VLFD ( ) 69220 W (                         as) 1828 W ( an ENTRY, FUNCTION, or SUBROUTINE \({name3}\), but it is called as) 0 W 
130 VLFD ( ) 69220 W (                         an) 1828 W (  ENTRY, FUNCTION, or SUBROUTINE \({NAME4}\). This is a global) 0 W 
130 VLFD ( ) 69220 W (                         message.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( SUBROUTINE STATEMENT {name}, ARGUMENT {number} IS A SUBPROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           NAME) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Argument) 1848 W ( {number} is an ENTRY or FUNCTION name.  {name} is the) 0 W 
130 VLFD ( ) 69220 W (                         SUBROUTINE) 1828 W ( name.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( TABSRH, COMPARE FIELD LENGTH GREATER THAN FIELD LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length of the field to be searched for in the TABSRH routine is greater) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( the record length of the table entry.  This message should never occur.) 0 W 
130 VLFD ( ) 69220 W (                         It) 1828 W ( indicates a damaged record.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( TABSRH, COMPARE FIELD LENGTH OF COMPARE FIELDS UNEQUAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( fields to be compared in the TABSRH routine are not of equal length.) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( of the table entry.  This message should never occur.  It indicates) 0 W 
130 VLFD ( ) 69220 W (                         damaged) 1828 W ( data.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IN) 1801 W ( TBLSRH, COMPARE FIELD LENGTH GREATER THAN RECORD LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length of the field to be searched for in the TBLSRH routine is greater) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( the record length of the table entry.  This message should never occur.) 0 W 
130 VLFD ( ) 69220 W (                         It) 1828 W ( indicates damaged data.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INCLUDE) 1801 W ( ARGUMENT NOT A LITERAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( argument of an INCLUDE statement is not a literal.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1306 VLFD ( ) 69220 W (                                                                 -51-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           INCLUDE) 1801 W ( FILE NAME EXCEEDS 80 CHARACTERS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              When) 1848 W ( the file name of an INCLUDE statement specifies no directory, the) 0 W 
130 VLFD ( ) 69220 W (                         file) 1828 W ( name is modified to use the directory of the first output file on unit 6.) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( number of characters in the modified file name exceeds 80 characters.) 0 W 
130 VLFD ( ) 69220 W (                         FXREF) 1828 W ( will terminate execution.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INCLUDE) 1801 W ( FILE NOT FOUND {file name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( file name specified in an INCLUDE statement can not be found.  The file) 0 W 
130 VLFD ( ) 69220 W (                         name) 1828 W ( may not exist, or it has an incorrect path name.  Unless the include) 0 W 
130 VLFD ( ) 69220 W (                         file) 1828 W ( is in the same directory as FXREF.EXE, a path name is required, since) 0 W 
130 VLFD ( ) 69220 W (                         FXREF) 1828 W ( has no search routine to find the file name in other directories.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message is written to the monitor screen, and FXREF exection stops.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INPUT-OUTPUT) 1801 W ( PARAMETER CONTROL LIST ERROR) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( statement using a control list has an invalid parameter.  It does not) 0 W 
130 VLFD ( ) 69220 W (                         pertain) 1828 W ( to the to the argument value of the parameter.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( ARGUMENTS "FILE" AND "UNIT" CAN NOT OCCUR SIMULTANEOUSLY) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INQUIRE statement executes by seeking a file name or a unit designa-) 0 W 
130 VLFD ( ) 69220 W (                         tion,) 1828 W (  It can not perform both simultaneously.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( HAS AN INVALID ARGUMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INQUIRE statement has specified an invalid argument.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( HAS INSUFFICIENT ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INQUIRE statement lacks required arguments.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( LACKS LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( LACKS RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INQUIRE statement lacks a left or a right parenthesis.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INQUIRE) 1801 W ( SPECIFIES A DUPLICATE ARGUMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INQUIRE statement has multiple specifications of the same argument.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INTEGER) 1801 W ( LENGTH NOT EQUAL TO 1, 2, OR, 4) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INTEGER statement defined a variable length as other than 1, 2, or 4.) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( length is set to four to continue processing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INTEGER) 1801 W ( STATEMENT CONTAINS A FLOATING NUMBER: {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INTEGER statement with data initialization specifications contains a) 0 W 
130 VLFD ( ) 69220 W (                         floating) 1828 W ( point number.  The number is converted to integer format and both) 0 W 
130 VLFD ( ) 69220 W (                         forms) 1828 W ( will be listed in the the tables of integers and floating point numbers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INTEGER) 1801 W ( VARIABLE HAS ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INTEGER data type definition has an incorrect length specification.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1436 VLFD ( ) 69220 W (                                                                 -52-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           INTRINSIC) 1801 W ( FUNCTION NAME USED AS A VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable name is identical to an intrinsic function name.  This is a warn-) 0 W 
130 VLFD ( ) 69220 W (                         ing) 1828 W ( message and may not be an error in a particular program, since) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W ( compilers differ in the routines included in the intrinsic) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W ( library.  This message may also appear in the global messages) 0 W 
130 VLFD ( ) 69220 W (                         if) 1828 W ( global analysis is requested.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INVALID) 1801 W ( CHARACTERS FOLLOW THE STOP STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( STOP statement has an illegal argument.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INVALID) 1801 W ( EXPRESSION IN PARAMETER STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( PARAMETER expression defining a PARAMETER variable is incorrect.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INVALID) 1801 W ( INPUT-OUTPUT CONTROL COMMAND FOR ENCODE OR DECODE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( ENCODE or DECODE statement is not coded correctly.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INVALID) 1801 W ( I/O UNIT {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( input - output unit in a data manipulation statement is greater than) 0 W 
130 VLFD ( ) 69220 W (                         99.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( NOT DEFINED FOR STRUCTURE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( STRUCTURE statement that has not been defined prior to the occurrence) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( a RECORD statement which refers to the STRUCTURE statement using) 0 W 
130 VLFD ( ) 69220 W (                         {name}.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( OF INPUT SOURCE RECORD EXCEEDS {number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FORTRAN source record length exceeds the value specified in the control) 0 W 
130 VLFD ( ) 69220 W (                         card) 1828 W ( on unit 1.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( SPECIFICATION EQUALS ZERO) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length of an integer or logical specification is zero.  The length is set to) 0 W 
130 VLFD ( ) 69220 W (                         four) 1828 W ( to continue processing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( SPECIFICATION EXCEEDS 1 DIGIT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length specification of an integer specification is greater than one digit.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( SPECIFICATION EXCEEDS 7 DIGITS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length specification of a CHARACTER type variable contains more) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( seven digits.  Legitimately, the number value may be larger than) 0 W 
130 VLFD ( ) 69220 W (                         seven) 1828 W ( digits, but FXREF will process only seven.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LENGTH) 1801 W ( SPECIFICATION IS REAL: {real number}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( length specified for a variable is a real value not an integer value.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LITERAL) 1801 W ( LACKS BALANCED ' OR ") 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( character constant lacks an even number of apostrophes or quotation) 0 W 
130 VLFD ( ) 69220 W (                         marks) 1828 W ( delimiting a literal.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1306 VLFD ( ) 69220 W (                                                                 -53-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           LOCATION) 1801 W ( OF EQUIVALENCE VARIABLE {name} AT {number1} IS GREATER THAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           DEFINED) 1801 W ( COMMON LENGTH {number2}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( EQUIVALENCE variable address exceeds that of the COMMON block) 0 W 
130 VLFD ( ) 69220 W (                         to) 1828 W ( which it is equivalenced.  While equivalenced variables may extend the) 0 W 
130 VLFD ( ) 69220 W (                         total) 1828 W ( length of a COMMON block, the initial location of the equivalenced) 0 W 
130 VLFD ( ) 69220 W (                         variable) 1828 W ( must lie within the original COMMON block before extension.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LOGICAL) 1801 W ( CONDITION OF A DO WHILE OR IF STATEMENT LACKS PARENTHESES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( logical specification does not exist for a DO WHILE or an IF statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LOGICAL) 1801 W ( LENGTH MUST BE 1, 2, OR 4) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( LOGICAL statement defined a variable length as other than 1, 2, or 4.) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( length is set to four to continue processing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LOGICAL) 1801 W ( OPERATOR SYNTAX ERROR: {text}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( LOGICAL variable operator syntax is wrong.  {text} will show the logical) 0 W 
130 VLFD ( ) 69220 W (                         operator) 1828 W ( from the statement or the text immediately following the logical) 0 W 
130 VLFD ( ) 69220 W (                         operator.) 1828 W (  This message may appear more than once for a single error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LOGICAL) 1801 W ( STATEMENT HAS ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( LOGICAL data type definition has an incorrect length specification.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           LOWER) 1801 W ( LIMIT IS GREATER THAN UPPER LIMIT FOR A DIMENSION RANGE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              In) 1848 W ( a DIMENSION statement specifying a subscript range, the upper limit) 0 W 
130 VLFD ( ) 69220 W (                         has) 1828 W ( the upper limit value is lower than the lower limit value.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN TWO SLASHES IN A RECORD STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( RECORD statement has more than two slashes.  The RECORD statement) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( not be processed, since the structure name can not be identified.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 10 PARENTHESES IN A PARAMETER STATEMENT EXPRESSION) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( PARAMETER definition used to define another PARAMETER variable,) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( length of a type statement, or the size of a DIMENSION statement by) 0 W 
130 VLFD ( ) 69220 W (                         using) 1828 W ( an expression of previously defined PARAMETER variables has more) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( ten matching parentheses, the maximum allowed by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message may occur only for a PARAMETER variable defined as an in-) 0 W 
130 VLFD ( ) 69220 W (                         teger) 1828 W ( data type.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 100 INTEGER UNIT NUMBERS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FXREF) 1848 W ( has determined that the program being analyzed uses more than) 0 W 
130 VLFD ( ) 69220 W (                         100) 1828 W ( integer units.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 DIMENSIONED VARIABLES USED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 1,000 variables have been dimensioned.  The output listing will) 0 W 
130 VLFD ( ) 69220 W (                         be) 1828 W ( incomplete.  Dimensioned variables brought into the program or sub-) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( by an INCLUDE statement are not counted for this limit unless) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( variable is used within a routine.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 ISNS FOR A VARIABLE NAME: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable is referenced more than 1000 times in a single routine.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -54-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 LITERALS IN CALL STATEMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( total number of literals occurring as CALL statement arguments) 0 W 
130 VLFD ( ) 69220 W (                         exceed) 1828 W ( 1000 in all the program's modules.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 LITERALS IN A SINGLE ROUTINE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FORTRAN module has more than 1000 literals.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 1000 VARIABLES ARE DEFINED IN STRUCTURE STATEMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Variables) 1848 W ( defined within STRUCTURE statements exceed the table size) 0 W 
130 VLFD ( ) 69220 W (                         where) 1828 W ( they are saved.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 20 VARIABLES IN AN EQUIVALENCE GROUP) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 20 variables occur within a single  equivalenced group that are) 0 W 
130 VLFD ( ) 69220 W (                         brought) 1828 W ( into the same COMMON block.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              FXREF) 1848 W ( will combine separate EQUIVALENCE definitions when they are) 0 W 
130 VLFD ( ) 69220 W (                         matched) 1828 W ( to a COMMON block.  The 20 variable limit applies to the com-) 0 W 
130 VLFD ( ) 69220 W (                         bined) 1828 W ( group as well as to a singly defined group.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 2000 INTEGERS OCCUR IN THE PROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( program or subprogram being processed has more than 2000 unique in-) 0 W 
130 VLFD ( ) 69220 W (                         teger) 1828 W ( numbers which has filled the table where they are stored.  This) 0 W 
130 VLFD ( ) 69220 W (                         includes) 1828 W ( all integer constants, all integer subscripts, all integer data type) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( definitions, all integer substring specifications, all integer dimen-) 0 W 
130 VLFD ( ) 69220 W (                         sion) 1828 W ( specifications, and all integer PARAMETER specifications.  FORMAT) 0 W 
130 VLFD ( ) 69220 W (                         statements) 1828 W ( using the <...> syntax will have all the integers occurring be-) 0 W 
130 VLFD ( ) 69220 W (                         tween) 1828 W ( <...> placed in the integer table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( count of 2000 integers is for each occurrence of an integer including) 0 W 
130 VLFD ( ) 69220 W (                         multiple) 1828 W ( occurrences.  Consequently fewer than 2000 integers will appear) 0 W 
130 VLFD ( ) 69220 W (                         in) 1828 W ( the output listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message will appear only once for a given program module.  No in-) 0 W 
130 VLFD ( ) 69220 W (                         tegers) 1828 W ( occurring in FORTRAN statements after this statement identified) 0 W 
130 VLFD ( ) 69220 W (                         by) 1828 W ( the ISN will be cataloged; consequently, the printed listing table of in-) 0 W 
130 VLFD ( ) 69220 W (                         tegers,) 1828 W ( table 5, will be incomplete, and fewer than 2000 integers will) 0 W 
130 VLFD ( ) 69220 W (                         appear) 1828 W ( in the output listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 30 COLONS IN A CALL STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( argument of a CALL statement that is an expression uses more than 30) 0 W 
130 VLFD ( ) 69220 W (                         range) 1828 W ( specifications for CHARACTER type variables.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 30 LEFT PARENTHESES IN A CALL STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( CALL statement argument expression contains more than 30 left paren-) 0 W 
130 VLFD ( ) 69220 W (                         theses,) 1828 W ( the maximum allowed by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 30 RIGHT PARENTHESES IN A CALL STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( CALL statement argument expression contains more than 30 right paren-) 0 W 
130 VLFD ( ) 69220 W (                         theses,) 1828 W ( the maximum allowed by FXREF.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 FLOATING NUMBERS OCCUR IN THE PROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( program or subprogram being processed has more than 4000 unique) 0 W 
130 VLFD ( ) 69220 W (                         floating) 1828 W ( numbers which has filled the table where they are stored.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

656 VLFD ( ) 69220 W (                                                                 -55-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 INTEGER PARAMETER DEFINITIONS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 4000 integer parameters are defined.  The listing will be incom-) 0 W 
130 VLFD ( ) 69220 W (                         plete.) 1828 W (  Integer parameter definitions brought into a program or subprogram) 0 W 
130 VLFD ( ) 69220 W (                         by) 1828 W ( INCLUDE statements are counted for this total.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 SUBPROGRAMS EXIST) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than ENTRY, FUNCTION, and SUBROUTINES are defined for the) 0 W 
130 VLFD ( ) 69220 W (                         current) 1828 W ( program being processed.  This is a global message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 4000 VARIABLE NAMES USED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              More) 1848 W ( than 4,000 variable names are defined in a program or subprogram.) 0 W 
130 VLFD ( ) 69220 W (                         This) 1828 W ( count includes all variables brought into a module by INCLUDE state-) 0 W 
130 VLFD ( ) 69220 W (                         ments.) 1828 W (  Intrinsic function names are counted for this total.  The listing will) 0 W 
130 VLFD ( ) 69220 W (                         be) 1828 W ( incomplete.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 500 LITERALS IN A SINGLE STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FORTRAN statement has more than 500 literals.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 500 VARIABLES USED IN AN EXPRESSION) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( arithmetic assignment statement or an expression contains more than) 0 W 
130 VLFD ( ) 69220 W (                         500) 1828 W ( unique variables.  The remaining variables are not processed for this) 0 W 
130 VLFD ( ) 69220 W (                         ISN) 1828 W ( statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 6 NESTED INCLUDE STATEMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              INCLUDE) 1848 W ( statements may be nested only to a depth of 6.  Thus, the total) 0 W 
130 VLFD ( ) 69220 W (                         number) 1828 W ( of INCLUDE statement within the nest is 7.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MORE) 1801 W ( THAN 7 DIMENSION PARAMETERS SPECIFIED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable has more than seven dimension parameters defined.  This is the) 0 W 
130 VLFD ( ) 69220 W (                         maximum) 1828 W ( number of dimensions allowed by most FORTRAN compilers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MULTIPLE) 1801 W ( FUNCTION LENGTHS ARE DEFINED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( FUNCTION statement has more than one defined length characteristic.) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( initial length definition will be used.  If the value is not allowed for the) 0 W 
130 VLFD ( ) 69220 W (                         data) 1828 W ( type, the standard default length is used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           MULTIPLE) 1801 W ( IMPLICIT STATEMENTS NOT ALLOWED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( program or subprogram contains multiple IMPLICIT statements, and one) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( them is an IMPLICIT NONE statement.  An IMPLICIT NONE) 0 W 
130 VLFD ( ) 69220 W (                         statemenmt) 1828 W ( allows no other IMPLICIT statements.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NAMELIST) 1801 W ( STATEMENT LACKS BALANCED SLASHES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( odd number of slashes occur in a NAMELIST statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( CLOSING COMMA OR RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement lacks either a comma or a right parenthesis where one is re-) 0 W 
130 VLFD ( ) 69220 W (                         quired.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( CLOSING COMMA OR RIGHT OR LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement lacks a comma, right parenthesis, or left parenthesis where) 0 W 
130 VLFD ( ) 69220 W (                         one) 1828 W ( is required.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

786 VLFD ( ) 69220 W (                                                                 -56-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( LEFT OR RIGHT PARENTHESIS AFTER AN EQUIVALENCE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( left or right parenthesis is missing in an EQUIVALENCE statement.  An) 0 W 
130 VLFD ( ) 69220 W (                         EQUIVALENCE) 1828 W ( statement must start with a left parenthesis after the key) 0 W 
130 VLFD ( ) 69220 W (                         word) 1828 W ( and must end with a right parenthesis.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( SUBPROGRAM SPECIFIED FOR AN EXTERNAL STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( EXTERNAL statement has no argument.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NO) 1801 W ( TYPE DEFINITION FOR VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Variable) 1848 W ( {name} has no type and length definition.  This is caused by using) 0 W 
130 VLFD ( ) 69220 W (                         a) 1828 W ( variable name in the executable section of a program or subprogram) 0 W 
130 VLFD ( ) 69220 W (                         when) 1828 W ( an IMPLICIT NONE statement exists in the module.  All variables) 0 W 
130 VLFD ( ) 69220 W (                         must) 1828 W ( be defined in the declaration section of a program or subprogram) 0 W 
130 VLFD ( ) 69220 W (                         when) 1828 W ( IMPLICIT NONE exists.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NONDEFINED) 1801 W ( VARIABLE USED ILLEGALLY: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Variable) 1848 W ( {name} occurs to the right side of an equal sign, but it has not been) 0 W 
130 VLFD ( ) 69220 W (                         defined) 1828 W ( prior to its use.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A COMMON VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable is not in common when it should be.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A FORTRAN STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement can not be identified as a FORTRAN statement or some por-) 0 W 
130 VLFD ( ) 69220 W (                         tion) 1828 W ( of the statement is not valid FORTRAN syntax.  There are two forms) 0 W 
130 VLFD ( ) 69220 W (                         of) 1828 W ( this message.  One contains the internal statement number to identify) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( erroneous statement.  The other lists the first 20 characters of the) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( when no statement number is available.  See the prior section of) 0 W 
130 VLFD ( ) 69220 W (                         messages) 1828 W ( without an ISN.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A PARAMETER VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              {name}) 1848 W ( is a variable used where only a variable in a PARAMETER state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( may be used.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A RECORD DEFINITION: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              {name}) 1848 W ( is used in a compound variable name, but it is not defined in a  ) 0 W 
130 VLFD ( ) 69220 W (                          RECORD) 1940 W ( statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NOT) 1801 W ( A PAUSE STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement appears to be a PAUSE statement but is not.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           NUMBER) 1801 W ( GREATER THAN 7 DIGITS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( INTEGER number being converted to a text format contains more than) 0 W 
130 VLFD ( ) 69220 W (                         seven) 1828 W ( digits after conversion.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           OPEN) 1801 W ( HAS AN INVALID ARGUMENT: {value}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              One) 1848 W ( of the specified arguments for the OPEN statement is not valid.) 0 W 
130 VLFD ( ) 69220 W (                         {value}) 1828 W ( may be {name} or {number}.  If {value} is an input-output unit desig-) 0 W 
130 VLFD ( ) 69220 W (                         nated) 1828 W ( as a variable name, the lack of UNIT= parameter in the control list) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( cause this message.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           OPEN) 1801 W ( HAS INSUFFICIENT ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( OPEN statement lacks required arguments.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -57-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2771 W (           OPEN) 1801 W ( LACKS LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           OPEN) 1801 W ( LACKS RIGHT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( left or right parenthesis is lacking in an OPEN statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           OPEN) 1801 W ( SPECIFIES A DUPLICATE ARGUMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( argument in an OPEN  statement occurs more than once.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           PARAMETER) 1801 W ( EVALUATION ARGUMENT NOT FOUND) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( PARAMETER variable name has not been found in the table of) 0 W 
130 VLFD ( ) 69220 W (                         PARAMETER) 1828 W ( defined variables. This message is probably caused by using) 0 W 
130 VLFD ( ) 69220 W (                         a) 1828 W ( variable prior to its definition in a PARAMETER statement.  Also, it may) 0 W 
130 VLFD ( ) 69220 W (                         be) 1828 W ( caused by a variable name used as a DIMENSION specification that is) 0 W 
130 VLFD ( ) 69220 W (                         not) 1828 W ( in a COMMON block, or that is an argument of an ENTRY,) 0 W 
130 VLFD ( ) 69220 W (                         FUNCTION,) 1828 W ( or SUBROUTINE statement) 0 W 
130 VLFD ( ) 69220 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( message will also appear when the value is a literal defined in an in-) 0 W 
130 VLFD ( ) 69220 W (                         cluded) 1828 W ( file.  Even when a literal represents a numerical integer value, it is) 0 W 
130 VLFD ( ) 69220 W (                         not) 1828 W ( entered into the integer parameter table used to evaluate expressions) 0 W 
130 VLFD ( ) 69220 W (                         from) 1828 W ( a prior PARAMETER definition.  Use of OS/2-ECS APIs have many) 0 W 
130 VLFD ( ) 69220 W (                         switches) 1828 W ( set as literals, and they may cause this message when used in an) 0 W 
130 VLFD ( ) 69220 W (                         expression) 1828 W ( in the calling routine.  Hexidecimal and Octal constants used to) 0 W 
130 VLFD ( ) 69220 W (                         set) 1828 W ( the value of an integer parameter variable are not evaluated.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message will occur only for integer PARAMETER variables for defined) 0 W 
130 VLFD ( ) 69220 W (                         integer) 1828 W ( constants.  FXREF maintains a table of integer PARAMETER vari-) 0 W 
130 VLFD ( ) 69220 W (                         ables) 1828 W ( only, since they can be used to define the size of dimensioned arrays,) 0 W 
130 VLFD ( ) 69220 W (                         data) 1828 W ( length definitions, and subsequent PARAMETER variable definitions) 0 W 
130 VLFD ( ) 69220 W (                         within) 1828 W ( a program or subprogram.  No other data type will be tabulated in) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( PARAMETER table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           PARAMETER) 1801 W ( STATEMENT LACKS AN EQUAL SIGN) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( equal sign is missing where expected in a PARAMETER statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           PARAMETER) 1801 W ( STATEMENT LACKS PARENTHESES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PARAMETER) 1801 W ( STATEMENT LACKS A LEFT PARENTHESIS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Parentheses) 1848 W ( are missing in a PARAMETER statement.  When one of these) 0 W 
130 VLFD ( ) 69220 W (                         messages) 1828 W ( occur, the possible PARAMETER statement is not processed.) 0 W 
130 VLFD ( ) 69220 W (                         Some) 1828 W ( older FORTRAN compilers did not require that PARAMETER state-) 0 W 
130 VLFD ( ) 69220 W (                         ments) 1828 W ( be encapsulated within parentheses.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           REAL) 1801 W ( EXPONENT EXCEEDS 308) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( real number expressed in scientific notation has an exponent equal to or) 0 W 
130 VLFD ( ) 69220 W (                         large) 1828 W ( than +308 or equal to or less than -308. The original exponent value) 0 W 
130 VLFD ( ) 69220 W (                         is) 1828 W ( changed to +307 or -307, and the number is converted to one of those) 0 W 
130 VLFD ( ) 69220 W (                         values.) 1828 W (  This prevents any real number from causing FXREF to terminate) 0 W 
130 VLFD ( ) 69220 W (                         abnormally) 1828 W ( by attempting to convert the text form to the binary floating) 0 W 
130 VLFD ( ) 69220 W (                         point) 1828 W ( form.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1176 VLFD ( ) 69220 W (                                                                 -58-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           REAL) 1801 W ( VARIABLE HAS ILLEGAL LENGTH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( REAL data type definition has an incorrect length specification.  The) 0 W 
130 VLFD ( ) 69220 W (                         length) 1828 W ( specifications for a real variable are 4 and 8.  While some) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W (  ) -5605 W ( compilers) 1940 W ( permit a real length of 16, this error message is) 0 W 
130 VLFD ( ) 69220 W (                         written) 1828 W ( when 16 is used to define the variable length, but the the length of) 0 W 
130 VLFD ( ) 69220 W (                         16) 1828 W ( will appear in the table of variable names.  Other lengths will always) 0 W 
130 VLFD ( ) 69220 W (                         cause) 1828 W ( this message to be printed.  The length is set to four to continue) 0 W 
130 VLFD ( ) 69220 W (                         processing.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W ( ENDS ILLEGALLY) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement lacks a correct termination.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W ( HAS MORE THAN 30 ARGUMENTS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( CALL, ENTRY, FUNCTION, or SUBROUTINE statement contains more) 0 W 
130 VLFD ( ) 69220 W (                         than) 1828 W ( 30 arguments.  Only the first 30 will be processed.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W ( NUMBER IS DEFINED MORE THAN ONCE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Duplicate) 1848 W ( statement numbers exist in the routine.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W ( NUMBER NOT DEFINED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement number has been referenced but not defined.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W ( NUMBER NOT REFERENCED) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( statement number has been defined but never referenced within the) 0 W 
130 VLFD ( ) 69220 W (                         program.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STRUCTURE) 1801 W ( NAME LACKS CLOSING SLASH) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable name of a STRUCTURE definition is not terminated by a) 0 W 
130 VLFD ( ) 69220 W (                         slash.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           STRUCTURE) 1801 W ( NOT ENCAPSULATED BY SLASHES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              ) 1848 W ( The name of STRUCTURE definition is not surrounded by slashes.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBPROGRAM) 1801 W ( NAME IS AN ARGUMENT BUT IS NOT DEFINED IN AN EXTERNAL) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( SUBROUTINE or FUNCTION subprogram name occurs in a CALL state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( as an argument, but the subprogram name is not defined in an) 0 W 
130 VLFD ( ) 69220 W (                         EXTERNAL) 1828 W ( statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBROUTINE) 1801 W ( ARGUMENT IS DEFINED IN COMMON: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable name used as a dummy argument in a SUBROUTINE statement) 0 W 
130 VLFD ( ) 69220 W (                         is) 1828 W ( defined in a COMMON block.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBROUTINE) 1801 W ( STATEMENT IS NOT THE FIRST STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( SUBROUTINE statement occurs that is not the first non-comment state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( in a subprogram.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBSCRIPT) 1801 W ( COUNT ERROR FOR EQUIVALENCED VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( number of subscripts used by a variable in an EQUIVALENCE state-) 0 W 
130 VLFD ( ) 69220 W (                         ment) 1828 W ( is different from that defined in its DIMENSION definition.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBSCRIPT) 1801 W ( DOES NOT MATCH DIMENSION SIZE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( dimensioned variable {name} is used with an incorrect number of sub-) 0 W 
130 VLFD ( ) 69220 W (                         scripts.) 1828 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

396 VLFD ( ) 69220 W (                                                                 -59-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           SUBSCRIPTED) 1801 W ( VARIABLE IS NOT DIMENSIONED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Variable) 1848 W ( {name} that uses subscripts has not been dimensioned.  When this) 0 W 
130 VLFD ( ) 69220 W (                         message) 1828 W ( is written, the variable is assumed to be a FUNCTION name and) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( appear in the listing as a FUNCTION name.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              When) 1848 W ( the variable name is a definition of various data and constants from) 0 W 
130 VLFD ( ) 69220 W (                         IBM's) 1828 W ( Presentation Manager macros for OS/2-ECS, this message will be) 0 W 
130 VLFD ( ) 69220 W (                         generated) 1828 W ( when parameters of API arguments occur, such as:) 0 W 
130 VLFD ( ) 69220 W (                         SHORT1FROMMP,) 1828 W ( MPFROMP, etc.  These parameters require argu-) 0 W 
130 VLFD ( ) 69220 W (                         ments,) 1828 W ( but are not subprogram names, nor are they defined array) 0 W 
130 VLFD ( ) 69220 W (                         variables.) 1828 W (  The message is superfluous for this case.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( defined CHARACTER variable, which is not dimensioned, in the current) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( module being analyzed will cause this message if used in an) 0 W 
130 VLFD ( ) 69220 W (                         EQUIVALENCE) 1828 W ( statement with numeric values encapsulated within) 0 W 
130 VLFD ( ) 69220 W (                         parentheses) 1828 W ( that appear to be subscripts, for example: \(1\) rather than \(1:1\).) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( message indicates the EQUIVALENCE statement syntax should be) 0 W 
130 VLFD ( ) 69220 W (                         corrected.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Other) 1848 W ( FORTRAN statements may also cause additional messages to be gen-) 0 W 
130 VLFD ( ) 69220 W (                         erated) 1828 W ( when this message is written in the output file on unit 6.  If global) 0 W 
130 VLFD ( ) 69220 W (                         analysis) 1828 W ( has been requested, many superfluous global messages may be) 0 W 
130 VLFD ( ) 69220 W (                         generated.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           SUBSCRIPTED) 1801 W ( VARIABLE LACKS A SUBSCRIPT VALUE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( dimensioned array variable lacks a variable name or number for the sub-) 0 W 
130 VLFD ( ) 69220 W (                         script.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           THIRD) 1801 W ( ARGUMENT OF ENCODE OR DECODE NOT A VARIABLE NAME) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( ENCODE or DECODE third argument is not a variable name as re-) 0 W 
130 VLFD ( ) 69220 W (                         quired.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           THIS) 1801 W ( STATEMENT OCCURS AFTER THE FIRST EXECUTABLE STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Declarative) 1848 W ( and definition statements may not follow the initial executable) 0 W 
130 VLFD ( ) 69220 W (                         statement) 1828 W ( in the execution segment of a program or subprogram. These) 0 W 
130 VLFD ( ) 69220 W (                         statements) 1828 W ( are: BLOCK DATA, BYTE, CHARACTER, COMMON,) 0 W 
130 VLFD ( ) 69220 W (                         COMPLEX,) 1828 W ( DATA, DIMENSION, DOUBLE COMPLEX, DOUBLE) 0 W 
130 VLFD ( ) 69220 W (                         PRECISION,) 1828 W ( END STRUCTURE, END MAP, END UNION,) 0 W 
130 VLFD ( ) 69220 W (                         EQUIVALENCE,) 1828 W ( EXTERNAL, FUNCTION, IMPLICIT, INCLUDE,) 0 W 
130 VLFD ( ) 69220 W (                         INTEGER,) 1828 W ( INTRINSIC, LOGICAL, MAP, NAMELIST, PARAMETER,) 0 W 
130 VLFD ( ) 69220 W (                         PROGRAM,) 1828 W ( REAL, RECORD, SAVE, STRUCTURE, SUBROUTINE,) 0 W 
130 VLFD ( ) 69220 W (                         UNION.) 1828 W (  An INCLUDE statement error may or may not be an error. The) 0 W 
130 VLFD ( ) 69220 W (                         contents) 1828 W ( of an included file will determine its validity.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Any) 1848 W ( of the above statements that occur after a statement function definition) 0 W 
130 VLFD ( ) 69220 W (                         will) 1828 W ( cause this message.  Some older FORTRAN compilers allow DATA) 0 W 
130 VLFD ( ) 69220 W (                         statements) 1828 W ( to be placed anywhere within a program module.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Various) 1848 W ( FORTRAN compilers may have other statements that would belong) 0 W 
130 VLFD ( ) 69220 W (                         to) 1828 W ( the definition or declarative category.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              This) 1848 W ( message may appear when a PARAMETER statement lacking any) 0 W 
130 VLFD ( ) 69220 W (                         parentheses) 1828 W ( occurs.  Some older FORTRAN compilers did not use paren-) 0 W 
130 VLFD ( ) 69220 W (                         theses) 1828 W ( to encapsulate the parameter variable names and their assigned) 0 W 
130 VLFD ( ) 69220 W (                         values.) 1828 W 
130 VLFD ( ) 69220 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

136 VLFD ( ) 69220 W (                                                                 -60-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Example:) 1848 W ( PARAMETER NACC = 550 will be treated as the variable) 0 W 
130 VLFD ( ) 69220 W (                         PARAMETERNACC) 1828 W ( = 550.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              When) 1848 W ( any declarative or definition statements occur after an ENTRY state-) 0 W 
130 VLFD ( ) 69220 W (                         ment,) 1828 W ( this message will appear.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           TYPE) 1801 W ( STATEMENT DATA SPECIFICATIONS LACK BALANCED SLASHES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              COMMON,) 1848 W ( or DATA statements lack balanced slashes encapsulating the) 0 W 
130 VLFD ( ) 69220 W (                         data) 1828 W ( values.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNBALANCED) 1801 W ( PARENTHESES) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( odd number of parentheses occur in the statement being analyzed.  This) 0 W 
130 VLFD ( ) 69220 W (                         message) 1828 W ( may appear when one or more parentheses are part of a hollerith) 0 W 
130 VLFD ( ) 69220 W (                         field) 1828 W ( in a DATA or CALL statement and may not indicate a syntax error.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNBALANCED) 1801 W ( PARENTHESES IN PARAMETER STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( PARAMETER statement that is defined as an expression of previously) 0 W 
130 VLFD ( ) 69220 W (                         defined) 1828 W ( PARAMETER variables has unmatched left and right parentheses.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNBALANCED) 1801 W ( PARENTHESES IN SUBPROGRAM STATEMENT) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( SUBROUTINE statement has unmatched left or right parentheses.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNDEFINED) 1801 W ( TYPE FOR VARIABLE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable used in a program or subprogram does not have a data type) 0 W 
130 VLFD ( ) 69220 W (                         definition.) 1828 W (  This is usually caused by failing to define the variable's data) 0 W 
130 VLFD ( ) 69220 W (                         type) 1828 W ( when an IMPLICIT NONE statement exists in the program module) 0 W 
130 VLFD ( ) 69220 W (                         which) 1828 W ( prevents the standard implicit typing normally used in FORTRAN.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           UNION) 1801 W ( HAS LESS THAN 2 MAP DEFINITIONS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( UNION statement must have at least two MAP definitions.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           USE) 1801 W ( OF UNIT "*" NOT ALLOWED IN INQUIRE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( asterisk \(used to indicate the console monitor\) can not be specified as the) 0 W 
130 VLFD ( ) 69220 W (                         unit) 1828 W ( in an INQUIRE statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           USE) 1801 W ( OF UNIT "*" NOT ALLOWED IN OPEN) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( asterisk \(used to indicate the console monitor\) can not be specified as the) 0 W 
130 VLFD ( ) 69220 W (                         unit) 1828 W ( in an OPEN statement.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( DIMENSION SUBSCRIPT VALUE IS ZERO: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( dimensioned variable {name} has its size defined by an expression, but) 0 W 
130 VLFD ( ) 69220 W (                         evaluating) 1828 W ( the expression attempts to cause an exponential computation of) 0 W 
130 VLFD ( ) 69220 W (                         0**0.) 1828 W (  This message may be caused by failing to correctly define) 0 W 
130 VLFD ( ) 69220 W (                         PARAMETER) 1828 W ( statement variable values.  The result will be set to a) 0 W 
130 VLFD ( ) 69220 W (                         default) 1828 W ( value.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

1566 VLFD ( ) 69220 W (                                                                 -61-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( INPUT-OUTPUT UNIT MUST BE EITHER A CHARACTER OR INTEGER) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              An) 1848 W ( input-output variable unit name is not defined as a character or an in-) 0 W 
130 VLFD ( ) 69220 W (                         teger.) 1828 W (  This message will be a warning message when a unit is a variable) 0 W 
130 VLFD ( ) 69220 W (                         name) 1828 W ( with numeric subscript values.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( IS NOT DIMENSIONED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Variable) 1848 W ( {name} has a subscript, but it is not dimensioned.  This message) 0 W 
130 VLFD ( ) 69220 W (                         may) 1828 W ( occur when OS/2-ECS function parameters require an argument such) 0 W 
130 VLFD ( ) 69220 W (                         as) 1828 W ( MPFROMP\(ARG\) exists.  FXREF does not contain a catalog of OS/2-) 0 W 
130 VLFD ( ) 69220 W (                         ECS) 1828 W (  functions but does have a table of defined OS/2-ECS macros.  Any) 0 W 
130 VLFD ( ) 69220 W (                         messages) 1828 W ( refering to these usages should be ignored.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( {name} IS EQUIVALENCED TO MULTIPLE COMMON BLOCKS) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} is equivalenced to more than one common block.  Table) 0 W 
130 VLFD ( ) 69220 W (                         two) 1828 W ( will contain all the ISNs where {name} occurs; the other common) 0 W 
130 VLFD ( ) 69220 W (                         blocks) 1828 W ( can be identified there.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NAME EXCEEDS 32 CHARACTERS: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              There) 1848 W ( are too many characters in the variable name.  Only the first 32) 0 W 
130 VLFD ( ) 69220 W (                         characters) 1828 W ( will be shown.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NAME IS MULTI-DIMENSIONED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              A) 1848 W ( variable name occurs more than once in a DIMENSION statement within) 0 W 
130 VLFD ( ) 69220 W (                         the) 1828 W ( same program or subprogram.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NAME IS NOT DEFINED AS A RECORD: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} used in a compound variable name as a RECORD) 0 W 
130 VLFD ( ) 69220 W (                         name,) 1828 W ( but no RECORD statement defines {name}.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NAME IS NOT DEFINED IN A STRUCTURE: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {name} used in a compound variable is not defined in a) 0 W 
130 VLFD ( ) 69220 W (                         STRUCTURE.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NOT DEFINED; \(name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( named variable {name} is used in the routine, but it is not defined.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NOT DIMENSIONED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable \(name} uses subscripts in an expression, but it is not dimen-) 0 W 
130 VLFD ( ) 69220 W (                         sioned.) 1828 W (  The expression may be a CALL statement argument.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( NOT REFERENCED: {name}) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( variable {NAME} is not used in the routine, but it is defined.  This may) 0 W 
130 VLFD ( ) 69220 W (                         occur) 1828 W ( when a synthetic variable name C## is used as a variable name in a) 0 W 
130 VLFD ( ) 69220 W (                         program) 1828 W ( module.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           VARIABLE) 1801 W ( OR BLOCK COMMON NAME DOES NOT FOLLOW THE SAVE) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           STATEMENT) 1801 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( SAVE statement lacks a variable name or a common block name.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

1176 VLFD ( ) 69220 W (                                                                 -62-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( INPUT-OUTPUT) 68664 W ( UNITS USED:) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( uses a number of input and output files during execution.  Most are internal) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           working) 1801 W ( files for storing temporary information.  Each file is opened and closed by the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           program) 1801 W ( when required by its operation.  Work files are also deleted after the completion) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           of) 1801 W ( a program or subprogram module analysis.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Should) 1801 W ( an abnormal termination of FXREF occur, the work files left on the disks will be) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           deleted) 1801 W ( before processing begins when the program is restarted.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           OS/2-ECS) 1801 W ( limits each process, an executing program, to a maximum of 20 simultaneously) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           open) 1801 W ( files.  FXREF requires more than this limit when the programs or subprograms) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           being) 1801 W ( analyzed contain INCLUDE statements, since additional files must be opened.  The) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           WATCOM) 1801 W ( FORTRAN 77 compiler FXREF was developed on contains a non-standard) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FORTRAN) 1801 W ( library function named GROWHANDLES which is called to increase the total) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           maximum) 1801 W ( of open files from 20 to 40.  Operating systems other than OS/2-ECS may or) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           may) 1801 W ( not require such a file limit modification, which usually can be set by environment) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           parameters) 1801 W ( of the operating system or by the FORTRAN compiler parameters being used.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( is currently set to have a maximum of 7 INCLUDE files open simultaneously.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Likewise,) 1801 W ( other FORTRAN compilers other than WATCOM's may also have similar) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           restrictions,) 1801 W ( and the user of any other compiler may require compiler parameter or) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           program) 1801 W ( changes to increase the limit.  The code that causes the change of the maximum) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           limit) 1801 W ( for OS/2-ECS is the initial executable statement in the main module of FXREF.  In) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           any) 1801 W ( case where FXREF is being recompiled from the source code, the prospective user) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           should) 1801 W ( insure that a sufficient number of files may be opened when FXREF requires them) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           by) 1801 W ( substituting the correct call to a routine which accomplishes the same purpose, or) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           providing) 1801 W ( the correct environment operating system changes if necessary and deleting the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           call) 1801 W ( to the GROWHANDLES function.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           All) 1801 W ( files of the form {name}.XXX are work files and will be created in the same directory) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           where) 1801 W ( FXREF.EXE is located.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( routines that create a postscript listing file does not use the unit numbers shown in) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( following table.  Those units are shown after this table.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Unit) 1801 W (       Contents and Use) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           0) 1801 W (   - Error messages for listing on unit 6.  This is an ASCII text file.  The maximum record) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 length) 1361 W ( is 120 characters.  File name is MESS.LST.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           1) 1801 W (   - Reads the input file named FXREF.CCD containing the file name of the FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 source) 1361 W ( code to be analyzed.  This file is an ASCII text file.  Record structure is) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 provided) 1361 W ( in the EXECUTION section in this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      After the control cards are read and if global analysis is requested, unit 1 is closed and) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 then) 1165 W ( reopened to save all block COMMON variable names occurring in a source) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 module) 1165 W ( for creating the output tables.  This file is used to perform global analysis of) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 COMMON) 1165 W ( blocks.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   Name of the routine in which the COMMON) 0 W 
130 VLFD ( ) 66000 W (                                    block) -100 W ( occurs.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 64  A*32  16   Name of the COMMON block) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

156 VLFD ( ) 69220 W (                                                                 -63-) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF
FormFeed BottomBin 

10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

418 VLFD ( ) 66000 W (         ) -400 W (     65 - 68  I*4   17 # Number of characters of the name in cols. 1 -) 0 W 
130 VLFD ( ) 66000 W ( ) -6011 W (                                     32) -97 W 
130 VLFD ( ) 66000 W (         ) -400 W (     69 - 72  I*4   18 # Number of characters in the name in cols. 33) 0 W 
130 VLFD ( ) 66000 W (                                    -) -100 W ( 64) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     73 - 76  I*4   19 # Memory size of the COMMON block in cols. 33-) 0 W 
130 VLFD ( ) 66000 W (                                    64) -100 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (     NOTE: Fields marked with # have 128 added to their true value. This is done to) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                      prevent) 1750 W ( them from being interpreted as HEX 0A, 0D, 1A during reading and) 0 W 
130 VLFD ( ) 69220 W ( ) -2760 W (                      writing) 1750 W ( the record.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           2) 1801 W (   - The input - output units' variabale names.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      File name is: FUNT.XXX) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   The input -  output variable name.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   The ISN + 128 of the input - output state-) 0 W 
130 VLFD ( ) 66000 W (                                    ment.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     37 - 40  I*4   10   The length of the variable name in cols. 1 -) 0 W 
130 VLFD ( ) 66000 W (                                    32) -100 W ( plus 128.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           3) 1801 W (   - A list of all subprograms defined within a program.  This file does not contain intrin-) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 sic) 1361 W ( function names.  This is a binary file; file name is: SUNP.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      The file on this unit has two sections.  Section one defines the subprogram name) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 characteristics,) 1165 W ( while section 2 describes the individual arguments characteristics.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Section 1:) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   The ENTRY, FUNCTION, or SUBPROGRAM name.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   The ISN of the subprogram statement.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (          37  A*1        FUNCTION data type; ENTRY and SUBROUTINE) 0 W 
130 VLFD ( ) 66000 W (                                    statements) -100 W ( do not have a defined data) 0 W 
130 VLFD ( ) 66000 W (                                    type.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     38 - 44  A*7   11   Length characteristic of a FUNCTION.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     45 - 48  I*4   12   Bit switches) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     49 - 52  I*4   13   Number of characters in the subprogram name) 0 W 
130 VLFD ( ) 66000 W (                                    in) -100 W ( columns 1-32.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     53 - 56  I*4   14   Number of arguments for this subprogram.  A) 0 W 
130 VLFD ( ) 66000 W (                                    maximum) -100 W ( of 30 are allowed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Section 2:) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           This) 1801 W ( section immediately follows section 1 and may be repeated 30 times.  The total) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           record) 1801 W ( length is 1496 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*4    8   Argument variable name) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (          33  A*1        Argument variable data type.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     34 - 40  A*7   10   Argument variable data type length.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     41 - 44  I*4   11   Bit switches) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

136 VLFD ( ) 69220 W (                                                                 -64-) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF
FormFeed BottomBin 

10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

418 VLFD ( ) 66000 W (         ) -400 W (     45 - 48  I*4   12   Number of characters in the argument vari-) 0 W 
130 VLFD ( ) 66000 W (                                    able) -100 W ( name in columns 1-32.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           4) 1801 W (   - The statement numbers and their ISNs referenced within the source code from unit 5.) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 This) 1361 W ( file does not contain the definition ISNs of statement numbers.  This is a bi-) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 nary) 1361 W ( file; file name is: SNUM.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 4   I*4    1   Integer value of a statement number) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      5 - 8   I*4    2   Integer value of the ISN where the statement) 0 W 
130 VLFD ( ) 66000 W (                                    number) -100 W ( is referenced in the program.  The) 0 W 
130 VLFD ( ) 66000 W (                                    value) -100 W ( stored in this field is the state-) 0 W 
130 VLFD ( ) 66000 W (                                    ment) -100 W ( number plus 128.  The addition of 128) 0 W 
130 VLFD ( ) 66000 W (                                    to) -100 W ( the value prevents this field from) 0 W 
130 VLFD ( ) 66000 W (                                    being) -100 W ( interpreted as the HEX characters) 0 W 
130 VLFD ( ) 66000 W (                                    ) -100 W  2 AtrOn
(0A) 0 W  2 AtrOff
(, ) 0 W  2 AtrOn
(0D) 0 W  2 AtrOff
(, or ) 0 W  2 AtrOn
(1A) 0 W  2 AtrOff
( or any other ASCII command) 0 W 
130 VLFD ( ) 66000 W (                                    characters) -100 W ( which can cause difficulty in) 0 W 
130 VLFD ( ) 66000 W (                                    reading) -100 W ( the file.  It may be necessary to) 0 W 
130 VLFD ( ) 66000 W (                                    change) -100 W ( the value to 256 for an EBCDIC com-) 0 W 
130 VLFD ( ) 66000 W (                                    puter) -100 W ( through out FXREF.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           5) 1801 W (   - Reads the FORTRAN source code to be analyzed.  This is the file specified in record 3) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 of) 1361 W ( the FXREF.CCD file read by unit 1.  This file is an ASCII file.  The maximum) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 record) 1361 W ( length is 132 characters, but 80 is the standard.  See the PROGRAM) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 INSTALLATION) 1361 W ( AND EXECUTION section in this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      More than one file name may be processed from this unit.  See the control card) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 description) 1165 W ( in the INSTALLATION AND EXECUTION section in this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           6) 1801 W (   - The cross reference printer listing of the source code read from unit 5.  This file name) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 is) 1361 W ( specified in record 2 of FXREF.CCD read by unit 1.  This file is an ASCII text) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 file.) 1361 W (  Maximum length is 121 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      When a postscript output file is requested in record 1 of file FXREF.CCD, FXREF will) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 create) 1165 W ( a text output file with standard carriage control characters in column one of) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 each) 1165 W ( output record.  The subroutine PSPRINT will then create the postscript ver-) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 sion) 1165 W ( of the text output file.  See the PROGRAM INSTALLATION AND) 0 W 
130 VLFD ( ) 69220 W ( ) -2765 W (                 EXECUTION) 1165 W ( section in this document.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           7) 1801 W (   - The variable names and each ISN occurring in the source code from unit 5.  This is a) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 binary) 1361 W ( file; file name is: VNME.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   Variable name) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   Integer value of the ISN where the variable) 0 W 
130 VLFD ( ) 66000 W (                                    name) -100 W ( is referenced in the program.  The) 0 W 
130 VLFD ( ) 66000 W (                                    value) -100 W ( stored in this field is the state-) 0 W 
130 VLFD ( ) 66000 W (                                    ment) -100 W ( number plus 128.  The addition of 128) 0 W 
130 VLFD ( ) 66000 W (                                    to) -100 W ( the value prevents this field from) 0 W 
130 VLFD ( ) 66000 W (                                    being) -100 W ( interpreted as the HEX) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

396 VLFD ( ) 69220 W (                                                                 -65-) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF
FormFeed BottomBin 

10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

418 VLFD ( ) 66000 W (         ) -400 W (          ) 480 W (                 characters ) 0 W  2 AtrOn
(0A) 0 W  2 AtrOff
(, ) 0 W  2 AtrOn
(0D) 0 W  2 AtrOff
(, or ) 0 W  2 AtrOn
(1A) 0 W  2 AtrOff
( or any other) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    ASCII) 33 W ( command characters which can cause) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    difficulty) 33 W ( in reading the file.  EBCDIC) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    computers) 33 W ( may require 128 be changed to) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    256) 33 W ( through out FXREF.  A value of -1 in) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    this) 33 W ( field indicates the variable name oc-) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    curs) 33 W ( in code brought into the current) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    program) 33 W ( or subprogram through an INCLUDE) 0 W 
130 VLFD ( ) 66000 W ( ) -5988 W (                                    statement.) 33 W 
130 VLFD ( ) 66000 W (         ) -400 W (          37 A*1        Data type code) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (                        B - COMPLEX, C - CHARACTER, D - DOUBLE) 0 W 
130 VLFD ( ) 66000 W ( ) -6030 W (                                   PRECISION,) -102 W ( E - DOUBLE COMPLEX, I - INTEGER,) 0 W 
130 VLFD ( ) 66000 W ( ) -6030 W (                                   L) -102 W ( - LOGICAL, R - REAL) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     38 - 44 A*7   11   Length of the data type of a variable name.) 0 W 
130 VLFD ( ) 66000 W ( ) -6030 W (                                   ASCII) -102 W ( field) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     45 - 48 I*4   12   Bit switches) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     49 - 52 I*4   13   Number of characters in the variable name in) 0 W 
130 VLFD ( ) 66000 W (                                    columns) -100 W ( 1-32) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           8) 1801 W (   - The list of variable unit numbers used by the source code from unit 5.  This is a bi-) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 nary) 1361 W ( file; file name is: IUNT.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 4   I*4    1   Input-output unit number.  Units are desig-) 0 W 
130 VLFD ( ) 66000 W (                                    nated) -100 W ( an integer value + 128.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      5 - 8   I*4    2   Integer value of the ISN where the input-) 0 W 
130 VLFD ( ) 66000 W (                                    output) -100 W ( name or number is referenced in the) 0 W 
130 VLFD ( ) 66000 W (                                    program.) -100 W (  The value stored in this field) 0 W 
130 VLFD ( ) 66000 W (                                    is) -100 W ( the statement number plus 128.  The ad-) 0 W 
130 VLFD ( ) 66000 W (                                    dition) -100 W ( of 128 to the value prevents this) 0 W 
130 VLFD ( ) 66000 W (                                    field) -100 W ( from being interpreted as the HEX) 0 W 
130 VLFD ( ) 66000 W (                                    characters) -100 W ( ) 0 W  2 AtrOn
(0A) 0 W  2 AtrOff
(, ) 0 W  2 AtrOn
(0D) 0 W  2 AtrOff
(, or ) 0 W  2 AtrOn
(1A) 0 W  2 AtrOff
( or any other) 0 W 
130 VLFD ( ) 66000 W (                                    ASCII) -100 W ( command characters which can cause) 0 W 
130 VLFD ( ) 66000 W (                                    difficulty) -100 W ( in reading the file.  EBCDIC) 0 W 
130 VLFD ( ) 66000 W (                                    computers) -100 W ( may require changing 128 to 256) 0 W 
130 VLFD ( ) 66000 W (                                    through) -100 W ( out FXREF.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (       9 - 10  A*2       Input-output unit number.  Units are desig-) 0 W 
130 VLFD ( ) 66000 W (                                    nated) -100 W ( as ASCII digits.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           9) 1801 W (   - List of character constants, i.e. literals or hollerith fields, occurring in the source code) 0 W 
130 VLFD ( ) 69220 W ( ) -2767 W (                 from) 1361 W ( unit 5.  This is a binary file.  File name is: SLIT.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 80  A*80  20   The value of a literal or character constant) 0 W 
130 VLFD ( ) 66000 W (                                    including) -100 W ( the encapsulating apostrophes or) 0 W 
130 VLFD ( ) 66000 W (                                    quotation) -100 W ( marks.  If the literal is longer) 0 W 
130 VLFD ( ) 66000 W (                                    than) -100 W ( 80 characters, it is truncated to 80) 0 W 
130 VLFD ( ) 66000 W (                                    characters.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     81 - 84  I*4   21   The number of characters in the literal.) 0 W 
130 VLFD ( ) 66000 W (                                    Stored) -100 W ( as an integer value.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

396 VLFD ( ) 69220 W (                                                                 -66-) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF
FormFeed BottomBin 

10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

418 VLFD ( ) 66000 W (         ) -400 W (     85 - 88  I*4   22   Integer value of the ISN where the literal) 0 W 
130 VLFD ( ) 66000 W (                                    is) -100 W ( referenced in the program.  The value) 0 W 
130 VLFD ( ) 66000 W (                                    stored) -100 W ( in this field is the statement) 0 W 
130 VLFD ( ) 66000 W (                                    number) -100 W ( plus 128.  The addition of 128 to) 0 W 
130 VLFD ( ) 66000 W (                                    the) -100 W ( value prevents this field from being) 0 W 
130 VLFD ( ) 66000 W (                                    interpreted) -100 W ( as the HEX characters ) 0 W  2 AtrOn
(0A) 0 W  2 AtrOff
(, ) 0 W  2 AtrOn
(0D) 0 W  2 AtrOff
(,) 0 W 
130 VLFD ( ) 66000 W (                                    or) -100 W ( ) 0 W  2 AtrOn
(1A) 0 W  2 AtrOff
( or any other ASCII command charac-) 0 W 
130 VLFD ( ) 66000 W (                                    ters) -100 W ( which can cause difficulty in) 0 W 
130 VLFD ( ) 66000 W (                                    reading) -100 W ( the file.  EBCDIC computers may) 0 W 
130 VLFD ( ) 66000 W (                                    require) -100 W ( changing 128 to 256 through out) 0 W 
130 VLFD ( ) 66000 W (                                    FXREF.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (      89- 92  I*4   23   Integer value of the argument number in a) 0 W 
130 VLFD ( ) 66000 W (                                    CALL) -100 W ( statement; set to zero if not a CALL) 0 W 
130 VLFD ( ) 66000 W (                                    statement.) -100 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           10) 1801 W (  - A list of all subprogram names used in a CALL statement.  Subprogram names used) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 as) 1525 W ( arguments in a CALL statement are not placed in this file.  This is a binary file;) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 file) 1525 W ( name is: CALL.XXX.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Section 1:) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   The called subprogram name.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   ISN of the CALL statement.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (          37  A*1        FUNCTION data type; ENTRY and SUBROUTINE) 0 W 
130 VLFD ( ) 66000 W (                                    statements) -100 W ( do not have a defined data) 0 W 
130 VLFD ( ) 66000 W (                                    type.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     38 - 44  A*7   11   Length characteristic of a FUNCTION state-) 0 W 
130 VLFD ( ) 66000 W (                                    ment.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     45 - 48  I*4   12   Bit switches) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     49 - 52  I*4   13   Number of characters in the variable name in) 0 W 
130 VLFD ( ) 66000 W (                                    columns) -100 W ( 1-32 of section 1.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     53 - 84  A*32  21   Name of the routine were the CALL statement) 0 W 
130 VLFD ( ) 66000 W (                                    occurs.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     85 - 88  I*4   22   Number of characters in the variable name in) 0 W 
130 VLFD ( ) 66000 W (                                    cols.) -100 W ( 53 - 84 of section 1.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     89 - 92  I*4   23   Number of arguments in this CALL statement.) 0 W 
130 VLFD ( ) 66000 W (                                    A) -100 W ( maximum of 30 are allowed.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Section 2:) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           This) 1801 W ( section immediately follows section 1 and may be repeated 30 times.  The total) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           record) 1801 W ( length is 1532 characters.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*4    8   Argument variable name) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (          33  A*1        Argument data type.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     34 - 40  A*7   10   Argument data length.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     41 - 44  I*4   11   Bit switches) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     45 - 48  I*4   12   Number of characters in the argument vari-) 0 W 
130 VLFD ( ) 66000 W (                                    able) -100 W ( name in columns 1-32 of section 2.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

396 VLFD ( ) 69220 W (                                                                 -67-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

548 VLFD ( ) 69220 W ( ) -2771 W (           11) 1801 W (  - Blank and named COMMON definitions organized by COMMON block occurring in) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 the) 1525 W ( source code from unit 5.  This is a binary file.  This file is used to process) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 COMMON) 1525 W ( variables in routine PCOMM; it is not used in global checking of) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 COMMON) 1525 W ( blocks length consistency.  File name is: COMM.XXX.) 0 W 
260 VLFD ( ) 69220 W (                 Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   Variable name belonging to a COMMON block.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   The number of characters in the variable) 0 W 
130 VLFD ( ) 66000 W (                                    name) -100 W ( in columns 1-32. The value is nega-) 0 W 
130 VLFD ( ) 66000 W (                                    tive) -100 W ( if the variable name in columns 1-32) 0 W 
130 VLFD ( ) 66000 W (                                    is) -100 W ( the COMMON block name; it is positive) 0 W 
130 VLFD ( ) 66000 W (                                    for) -100 W ( the variable names that are placed in) 0 W 
130 VLFD ( ) 66000 W (                                    the) -100 W ( COMMON block.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     37 - 44  A*8   11   Type and length definitions for the variable) 0 W 
130 VLFD ( ) 66000 W (                                    name) -100 W ( in cols. 1-32.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           12) 1801 W (  - Equivalenced variable names organized by EQUIVALENCE group in routine) 0 W 
130 VLFD ( ) 69220 W ( ) -2775 W (                 PEQUIC) 1525 W ( from unit 2.  This is a binary file; file name is: EQUI.XXX) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W (      Record Structure) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W (      Columns TYPE WORD  Description) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (      1 - 32  A*32   8   Variable name belonging to an equivalenced) 0 W 
130 VLFD ( ) 66000 W (                                    group.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     33 - 36  I*4    9   The ISN of the EQUIVALENCE statement con-) 0 W 
130 VLFD ( ) 66000 W (                                    taining) -100 W ( the variable in columns 1-32.  The) 0 W 
130 VLFD ( ) 66000 W (                                    value) -100 W ( is negative for the initial variable) 0 W 
130 VLFD ( ) 66000 W (                                    in) -100 W ( an equivalenced group.  For all other) 0 W 
130 VLFD ( ) 66000 W (                                    variables) -100 W ( belonging to the same equiv-) 0 W 
130 VLFD ( ) 66000 W (                                    alenced) -100 W ( group, the value is positive.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     37 - 40  I*4   10   The number of subscripts for the variable) 0 W 
130 VLFD ( ) 66000 W (                                    name) -100 W ( in columns 1-32 stored as an integer) 0 W 
130 VLFD ( ) 66000 W (                                    value.) -100 W 
130 VLFD ( ) 66000 W (         ) -400 W (     41 - 44  I*4   11   Location of the initial character in a) 0 W 
130 VLFD ( ) 66000 W (                                    character) -100 W ( variable substring stored as an) 0 W 
130 VLFD ( ) 66000 W (                                    integer) -100 W ( value.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     45 - 48  I*4   12   Integer value of the first subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     47 - 52  I*4   13   Integer value of the second subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     53 - 56  I*4   14   Integer value of the third subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     57 - 60  I*4   15   Integer value of the fourth subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     61 - 64  I*4   16   Integer value of the fifth subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     65 - 68  I*4   17   Integer value of the sixth subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     69 - 72  I*4   18   Integer value of the seventh subscript.) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     73 - 76  I*4   19   Bit switches) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (     77 - 80  I*4   20   Associate variable index of the record) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           13) 1801 W ( - Reserved, used for debugging) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           14) 1801 W ( through 20) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              Units) 1848 W ( 14 through 20 are used for the input of FORTRAN source code files) 0 W 
130 VLFD ( ) 69220 W (                         that) 1828 W ( are brought into a program or subprogram by using the INCLUDE) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

396 VLFD ( ) 69220 W (                                                                 -68-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              statement.) 1848 W (  Include files may be nested up to 6 deep in FXREF.  Each) 0 W 
130 VLFD ( ) 69220 W (                         FORTRAN) 1828 W ( compiler has its own standard for nesting of INCLUDE state-) 0 W 
130 VLFD ( ) 69220 W (                         ments.) 1828 W ( FXREF allows nesting up to a depth of 6, but the program has a) 0 W 
130 VLFD ( ) 69220 W (                         capacity) 1828 W ( of a depth up to 19.  To accommodate this larger possibility, the to-) 0 W 
130 VLFD ( ) 69220 W (                         tal) 1828 W ( number of simultaneously open files must be increased from 20 to 40.) 0 W 
130 VLFD ( ) 69220 W (                         The) 1828 W ( nesting depth is a function of the  FORTRAN compiler in use and the) 0 W 
130 VLFD ( ) 69220 W (                         operating) 1828 W ( system.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           ) 1801 W ( ) -2772 W (              The) 1848 W ( file name specified in an INCLUDE statement must provide the path) 0 W 
130 VLFD ( ) 69220 W (                         name) 1828 W ( when the INCLUDE file is not in the same directory as the execute) 0 W 
130 VLFD ( ) 69220 W (                         module.) 1828 W (  Otherwise, FXREF assumes the INCLUDE file is in the current) 0 W 
130 VLFD ( ) 69220 W (                         directory.) 1828 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           INPUT) 1801 W ( - OUTPUT UNITS FOR POSTSCRIPT ROUTINES) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( input-output units used by the postscript modules are different from those used by) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( remainder of FXREF.  The subroutines CARCTL, HEADER, NUMCV, PAGENM, and) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           REVPRT) 1801 W ( use of read - write units are listed below.  The final listing may be one or two) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           files) 1801 W ( depending on the parameters set in the control card file, FXREF.CCD.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Unit) 1801 W (          Contents) 1570 W ( and Use) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IIN) 1801 W (    - Input of the FXREF listing generated by the LIST subroutine.  This is set to a) 0 W 
130 VLFD ( ) 69220 W (                    value) 1416 W ( of 1.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           IOUT) 1801 W (   - Output of the postscript listing created by the PSPRINT subroutine.  This unit) 0 W 
130 VLFD ( ) 69220 W (                    will) 1796 W ( write the odd page postscript output file.  The unit number may be 2, 4, or 7) 0 W 
130 VLFD ( ) 69220 W (                    in) 1796 W ( rotation.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           JOUT) 1801 W (   - Output of the FXREF postscript listing even pages in ascending order.  The unit) 0 W 
130 VLFD ( ) 69220 W ( ) -2770 W (                    number) 1870 W ( is set to a value of 4) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           JOUTW) 1801 W (  - Output of the postscript listing even pages in reverse page order.  This unit is) 0 W 
130 VLFD ( ) 69220 W (                    set) 2222 W ( to a value of 7.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

2996 VLFD ( ) 69220 W (                                                                 -69-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           BIT) 1801 W ( SWITCHES) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( uses a standard set of bit switches though out the program to indicate various) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           characteristics) 1801 W ( of a variable name.  Variable name means a subprogram name or variable) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           used) 1801 W ( within a program module.  Bit switches are referred to in the input-output unit) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           records) 1801 W ( described above.  They occupy one word of 32 bits and are defined in the table) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           below.) 1801 W (  When bit switches are part of a record, they are usually in columns 45-48 of the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           record.) 1801 W (  Bit switches are also part of various table records stored in memory.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           When) 1801 W ( a switch is set to 1 \(one\), the switch is on \(equivalent to true\); when set to 0 \(zero\),) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( switch is off \(equivalent to false.\)) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         CHAR-) -400 W (        \(IF ON\)) 0 W 
130 VLFD ( ) 66000 W (         ACTER) -400 W (          HEX    PRINT) 0 W 
130 VLFD ( ) 66000 W (         NUMBER) -400 W (   BIT  VALUE   CODE    DESCRIPTION) 0 W 
260 VLFD ( ) 66000 W (         42/45) -400 W (    0      1             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         1      2       C     This variable is used in COMMON) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         2      4       R     This variable is used in a RECORD) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         3      8       E     This variable is used in an EQUIVALENCE) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         4      1       N     This variable is in a NAMELIST) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         5      2       U     This variable is in a UNION) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         6      4       T     This variable in a STRUCTURE) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (         7      8       A     This variable is used as an argument) 0 W 
130 VLFD ( ) 66000 W (         43/46) -400 W (    8      1       B     This variable is used in an ENTRY) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       definition) -92 W 
130 VLFD ( ) 66000 W (         ) -400 W (         9      2       S     This variable is a SUBROUTINE defini-) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       tion) -92 W 
130 VLFD ( ) 66000 W (         ) -400 W (        10      4       F     This variable is a FUNCTION definition) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        11      8       C     This variable is a COMMON definition) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        12      1       N     This variable is a NAMELIST definition) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        13      2       T     This variable is a STRUCTURE definition) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        14      4       P     This variable is a PARAMETER definition) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        15      8             This variable is in the output tables) 0 W 
130 VLFD ( ) 66000 W (         44/47) -400 W (   16      1       F     This variable is an intrinsic FUNCTION) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        17      2       D     This variable exists in a DIMENSION) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        18      4             A called subprogram name matches a) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       defined) -92 W ( subprogram name) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        19      8             A FUNCTION has a length but no data) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       type) -92 W 
130 VLFD ( ) 66000 W (         ) -400 W (        20      1             Variable is an ENTRY, FUNCTION, or) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       SUBROUTINE) -92 W ( dummy argument) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        21      2             A subprogram name is an external) 0 W 
130 VLFD ( ) 66000 W ( ) -6012 W (                                       routine) -92 W 
130 VLFD ( ) 66000 W (         ) -400 W (        22      4             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        23      8             Not used) 0 W 
130 VLFD ( ) 66000 W (         45/48) -400 W (   24      1             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        25      2             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        26      4             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        27      8             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        28      1             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        29      2             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        30      4             Not used) 0 W 
130 VLFD ( ) 66000 W (         ) -400 W (        31      8             Not used) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

396 VLFD ( ) 69220 W (                                                                 -70-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( MODIFICATIONS) 68664 W ( FOR BIG ENDIAN COMPUTERS AND OTHER OPERATING) 0 W 
120 VLFD ( SYSTEMS:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( may exceed the operating system limit for the number of simultaneously open) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           files) 1801 W ( for some operating systems.  If this is a consistent problem, modify the limit value of) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( required system configuration files when required.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           File) 1801 W ( names used by this program adhere to the OS/2-ECS standard form,) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           XXXXXXXX.YYY) 1801 W ( where XXXXXXXX is the first part and YYY is the second part.  Other) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           operating) 1801 W ( systems will  require FXREF's code to be changed to process their naming stan-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           dard.) 1801 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( output listing file name modification for split postscript files may require changes) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           for) 1801 W ( other operating systems and EBCDIC computers.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           In) 1801 W ( order to simplify modification of FXREF for a big endian computer and operating sys-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           tems) 1801 W ( other than OS/2-ECS the named COMMON statement /ASCII/ contains the most) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           important) 1801 W ( variables that require modification.  It is shown below for little endian ASCII) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           coding.) 1801 W ( This is the form compiled into the OS/2-ECS version, and the statement occurs in) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( BLOCK DATA subroutine.) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W ( COMMON /ASCII/ ICAPS/32/, ICTN/64/, IDTN/48/, IDXA/1/, IDXB/2/,) 0 W 
130 VLFD ( ) 66000 W (         1) -400 W (               IDXC/3/, IDXD/4/, IDXE/1/, IDXF/2/) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( variables IDXA, IDXB, IDXC, etc., representing subscript values, must be set to) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           values) 1801 W ( correct for the computer system being used.  The other variables, ICTN, IDTN con-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           tain) 1801 W ( the values for changing between numeric values as algebraic quantities and) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           character) 1801 W ( digits.  The variable ICAPS contains the value to force lower case alphabetic) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           characters) 1801 W ( to upper case.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( big endian EBCDIC version is shown below.  However, they should be verified as ac-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           curate) 1801 W ( before recompiling for EBCDIC big endian computers.) 0 W 
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF
10 /MARC-Courier MF
10 /MARC-Courier-Bold MF SF

260 VLFD ( ) 66000 W (         ) -400 W ( COMMON /ASCII/ ICAPS/Z'20'/, ICTN/Z'40'/, IDTN/Z'30'/, IDXA/4/,) 0 W 
130 VLFD ( ) 66000 W (         1) -400 W (               IDXB/3/, IDXC/2/, IDXD/1/, IDXE/2/, IDXF/1/) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           This) 1801 W ( form is commented out for the OS/2-ECS version; to compile a big endian version,) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           comment) 1801 W ( out the ASCII version and remove the C in column one of the EBCDIC version.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           None) 1801 W ( of the prospective changes have been tested.  See the comments in the BLOCK) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           DATA) 1801 W ( subroutine source code.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Other) 1801 W ( subscript values throughout FXREF may require modification to convert the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           references) 1801 W ( of subscript values for a big endian computer.  While an extensive effort has) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           been) 1801 W ( made to remove these values through use of the /ASCII/ common, not all of the cases) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           may) 1801 W ( have been identified.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           In) 1801 W ( SUBROUTINE COMPRS, four hexadecimal constants are defined for variables CX30,) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           CX5A,) 1801 W ( CX60, and CX70 and are used to exclude ASCII characters that are not FORTRAN) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           language) 1801 W ( usage.  EBCDIC computers must recode all these constants and all the IF state-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ments) 1801 W ( using them.  Additional constants and IF statements will be required to perform) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( tests to detect invalid logical operators in EBCDIC coded FORTRAN code.) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

816 VLFD ( ) 69220 W (                                                                 -71-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( maximum exponent value of a floating point number for personal computers is 308.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           Other) 1801 W ( FORTRAN compilers and different hardware for CPUs may have different values.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           If) 1801 W ( desired, the 308 value could be modified.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( table of FORTRAN intrinsic functions in subroutine CHKNME \(variable FUNTBL\) is) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ordered) 1801 W ( in ASCII collating sequence.  The table must be changed to EBCDIC collating se-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           quence) 1801 W ( for an EBCDIC computer.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           None) 1801 W ( of the suggested changes for other operating systems and big endian computers) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           have) 1801 W ( been tested.  Also, review the requirements section at the beginning of this docu-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           ment.) 1801 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( uses two routines named GETDAT, and GETTIM to obtain information to create) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           the) 1801 W ( "%%Date:" parameter for postscript output file listings.  The user of FXREF must re-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           place) 1801 W ( these subroutine names with one existing for their compiler or other operating) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           system) 1801 W ( that obtain the same information.  If the user desires to omit the creation and) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           date) 1801 W ( information, they may comment out the necessary CALL statements and the output) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           WRITE) 1801 W ( statement where they are written and modify the variable CFMT in routine) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           PSPRINT) 1801 W ( containing the format used to write the postscript prologue header.  These) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           routines) 1801 W ( are used in the PSPRINT subroutine that creates a postscript version of the out-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           put) 1801 W ( listing file.  The main routine also uses GETDAT and GETTIM to determine the time) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           and) 1801 W ( date of execution that is printed on the first page of the output listing.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Subroutine) 1801 W ( GETDAT returns three arguments containing the year, month, and day as in-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           teger) 1801 W ( values.  Subroutine GETTIM returns four arguments containing the hour. minute,) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           second,) 1801 W ( and hundredths of a second.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           FXREF) 1801 W ( uses a number different methods to convert text numerical values to and from) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           arithmetic) 1801 W ( values of numbers.  Two subroutines named: NUMBER and ITOC are sub-) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           routines) 1801 W ( within FXREF.  READ and WRITE statements are also used extensively to) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           make) 1801 W ( numeric value conversions from one variable type to another.  The major problem) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           with) 1801 W ( some of these techniques is the difference of bit order between little endian and big) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           endian) 1801 W ( computers.  Careful examination of type conversions are required to insure the) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           correct) 1801 W ( results are obtained when big endian computers recompile FXREF.) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

250 VLFD ( WARRANTY) 68664 W ( AND OTHER ISSUES:) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

260 VLFD ( ) 69220 W ( ) -2771 W (           This) 1801 W ( program is freeware and may be modified, copied, and distributed as desired.) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           Although) 1801 W ( FXREF has been tested against a wide spectrum of FORTRAN programs, no) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           warranty) 1801 W ( of any kind, either expressed or implied, as to its correctness and usability is) 0 W 
130 VLFD ( ) 69220 W ( ) -2771 W (           made.) 1801 W (  In using this program, the user assumes all liability and all risk.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           The) 1801 W ( GNU General Public license applies to this program and its documentation.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           Copyright) 1801 W ( is retained by the author.) 0 W 
260 VLFD ( ) 69220 W ( ) -2771 W (           All) 1801 W ( trademarks are the property of their respective owners.) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

250 VLFD ( MAINTENANCE:) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

250 VLFD ( July) 69220 W ( 2008 - Original release) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

816 VLFD ( ) 69220 W (                                                                 -72-) 0 W 
12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF
FormFeed BottomBin 

12 /MARC-NewCenturySchlbk-Roman MF
12 /MARC-NewCenturySchlbk-Bold MF
12 /MARC-NewCenturySchlbk-Italic MF
12 /MARC-NewCenturySchlbk-Bold MF
10 /Courier MF
10 /Courier MF
10 /Courier MF
10 /Courier MF SF

408 VLFD ( INDEX) 68664 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

130 VLFD ( !,) 69220 W ( 16, 48) 0 W ( ) -2758 W (                               FORTRAN) 2138 W ( Statements) 0 W 
130 VLFD ( !,) 69220 W ( 16, 48) 0 W ( ) -2758 W (                               ACCEPT,) 2138 W ( 11, 12, 40) 0 W 
130 VLFD ( #,) 69220 W ( 16,34, 70) 0 W ( ) -2768 W (                            ASSIGN,) 2076 W ( 11, 40) 0 W 
130 VLFD ( $,) 69220 W ( 16, 45) 0 W ( ) -2754 W (                               BACKSPACE,) 2054 W ( 11, 40, 50) 0 W 
130 VLFD ( %%Page,) 69220 W ( 43) 0 W ( ) -2760 W (                              BLOCK) 1648 W ( DATA, 11, 17, 40, 66, 77) 0 W 
130 VLFD ( %LOC,) 69220 W ( 18, 33) 0 W (                            BYTE,) 1700 W ( 11, 12, 23, 40, 42, 51, 66) 0 W 
130 VLFD ( %REF,) 69220 W ( 18, 33) 0 W (                            CALL,) 1720 W ( 6, 11, 14, 23, 26, 31, 36,) 0 W 
130 VLFD ( %VAL,) 69220 W ( 18, 33) 0 W ( ) -2771 W (                               37,) 1741 W ( 40, 41, 43, 46,49, 50, 51,) 0 W 
130 VLFD ( &,) 69220 W ( 16,48) 0 W ( ) -2770 W (                                   57,) 1912 W ( 61, 65, 66, 68, 73, 78) 0 W 
130 VLFD ( *,) 69220 W ( 16, 32, 34, 45, 57) 0 W ( ) -2776 W (                   CHARACTER,) 2504 W ( 11, 23, 33, 35, 36, 37,) 0 W 
130 VLFD ( *\(*\),) 69220 W ( 32) 0 W ( ) -2770 W (                                   40,) 2066 W ( 52, 59, 66, 72) 0 W 
130 VLFD ( <,) 69220 W ( 55, 56) 0 W ( ) -2758 W (                               COMPLEX,) 2038 W ( 11, 23, 33, 36, 40, 66,) 0 W 
130 VLFD ( <...>,) 69220 W ( 13, 61) 0 W ( ) -2770 W (                              72) 2191 W 
130 VLFD ( >,) 69220 W ( 55, 56) 0 W ( ) -2758 W (                               CONTINUE,) 2038 W ( 11, 40) 0 W 
130 VLFD ( A,) 69220 W ( 55, 56) 0 W ( ) -2771 W (                               CYCLE,) 2001 W ( 11) 0 W 
130 VLFD ( ASTERISK,) 69220 W ( 16, 32, 49) 0 W (                    DATA,) 1519 W ( 11, 15, 23, 24, 36, 40, 42,) 0 W 
130 VLFD ( ASCII,) 69220 W ( 3, 15, 41, 42, 43, 69,) 0 W ( ) -2776 W (              52,) 2704 W ( 66, 67) 0 W 
130 VLFD ( ) 69220 W (  71, 72, 73, 77) 0 W ( ) -2764 W (                        DECODE,) 2306 W ( 11, 12, 40, 59, 66) 0 W 
130 VLFD ( B,) 69220 W ( 15, 24, 36) 0 W ( ) -2757 W (                           DIMENSION,) 2091 W ( 11, 16, 17, 33, 36, 40,) 0 W 
130 VLFD ( Big) 69220 W ( Endian, 3, 78) 0 W ( ) -2776 W (                          41,) 1941 W ( 42, 53, 56, 60, 65, 68, 76) 0 W 
130 VLFD ( Binary) 69220 W ( Constants) 0 W ( ) -2762 W (                        DO,) 1683 W ( 11, 12, 31, 40) 0 W 
130 VLFD ( ) 69220 W (  00101101, 15) 0 W ( ) -2770 W (                          DO) 1915 W ( WHILE, 11, 12, 13, 40, 60) 0 W 
130 VLFD ( ) 69220 W (  01010111, 24) 0 W ( ) -2770 W (                          DOUBLE) 1915 W ( COMPLEX, 11, 40, 42, 50, 66,) 0 W 
130 VLFD ( BLOCK) 69220 W ( DATA, 3) 0 W ( ) -2760 W (                              72) 1336 W 
130 VLFD ( C,) 69220 W ( 15, 16, 36, 45) 0 W ( ) -2759 W (                       DOUBLE) 2213 W ( PRECISION, 11, 40, 42, 50,) 0 W 
130 VLFD ( c,) 69220 W ( 45) 0 W ( ) -2770 W (                                      66,) 2005 W ( 72) 0 W 
130 VLFD ( C##,) 69220 W ( 27, 68) 0 W ( ) -2763 W (                             ELSE,) 1947 W ( 11, 40, 53) 0 W 
130 VLFD ( C##EX,) 69220 W ( 27, 68) 0 W ( ) -2763 W (                           ELSE) 1769 W ( IF, 11) 0 W 
130 VLFD ( C##LIT,) 69220 W ( 27) 0 W ( ) -2760 W (                              ENCODE,) 1765 W ( 11, 12, 40, 59, 66) 0 W 
130 VLFD ( C##LOG,) 69220 W ( 27) 0 W (                              END,) 1605 W ( 11, 31, 40, 53) 0 W 
130 VLFD ( C##NUM,) 69220 W ( 27) 0 W (                              END) 1488 W ( DO, 11, 12, 40) 0 W 
130 VLFD ( C##STM,) 69220 W ( 27) 0 W (                              ENDFILE,) 1599 W ( 11, 12, 40, 53) 0 W 
130 VLFD ( C##nnn,) 69220 W ( 27) 0 W (                              END) 1735 W ( IF, 11) 0 W 
130 VLFD ( C/C++,) 69220 W ( 15, 36) 0 W ( ) -2770 W (                           END) 1890 W ( MAP, 11, 12, 33, 66) 0 W 
130 VLFD ( Character) 69220 W ( Constants) 0 W ( ) -2776 W (                     END) 1616 W ( STRUCTURE, 11, 12, 41, 66) 0 W 
130 VLFD ( ) 69220 W (  ABC, 15) 0 W ( ) -2774 W (                               END) 1894 W ( UNION, 11, 12,33, 66) 0 W 
130 VLFD ( ) 69220 W (  CBA, 15) 0 W ( ) -2774 W (                               END) 1894 W ( WHILE, 11, 12, 13, 14) 0 W 
130 VLFD ( CONFIG.SYS) 69220 W ( 9, 10) 0 W ( ) -2762 W (                        ENTRY,) 1373 W ( 6, 11, 23, 24, 37, 39, 40,) 0 W 
130 VLFD ( Constants) 69220 W ( ) -2750 W (                                  41,) 1805 W ( 43, 47, 49, 50, 53, 56,) 0 W 
130 VLFD ( ) 69220 W (  Binary, 14, 15) 0 W ( ) -2755 W (                           62,) 2115 W ( 64, 67, 70, 73, 76) 0 W 
130 VLFD ( ) 69220 W (  Character, 3, 14, 26, 30,) 0 W ( ) -2771 W (             EQUIVALENCE,) 2807 W ( 3, 11, 17, 26, 36,) 0 W 
130 VLFD ( ) 69220 W (    36, 70) 0 W ( ) -2750 W (                                 40,) 2190 W ( 41, 42, 47, 53, 54, 60, 61,) 0 W 
130 VLFD ( ) 69220 W (  Hexadecimal, 14, 15, 24,) 0 W ( ) -2778 W (                 63,) 2184 W ( 65, 66, 74, 76) 0 W 
130 VLFD ( ) 69220 W (  Octal, 14, 15) 0 W ( ) -2770 W (                         EXIT,) 2222 W ( 11) 0 W 
130 VLFD ( D,) 69220 W ( 16, 45) 0 W ( ) -2773 W (                               FORMAT,) 1983 W ( 11, 13, 14, 23, 33, 35,) 0 W 
130 VLFD ( d,) 69220 W ( 16, 45) 0 W ( ) -2766 W (                                  36,) 2039 W ( 41, 43, 54, 55, 60, 62) 0 W 
130 VLFD ( DOS,) 69220 W ( 3) 0 W ( ) -2748 W (                                  FUNCTION,) 1802 W ( 6, 11, 18, 26, 31, 32,) 0 W 
130 VLFD ( EBCDIC,) 69220 W ( 4, 71, 72, 73, 77, 78) 0 W ( ) -2774 W (              37,) 2056 W ( 39, 40, 41, 434, 46, 47,) 0 W 
130 VLFD ( FORTRAN) 69220 W ( 66, 23) 0 W ( ) -2753 W (                             49,) 1407 W ( 50, 53, 55, 56, 64, 65,) 0 W 
130 VLFD ( FORTRAN) 69220 W ( 77, 3, 11, 12, 13, 24,) 0 W ( ) -2769 W (             66,) 1643 W ( 70, 76) 0 W 
130 VLFD ( ) 69220 W (  28, 31, 36, 44) 0 W ( ) -2764 W (                        GO) 2306 W ( TO, 11, 40) 0 W 
130 VLFD ( FXREF.CCD,) 69220 W ( 5, 9, 28, 29, 30,) 0 W ( ) -2776 W (            IF,) 1713 W ( 11, 40, 50, 77) 0 W 
130 VLFD ( ) 69220 W (  46, 47, 48, 69, 71) 0 W (                    IMPLICIT,) 2490 W ( 11, 13, 33, 36, 40, 41,) 0 W 
130 VLFD ( FORTRAN) 69220 W ( LINT, 3) 0 W ( ) -2768 W (                           62,) 1214 W ( 63, 66, 67) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

276 VLFD ( ) 69220 W (                                                                 -73-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
FormFeed BottomBin 

418 VLFD ( FORTRAN) 69220 W ( Statements \(cont.\)) 0 W 
130 VLFD ( ) 69220 W (  INCLUDE, 8, 10, 11, 13, 26,) 0 W ( ) -2770 W (           Hexadecimal) 2070 W ( Constants) 0 W 
130 VLFD ( ) 69220 W (    27, 30, 31, 32, 33, 35,) 0 W ( ) -2768 W (                00,) 3128 W ( 15) 0 W 
130 VLFD ( ) 69220 W (    37, 40, 44, 53, 57, 58,) 0 W ( ) -2768 W (                09,) 3128 W ( 3) 0 W 
130 VLFD ( ) 69220 W (    60, 62, 66, 69, 72, 74,) 0 W ( ) -2768 W (                0A,) 3128 W ( 3, 15, 72, 73) 0 W 
130 VLFD ( ) 69220 W (    75) 0 W ( ) -2768 W (                                     1A,) 2104 W ( 4, 72, 73) 0 W 
130 VLFD ( ) 69220 W (  INQUIRE, 11, 13, 40, 58, 67) 0 W (              CF,) 2030 W ( 13) 0 W 
130 VLFD ( ) 69220 W (  INTEGER, 11, 23, 33, 35, 36,) 0 W ( ) -2771 W (             AF01,) 2057 W ( 24) 0 W 
130 VLFD ( ) 69220 W (    40, 49, 52, 66, 72) 0 W ( ) -2768 W (                     00434241,) 2648 W ( 15) 0 W 
130 VLFD ( ) 69220 W (  INTRINSIC, 11, 40, 66) 0 W (                    41424300,) 1792 W ( 150) 0 W 
130 VLFD ( ) 69220 W (  LOGICAL, 11, 12, 23, 35, 40,) 0 W (          Hollerith,) 2185 W ( 13, 23) 0 W 
130 VLFD ( ) 69220 W (    52, 60, 66, 72) 0 W ( ) -2772 W (                      Horizontal) 2516 W ( Tab, 3) 0 W 
130 VLFD ( ) 69220 W (  MAP, 11, 12, 33, 41, 66, 67) 0 W ( ) -2779 W (           Intrinsic) 2659 W ( Functions, 17-23) 0 W 
130 VLFD ( ) 69220 W (  NAMELIST, 11, 40, 66, 76) 0 W ( ) -2774 W (              Little) 1561 W ( Endian, 3, 5, 78) 0 W 
130 VLFD ( ) 69220 W (  OPEN, 11, 13, 40, 64, 67) 0 W ( ) -2774 W (              Logical) 2221 W ( Constants) 0 W 
130 VLFD ( ) 69220 W (  PARAMETER, 11, 16, 17, 26,) 0 W (               .FALSE.,) 1340 W ( 28, 30) 0 W 
130 VLFD ( ) 69220 W (    32, 40, 41, 47, 51, 53,) 0 W ( ) -2768 W (                .TRUE.,) 3128 W ( 28, 30) 0 W 
130 VLFD ( ) 69220 W (    59, 60, 62, 63, 64, 66,) 0 W ( ) -2779 W (             Microway,) 3403 W ( Compiler, 3) 0 W 
130 VLFD ( ) 69220 W (    67, 76) 0 W (                              O,) 2216 W ( 15, 24, 32, 36) 0 W 
130 VLFD ( ) 69220 W (  PAUSE, 11, 40, 63) 0 W ( ) -2769 W (                     Octal) 1869 W ( Constants) 0 W 
130 VLFD ( ) 69220 W (  PRINT, 11, 40) 0 W ( ) -2756 W (                            7,) 1907 W ( 15) 0 W 
130 VLFD ( ) 69220 W (  PROGRAM, 11, 40, 49, 66) 0 W ( ) -2770 W (               OS/2-ECS,) 1432 W ( 3, 9, 10, 46) 0 W 
130 VLFD ( ) 69220 W (  READ, 11, 14, 34, 39, 40,) 0 W ( ) -2773 W (             Output) 2421 W 
130 VLFD ( ) 69220 W (    78,) 0 W ( ) -2752 W (                                    Even) 2162 W ( pages, 6, 7, 29, 43, 75) 0 W 
130 VLFD ( ) 69220 W (  REAL, 11, 13, 23, 33, 34,) 0 W ( ) -2770 W (                Odd) 2400 W ( pages, 6, 29, 43, 75) 0 W 
130 VLFD ( ) 69220 W (    35, 36, 40, 49, 52, 59,) 0 W ( ) -2779 W (             Paper) 3403 W ( Size, 5) 0 W 
130 VLFD ( ) 69220 W (    65, 66, 72) 0 W ( ) -2778 W (                          PATH,) 2343 W ( 10) 0 W 
130 VLFD ( ) 69220 W (  RECORD, 11, 14, 25, 26, 32,) 0 W ( ) -2773 W (           Postscript,) 2003 W ( 5, 6, 7, 9, 75) 0 W 
130 VLFD ( ) 69220 W (    33, 36, 37, 39, 40, 42,) 0 W ( ) -2779 W (             Program) 3403 W ( Capacity, 26) 0 W 
130 VLFD ( ) 69220 W (    56, 59, 60, 63, 68, 76) 0 W (              WATCOM) 3160 W ( FORTRAN, 3) 0 W 
130 VLFD ( ) 69220 W (  RETURN, 11, 40) 0 W ( ) -2770 W (                        WINDOWS,) 1605 W ( 3) 0 W 
130 VLFD ( ) 69220 W (  REWIND, 11, 40) 0 W ( ) -2774 W (                        UNZIP,) 1621 W ( 5) 0 W 
130 VLFD ( ) 69220 W (  SAVE, 9, 11, 40, 66, 68) 0 W ( ) -2770 W (               X,) 2382 W ( 15, 16, 36, 45) 0 W 
130 VLFD ( ) 69220 W (  STOP, 11, 40, 59) 0 W ( ) -2776 W (                      x,) 2028 W ( 16, 45) 0 W 
130 VLFD ( ) 69220 W (  STRUCTURE, 11, 25, 26, 32,) 0 W ( ) -2772 W (            Z,) 1296 W ( 15, 24, 36) 0 W 
130 VLFD ( ) 69220 W (    33, 36, 40, 41, 42, 59,) 0 W 
130 VLFD ( ) 69220 W (    61, 65, 66, 68) 0 W 
130 VLFD ( ) 69220 W (  SUBROUTINE, 6, 11, 18, 26,) 0 W 
130 VLFD ( ) 69220 W (    31, 32, 37, 39, 40, 41,) 0 W 
130 VLFD ( ) 69220 W (    43, 46, 47, 49, 50, 53,) 0 W 
130 VLFD ( ) 69220 W (    56, 62, 64, 65, 66, 70,) 0 W 
130 VLFD ( ) 69220 W (    73, 76) 0 W 
130 VLFD ( ) 69220 W (  TYPE, 11, 14, 40) 0 W 
130 VLFD ( ) 69220 W (  UNION, 11, 12, 14, 25, 26,) 0 W 
130 VLFD ( ) 69220 W (    32, 33, 40, 41, 66, 67,) 0 W 
130 VLFD ( ) 69220 W (    76) 0 W 
130 VLFD ( ) 69220 W (  VIRTUAL, 11, 14, 40) 0 W 
130 VLFD ( ) 69220 W (  VOLATILE, 11, 14) 0 W 
130 VLFD ( ) 69220 W (  WHILE, 11, 13, 14, 40) 0 W 
130 VLFD ( ) 69220 W (  WRITE, 11, 14, 34, 39, 78) 0 W 
130 VLFD ( GETDATE,) 69220 W ( 38, 39, 78) 0 W 
130 VLFD ( GROWHANDLES,) 69220 W ( 38, 69) 0 W 
130 VLFD ( GETTIME,) 69220 W ( 38, 39, 78) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF

526 VLFD ( ) 69220 W (                                                                 -74-) 0 W 
10 /MARC-NewCenturySchlbk-Roman MF
10 /MARC-NewCenturySchlbk-Bold MF
10 /MARC-NewCenturySchlbk-Italic MF
10 /MARC-NewCenturySchlbk-BoldItalic MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF
10  /DecTech MF SF
 LastFF 
 CR
 Reset
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            